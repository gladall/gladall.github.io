<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lanhoo&#39;s blog</title>
  
  <subtitle>subtitle8</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://glanhoo.coding.me/"/>
  <updated>2019-12-05T02:36:41.674Z</updated>
  <id>https://glanhoo.coding.me/</id>
  
  <author>
    <name>Lanhoo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用python写了一个解数字华容道游戏的程序</title>
    <link href="https://glanhoo.coding.me/2019/11/10/%E7%94%A8python%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA%E8%A7%A3%E6%95%B0%E5%AD%97%E5%8D%8E%E5%AE%B9%E9%81%93%E6%B8%B8%E6%88%8F%E7%9A%84%E7%A8%8B%E5%BA%8F/"/>
    <id>https://glanhoo.coding.me/2019/11/10/%E7%94%A8python%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA%E8%A7%A3%E6%95%B0%E5%AD%97%E5%8D%8E%E5%AE%B9%E9%81%93%E6%B8%B8%E6%88%8F%E7%9A%84%E7%A8%8B%E5%BA%8F/</id>
    <published>2019-11-10T11:48:06.000Z</published>
    <updated>2019-12-05T02:36:41.674Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>华容道游戏，可以有数字型，也可以有图像型。这里介绍的是数字华容道，也叫数字推盘。市面上一般有3X3、4X4、5X5、6X6等，其中4X4数字华容道常作为《最强大脑》第一轮节目来选拔选手。</p><p>网络上有很多与之相关的编程话题，但很多都只是把数字打乱，并调整为有解的玩法。而我想要做的是怎样<strong>从一个有解的数字推盘一步一步地还原并且是最少的步数。</strong></p><p>下面这张图就是程序完成后的结果</p></blockquote><p><img src="/images/blog/3X3%E8%BF%98%E5%8E%9F%E5%8D%8E%E5%AE%B9%E9%81%93_hard.gif" alt="3X3还原华容道_hard"></p><a id="more"></a><h3 id="1-创建了一个Position类"><a href="#1-创建了一个Position类" class="headerlink" title="1. 创建了一个Position类"></a>1. 创建了一个Position类</h3><blockquote><p>以3X3为例，那右下角的位置就是<code>p = Positon(2, 2)</code>，它们之前可以相加，判断是否相等，以及作为字典的key。</p></blockquote><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Position</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, a, b)</span>:</span></span><br><span class="line">        self.a = a</span><br><span class="line">        self.b = b</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__add__</span><span class="hljs-params">(self, other)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> Position(self.a + other.a, self.b + other.b)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__repr__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">"(%d, %d)"</span> % (self.a, self.b)</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__eq__</span><span class="hljs-params">(self, other)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> self.a == other.a <span class="hljs-keyword">and</span> self.b == other.b:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment"># 若写了__eq__而不写__hash__方法，用作字典的key时会报错：unhashable type: 'Position'</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__hash__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> hash((self.a, self.b))</span><br><span class="line">    </span><br><span class="line"><span class="hljs-meta">    @property</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">row</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> self.a</span><br><span class="line">    </span><br><span class="line"><span class="hljs-meta">    @property</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">column</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> self.b</span><br></pre></td></tr></table></figure><h3 id="2-创建了一个枚举类，模拟Position类上下左右的情况"><a href="#2-创建了一个枚举类，模拟Position类上下左右的情况" class="headerlink" title="2. 创建了一个枚举类，模拟Position类上下左右的情况"></a>2. 创建了一个枚举类，模拟Position类上下左右的情况</h3><blockquote><p>以3X3为例，右下角<code>p = Positon(2, 2)</code>向左移就得到<code>p + LEFT</code> –&gt; <code>Position(2, 1)</code></p></blockquote><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> enum <span class="hljs-keyword">import</span> Enum</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Move</span><span class="hljs-params">(Enum)</span>:</span></span><br><span class="line">    LEFT = Position(<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>)</span><br><span class="line">    RIGHT = Position(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)</span><br><span class="line">    UP = Position(<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>)</span><br><span class="line">    DOWN = Position(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LEFT = Move.LEFT.value</span><br><span class="line">RIGHT = Move.RIGHT.value</span><br><span class="line">UP = Move.UP.value</span><br><span class="line">DOWN = Move.DOWN.value</span><br><span class="line">CHOICES = [LEFT, UP, RIGHT, DOWN]</span><br></pre></td></tr></table></figure><h3 id="3-最基本的两个类写完，下面代码就不列举了，说下主要的思路"><a href="#3-最基本的两个类写完，下面代码就不列举了，说下主要的思路" class="headerlink" title="3. 最基本的两个类写完，下面代码就不列举了，说下主要的思路"></a>3. 最基本的两个类写完，下面代码就不列举了，说下主要的思路</h3><blockquote><p>我的求解是逆推方式</p><p>下面的以3X3的数字推盘为例</p></blockquote><ul><li><p><code>0</code>代表数字推盘里的空位</p></li><li><p>最初始的状态，也就是还原后的答案为<code>123456780</code></p></li></ul><img src="/images/blog/3x3_0.jpg" alt="3x3_0" style="zoom:50%;"><ul><li><p>它走一步可以有向左<code>123456708</code>和向上<code>123450786</code>两种情况：</p><ul><li>向左，记录一下<code>123456708</code>：<code>l</code></li></ul><img src="/images/blog/3x3_1_l.jpg" alt="3x3_1_l" style="zoom:50%;"><ul><li>向上，记录一下<code>123450786</code>: <code>u</code></li></ul></li></ul><img src="/images/blog/3x3_1_u.jpg" alt="3x3_1_u" style="zoom:50%;"><ul><li><p>走两步的情况：</p><ul><li><code>123456708</code>可以向左，向上，记录下4种情况<ul><li><code>...: ll</code></li><li><code>...: lu</code></li></ul></li><li><code>123450786</code>可以向左，向上<ul><li><code>...: ul</code></li><li><code>...: uu</code></li></ul></li></ul></li><li><p>以此类推，把所有的可能性走完，就把3x3的解法全部记录完成</p></li></ul><h3 id="4-遇到的问题"><a href="#4-遇到的问题" class="headerlink" title="4. 遇到的问题"></a>4. 遇到的问题</h3><ol><li><p>3×3所有的可能情况有<code>9X8X7X6X5X4X3</code>即181440种情况，包括了最初状态，没有乘以2是因为有一半是无解的，无法还原。我用<code>mysql</code>来记录，18万条数据用了<code>36M</code>。</p><p>4x4所有的可能情况有<code>16!/2</code>有大约<code>10万亿</code>条数据，存储所有的4x4大约需要2000TB，个人电脑明显存储不了，所以4x4只存了174万条。</p></li><li><p>像4x4这么多的情况，计算到后面步数越多，计算量巨大，同时写入数据库也巨慢。</p></li></ol><h3 id="5-展示其他的数字华容道"><a href="#5-展示其他的数字华容道" class="headerlink" title="5. 展示其他的数字华容道"></a>5. 展示其他的数字华容道</h3><p><img src="/images/blog/1X10%E8%BF%98%E5%8E%9F%E5%8D%8E%E5%AE%B9%E9%81%93_hard.gif" alt="1X10还原华容道_hard"></p><hr><p><img src="/images/blog/3X2%E8%BF%98%E5%8E%9F%E5%8D%8E%E5%AE%B9%E9%81%93_hard.gif" alt="3X2还原华容道_hard"></p><hr><p><img src="/images/blog/4X4%E8%BF%98%E5%8E%9F%E5%8D%8E%E5%AE%B9%E9%81%93_hard.gif" alt="4X4还原华容道_hard"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;华容道游戏，可以有数字型，也可以有图像型。这里介绍的是数字华容道，也叫数字推盘。市面上一般有3X3、4X4、5X5、6X6等，其中4X4数字华容道常作为《最强大脑》第一轮节目来选拔选手。&lt;/p&gt;
&lt;p&gt;网络上有很多与之相关的编程话题，但很多都只是把数字打乱，并调整为有解的玩法。而我想要做的是怎样&lt;strong&gt;从一个有解的数字推盘一步一步地还原并且是最少的步数。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面这张图就是程序完成后的结果&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/3X3%E8%BF%98%E5%8E%9F%E5%8D%8E%E5%AE%B9%E9%81%93_hard.gif&quot; alt=&quot;3X3还原华容道_hard&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="python" scheme="https://glanhoo.coding.me/tags/python/"/>
    
      <category term="华容道" scheme="https://glanhoo.coding.me/tags/%E5%8D%8E%E5%AE%B9%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>分享一个按照模板文件格式自动汇总统计的脚本</title>
    <link href="https://glanhoo.coding.me/2019/11/08/%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%AA%E6%8C%89%E7%85%A7%E6%A8%A1%E6%9D%BF%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E8%87%AA%E5%8A%A8%E6%B1%87%E6%80%BB%E7%BB%9F%E8%AE%A1%E7%9A%84%E8%84%9A%E6%9C%AC/"/>
    <id>https://glanhoo.coding.me/2019/11/08/%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%AA%E6%8C%89%E7%85%A7%E6%A8%A1%E6%9D%BF%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E8%87%AA%E5%8A%A8%E6%B1%87%E6%80%BB%E7%BB%9F%E8%AE%A1%E7%9A%84%E8%84%9A%E6%9C%AC/</id>
    <published>2019-11-08T01:12:36.000Z</published>
    <updated>2019-11-26T07:55:07.284Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前不久旧同事联系上我，说周报表更新了模板，看能不能改下之前写的程序，以便适应新的模板。我看了下，其实就多了新车当月起保保费，改动不是很多，就当天改好生成EXE文件发给了她。后面反馈使用没问题。</p></blockquote><h2 id="从系统里导出的表格如下："><a href="#从系统里导出的表格如下：" class="headerlink" title="从系统里导出的表格如下："></a>从系统里导出的表格如下：</h2><a id="more"></a><p><img src="/images/blog/image-145643683.png" alt="image-145643683"></p><h2 id="要求的新的模板文件如下图："><a href="#要求的新的模板文件如下图：" class="headerlink" title="要求的新的模板文件如下图："></a>要求的新的模板文件如下图：</h2><p><img src="/images/blog/image-150251030.png" alt="image-150251030"></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd</span><br><span class="line"><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> nan, where</span><br><span class="line"><span class="hljs-keyword">import</span> datetime</span><br><span class="line"><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> walk, path, mkdir</span><br><span class="line"><span class="hljs-keyword">import</span> xlwt</span><br><span class="line"><span class="hljs-keyword">import</span> xlrd</span><br><span class="line"><span class="hljs-keyword">from</span> xlutils.filter <span class="hljs-keyword">import</span> process, XLRDReader, XLWTWriter</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 复制样式</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">copy2</span><span class="hljs-params">(wb)</span>:</span></span><br><span class="line">    w = XLWTWriter()</span><br><span class="line">    process(XLRDReader(wb, <span class="hljs-string">'unknown.xls'</span>), w)</span><br><span class="line">    <span class="hljs-keyword">return</span> w.output[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>], w.style_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 空格转nan</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">space2nan</span><span class="hljs-params">(df, *col)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> col:</span><br><span class="line">        df[i] = df[i].str.strip()</span><br><span class="line">        df[i] = where(df[i], df[i], nan)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_df</span><span class="hljs-params">(xls_name)</span>:</span></span><br><span class="line">  <span class="hljs-comment"># 导出的表格表头在第6行，即header=5</span></span><br><span class="line">    data = pd.read_excel(xls_name, header=<span class="hljs-number">5</span>)</span><br><span class="line">    <span class="hljs-comment"># errorse有三个选项，当出现错误时，为nan用'coerce'</span></span><br><span class="line">    <span class="hljs-comment"># errors : &#123;‘ignore’, ‘raise’, ‘coerce’&#125;, default ‘raise’</span></span><br><span class="line">    <span class="hljs-comment"># If ‘raise’, then invalid parsing will raise an exception</span></span><br><span class="line">    <span class="hljs-comment"># If ‘coerce’, then invalid parsing will be set as NaT</span></span><br><span class="line">    <span class="hljs-comment"># If ‘ignore’, then invalid parsing will return the input</span></span><br><span class="line">    data[<span class="hljs-string">"起保日期"</span>] = pd.to_datetime(data[<span class="hljs-string">"起保日期"</span>], errors=<span class="hljs-string">'coerce'</span>)</span><br><span class="line">    <span class="hljs-comment"># 要对"起保日期“列的数据进行删除，如删除”小计", " "的行数据</span></span><br><span class="line">    data.dropna(how=<span class="hljs-string">"any"</span>, subset=[<span class="hljs-string">"起保日期"</span>], inplace=<span class="hljs-literal">True</span>)</span><br><span class="line"><span class="hljs-comment"># 导出来的数据里看似为空，其实里面是用空格" "的，要用下面的函数把它们转为nan</span></span><br><span class="line">    space2nan(data, <span class="hljs-string">"车辆大类"</span>, <span class="hljs-string">"使用性质"</span>, <span class="hljs-string">"新车标识"</span>)</span><br><span class="line"><span class="hljs-comment"># 对空值前行按照前面的值填充</span></span><br><span class="line">    data.fillna(method=<span class="hljs-string">"ffill"</span>, inplace=<span class="hljs-literal">True</span>)</span><br><span class="line">    <span class="hljs-keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 对当年/去年起保日期数据进行筛选</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_data</span><span class="hljs-params">(df, is_last_year=False)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">if</span> is_last_year:</span><br><span class="line">        year_num = last_year</span><br><span class="line">    <span class="hljs-keyword">else</span>:</span><br><span class="line">        year_num = year</span><br><span class="line">    <span class="hljs-keyword">if</span> month_day:</span><br><span class="line">        year_data = df[(df[<span class="hljs-string">"起保日期"</span>] &lt;= datetime.datetime(year_num, int(month_day[:<span class="hljs-number">2</span>]), int(month_day[<span class="hljs-number">2</span>:]))) &amp;</span><br><span class="line">                       (df[<span class="hljs-string">"起保日期"</span>] &gt;= datetime.datetime(year_num, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>))]</span><br><span class="line">        month_data = year_data[year_data[<span class="hljs-string">"起保日期"</span>] &gt;= datetime.datetime(year_num, int(month_day[:<span class="hljs-number">2</span>]), <span class="hljs-number">1</span>)]</span><br><span class="line">    <span class="hljs-keyword">else</span>:</span><br><span class="line">        year_data = df[(df[<span class="hljs-string">"起保日期"</span>] &lt; datetime.datetime(year_num, today.month, today.day)) &amp;</span><br><span class="line">                       (df[<span class="hljs-string">"起保日期"</span>] &gt;= datetime.datetime(year_num, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>))]</span><br><span class="line">        month_data = year_data[year_data[<span class="hljs-string">"起保日期"</span>] &gt;= datetime.datetime(year_num, month, <span class="hljs-number">1</span>)]  <span class="hljs-comment"># 这里的月数要注意</span></span><br><span class="line">    <span class="hljs-keyword">return</span> year_data, month_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 只保留两位小数，舍弃其他，不进位</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_decimal</span><span class="hljs-params">(flo)</span>:</span></span><br><span class="line">    str_float = str(flo / <span class="hljs-number">10000</span>)</span><br><span class="line">    wan, xiao = str_float.split(<span class="hljs-string">"."</span>)</span><br><span class="line">    <span class="hljs-keyword">return</span> float(<span class="hljs-string">"."</span>.join([wan, xiao[:<span class="hljs-number">2</span>]]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_money</span><span class="hljs-params">(df)</span>:</span></span><br><span class="line">    total = df[<span class="hljs-string">"保费（元）"</span>].sum()</span><br><span class="line">    car = df[df[<span class="hljs-string">"使用性质"</span>] == <span class="hljs-string">"家庭自用"</span>][<span class="hljs-string">"保费（元）"</span>].sum()</span><br><span class="line">    motor = df[df[<span class="hljs-string">"车辆大类"</span>] == <span class="hljs-string">"摩托车"</span>][<span class="hljs-string">"保费（元）"</span>].sum()</span><br><span class="line">    <span class="hljs-keyword">return</span> get_decimal(total), get_decimal(car), get_decimal(motor)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">write2</span><span class="hljs-params">(x, y, value)</span>:</span></span><br><span class="line">    styles = s[rbs.cell_xf_index(x, y)]</span><br><span class="line">    wbs.write(x, y, value, styles)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 写入模板文件</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wrtie2template</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-comment"># 全车险</span></span><br><span class="line">    write2(<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, last_m_all)</span><br><span class="line">    write2(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>, this_m_all)</span><br><span class="line">    write2(<span class="hljs-number">5</span>, <span class="hljs-number">4</span>, (this_m_all - last_m_all) / last_m_all)</span><br><span class="line"></span><br><span class="line">    write2(<span class="hljs-number">5</span>, <span class="hljs-number">5</span>, last_y_all)</span><br><span class="line">    write2(<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, this_y_all)</span><br><span class="line">    write2(<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, (this_y_all - last_y_all) / last_y_all)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment"># 家用车</span></span><br><span class="line">    write2(<span class="hljs-number">6</span>, <span class="hljs-number">2</span>, last_m_car)</span><br><span class="line">    write2(<span class="hljs-number">6</span>, <span class="hljs-number">3</span>, this_m_car)</span><br><span class="line">    write2(<span class="hljs-number">6</span>, <span class="hljs-number">4</span>, (this_m_car - last_m_car) / last_m_car)</span><br><span class="line"></span><br><span class="line">    write2(<span class="hljs-number">6</span>, <span class="hljs-number">5</span>, last_y_car)</span><br><span class="line">    write2(<span class="hljs-number">6</span>, <span class="hljs-number">6</span>, this_y_car)</span><br><span class="line">    write2(<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, (this_y_car - last_y_car) / last_y_car)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment"># 摩托车</span></span><br><span class="line">    write2(<span class="hljs-number">7</span>, <span class="hljs-number">2</span>, last_m_motor)</span><br><span class="line">    write2(<span class="hljs-number">7</span>, <span class="hljs-number">3</span>, this_m_motor)</span><br><span class="line">    write2(<span class="hljs-number">7</span>, <span class="hljs-number">4</span>, (this_m_motor - last_m_motor) / last_m_motor)</span><br><span class="line"></span><br><span class="line">    write2(<span class="hljs-number">7</span>, <span class="hljs-number">5</span>, last_y_motor)</span><br><span class="line">    write2(<span class="hljs-number">7</span>, <span class="hljs-number">6</span>, this_y_motor)</span><br><span class="line">    write2(<span class="hljs-number">7</span>, <span class="hljs-number">7</span>, (this_y_motor - last_y_motor) / last_y_motor)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment"># 新车</span></span><br><span class="line">    <span class="hljs-comment"># 第一行</span></span><br><span class="line">    write2(<span class="hljs-number">5</span>, <span class="hljs-number">8</span>, last_m_new_all)</span><br><span class="line">    write2(<span class="hljs-number">5</span>, <span class="hljs-number">9</span>, this_m_new_all)</span><br><span class="line">    write2(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, (this_m_new_all - last_m_new_all) / last_m_new_all)</span><br><span class="line">    <span class="hljs-comment"># 第二行</span></span><br><span class="line">    write2(<span class="hljs-number">6</span>, <span class="hljs-number">8</span>, last_m_new_car)</span><br><span class="line">    write2(<span class="hljs-number">6</span>, <span class="hljs-number">9</span>, this_m_new_car)</span><br><span class="line">    write2(<span class="hljs-number">6</span>, <span class="hljs-number">10</span>, (this_m_new_car - last_m_new_car) / last_m_new_car)</span><br><span class="line">    <span class="hljs-comment"># 第三行</span></span><br><span class="line">    write2(<span class="hljs-number">7</span>, <span class="hljs-number">8</span>,  last_m_new_motor)</span><br><span class="line">    write2(<span class="hljs-number">7</span>, <span class="hljs-number">9</span>,  this_m_new_motor)</span><br><span class="line">    <span class="hljs-keyword">if</span> last_m_new_motor == <span class="hljs-number">0</span>:</span><br><span class="line">        <span class="hljs-keyword">if</span> this_m_new_motor == <span class="hljs-number">0</span>:</span><br><span class="line">            write2(<span class="hljs-number">7</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>)</span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            write2(<span class="hljs-number">7</span>, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>)</span><br><span class="line">    <span class="hljs-keyword">else</span>:</span><br><span class="line">        write2(<span class="hljs-number">7</span>, <span class="hljs-number">10</span>,  (this_m_new_motor - last_m_new_motor) / last_m_new_motor)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment"># 添加日期</span></span><br><span class="line">    write2(<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-string">"报送日期："</span> + today_date)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment"># 填写单位</span></span><br><span class="line">    write2(<span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-string">"XXXXXX公司"</span>)</span><br><span class="line">    rb.release_resources()  <span class="hljs-comment"># 关闭模板文件</span></span><br><span class="line">    wb.save(file_name)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span></span><br><span class="line">  <span class="hljs-comment"># 与模板相关的代码如下</span></span><br><span class="line">    rb = <span class="hljs-literal">None</span></span><br><span class="line">    <span class="hljs-comment"># 查找模板文件</span></span><br><span class="line">    model_file = <span class="hljs-string">''</span></span><br><span class="line">    <span class="hljs-keyword">for</span> root, dirs, files <span class="hljs-keyword">in</span> walk(<span class="hljs-string">"./模板文件"</span>):</span><br><span class="line">        <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> files:</span><br><span class="line">            <span class="hljs-keyword">if</span> name.endswith(<span class="hljs-string">".xls"</span>) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> name.startswith(<span class="hljs-string">"."</span>):</span><br><span class="line">                model_file = path.join(root, name)</span><br><span class="line">                rb = xlrd.open_workbook(model_file, formatting_info=<span class="hljs-literal">True</span>, on_demand=<span class="hljs-literal">True</span>)</span><br><span class="line">                <span class="hljs-keyword">break</span></span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                input(<span class="hljs-string">"在【模板文件】里没有找到模板文件，请关闭软件，并在模板文件夹内放置模板文件"</span>)</span><br><span class="line">                exit()</span><br><span class="line"></span><br><span class="line">    wb, s = copy2(rb)</span><br><span class="line">    wbs = wb.get_sheet(<span class="hljs-number">0</span>)</span><br><span class="line">    rbs = rb.get_sheet(<span class="hljs-number">0</span>)</span><br><span class="line"></span><br><span class="line">    today = datetime.datetime.now()</span><br><span class="line">    year = today.year</span><br><span class="line">    <span class="hljs-comment"># 如果今天刚好是这个月的第一天，月的数字就得减一</span></span><br><span class="line">    <span class="hljs-keyword">if</span> today.day == <span class="hljs-number">1</span>:</span><br><span class="line">        month = today.month - <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">else</span>:</span><br><span class="line">        month = today.month</span><br><span class="line">    last_year = year - <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">    month_day = input(<span class="hljs-string">"请输入要统计数据的截止日期(包含该日)，写上月日，4位数即可，如【0513】。默认是截止昨天，【回车】即可："</span>).strip()</span><br><span class="line"></span><br><span class="line">    xls_last_year = <span class="hljs-string">""</span>  <span class="hljs-comment"># 保存去年销售数据的xls文件的路径</span></span><br><span class="line">    xls_this_year = <span class="hljs-string">""</span>  <span class="hljs-comment"># 保存今年销售数据的xls文件的路径</span></span><br><span class="line">    <span class="hljs-keyword">for</span> root, dirs, files <span class="hljs-keyword">in</span> walk(<span class="hljs-string">"."</span>):</span><br><span class="line">        <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> files:</span><br><span class="line">            <span class="hljs-keyword">if</span> name.endswith(<span class="hljs-string">".xls"</span>) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> name.startswith(<span class="hljs-string">"."</span>):</span><br><span class="line">                <span class="hljs-keyword">if</span> name.startswith(str(last_year)):</span><br><span class="line">                    xls_last_year = path.join(root, name)</span><br><span class="line">                <span class="hljs-keyword">else</span>:</span><br><span class="line">                    temp = path.join(root, name)</span><br><span class="line">                    <span class="hljs-keyword">if</span> temp != model_file:</span><br><span class="line">                        xls_this_year = temp</span><br><span class="line"></span><br><span class="line">    print(<span class="hljs-string">"去年数据文件："</span>, xls_last_year, <span class="hljs-string">"\t今年数据文件："</span>, xls_this_year)</span><br><span class="line">    last_year_df = get_df(xls_last_year)</span><br><span class="line">    this_year_df = get_df(xls_this_year)</span><br><span class="line"></span><br><span class="line">    last_year_data, last_month_data = get_data(last_year_df, is_last_year=<span class="hljs-literal">True</span>)</span><br><span class="line">    this_year_data, this_month_data = get_data(this_year_df)</span><br><span class="line">    <span class="hljs-comment"># 在当月数据中寻找新车</span></span><br><span class="line">    last_month_new_data = last_month_data[last_month_data[<span class="hljs-string">"新车标识"</span>] == <span class="hljs-string">"是"</span>]</span><br><span class="line">    this_month_new_data = this_month_data[this_month_data[<span class="hljs-string">"新车标识"</span>] == <span class="hljs-string">"是"</span>]</span><br><span class="line"></span><br><span class="line">    last_m_all, last_m_car, last_m_motor = get_money(last_month_data)</span><br><span class="line">    last_y_all, last_y_car, last_y_motor = get_money(last_year_data)</span><br><span class="line">    this_m_all, this_m_car, this_m_motor = get_money(this_month_data)</span><br><span class="line">    this_y_all, this_y_car, this_y_motor = get_money(this_year_data)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment"># 新增了当月累计新车保费统计</span></span><br><span class="line">    last_m_new_all, last_m_new_car, last_m_new_motor = get_money(last_month_new_data)</span><br><span class="line">    this_m_new_all, this_m_new_car, this_m_new_motor = get_money(this_month_new_data)</span><br><span class="line"></span><br><span class="line">    today_date = str(datetime.date.today())</span><br><span class="line">    <span class="hljs-comment"># 写入模版文件</span></span><br><span class="line">    file_name = <span class="hljs-string">"XXXXX车险起保保费周报表_"</span> + today_date + <span class="hljs-string">".xls"</span></span><br><span class="line">    wrtie2template()</span><br><span class="line">    input(<span class="hljs-string">"已经成功生成《%s》文件。请剪切到其他文件夹保存。\n按【回车】退出本程序，感谢您的使用。"</span> % file_name)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="在32位的win7或win10里把py文件生成exe文件"><a href="#在32位的win7或win10里把py文件生成exe文件" class="headerlink" title="在32位的win7或win10里把py文件生成exe文件"></a>在32位的win7或win10里把py文件生成exe文件</h2><blockquote><p>之前用64位的生成，测试运行也没问题，结果放在公司电脑上，出现64位的程序不能运行的问题，只好下个32位的win7来操作才把这个问题解决了。</p></blockquote><ul><li>在win7里要把<code>python3</code>安装好，并安装上面的py文件所用到的库。</li></ul><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pandas</span><br><span class="line">numpy</span><br><span class="line">xlwt</span><br><span class="line">xlrd</span><br><span class="line">xlutils</span><br></pre></td></tr></table></figure><ul><li>确保在终端里能够正常运行脚本文件之后，安装<code>pyinstaller</code></li></ul><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyinstaller</span><br></pre></td></tr></table></figure><ul><li>使用下面命令打包生成可执行文件–exe文件</li></ul><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -F monday.py</span><br><span class="line"></span><br><span class="line">C:\lanhoo\mondayV3&gt;pyinstaller -F monday.py</span><br><span class="line">46 INFO: PyInstaller: 3.4</span><br><span class="line">46 INFO: Python: 3.7.3</span><br><span class="line">46 INFO: Platform: Windows-7-6.1.7601-SP1</span><br><span class="line">46 INFO: wrote C:\lanhoo\mondayV3\monday.spec</span><br><span class="line">46 INFO: UPX is not available.</span><br><span class="line">46 INFO: Extending PYTHONPATH with paths</span><br><span class="line">...</span><br><span class="line">31855 INFO: Appending archive to EXE C:\lanhoo\mondayV3\dist\monday.exe</span><br><span class="line">31886 INFO: Building EXE from EXE-00.toc completed successfully.</span><br></pre></td></tr></table></figure><ul><li>在当前目录里就会生成几个目录，其中<code>dist</code>目录里就有生成的exe文件了，这样就可以把它发给别人在微软的系统里使用了。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前不久旧同事联系上我，说周报表更新了模板，看能不能改下之前写的程序，以便适应新的模板。我看了下，其实就多了新车当月起保保费，改动不是很多，就当天改好生成EXE文件发给了她。后面反馈使用没问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;从系统里导出的表格如下：&quot;&gt;&lt;a href=&quot;#从系统里导出的表格如下：&quot; class=&quot;headerlink&quot; title=&quot;从系统里导出的表格如下：&quot;&gt;&lt;/a&gt;从系统里导出的表格如下：&lt;/h2&gt;
    
    </summary>
    
    
      <category term="数据分析" scheme="https://glanhoo.coding.me/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="https://glanhoo.coding.me/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="pandas" scheme="https://glanhoo.coding.me/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>《利用Python进行数据分析·第2版》附录B 更多关于IPython的内容（完）</title>
    <link href="https://glanhoo.coding.me/2019/11/05/%E3%80%8A%E5%88%A9%E7%94%A8Python%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%C2%B7%E7%AC%AC2%E7%89%88%E3%80%8B%E9%99%84%E5%BD%95B%20%E6%9B%B4%E5%A4%9A%E5%85%B3%E4%BA%8EIPython%E7%9A%84%E5%86%85%E5%AE%B9%EF%BC%88%E5%AE%8C%EF%BC%89/"/>
    <id>https://glanhoo.coding.me/2019/11/05/%E3%80%8A%E5%88%A9%E7%94%A8Python%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%C2%B7%E7%AC%AC2%E7%89%88%E3%80%8B%E9%99%84%E5%BD%95B%20%E6%9B%B4%E5%A4%9A%E5%85%B3%E4%BA%8EIPython%E7%9A%84%E5%86%85%E5%AE%B9%EF%BC%88%E5%AE%8C%EF%BC%89/</id>
    <published>2019-11-05T02:05:39.000Z</published>
    <updated>2019-12-11T02:21:51.639Z</updated>
    
    <content type="html"><![CDATA[<p>转载自<a href="https://www.jianshu.com/p/fb6719a18cea" target="_blank" rel="noopener">简书</a></p><p><a href="../《利用Python进行数据分析·第2版》第1章%20准备工作">第1章 准备工作</a><br> <a href="../《利用Python进行数据分析·第2版》第2章%20Python语法基础，IPython和Jupyter%20Notebooks">第2章 Python语法基础，IPython和Jupyter Notebooks</a><br> <a href="../《利用Python进行数据分析·第2版》第3章%20Python的数据结构、函数和文件">第3章 Python的数据结构、函数和文件</a><br> <a href="../《利用Python进行数据分析·第2版》第4章%20NumPy基础：数组和矢量计算">第4章 NumPy基础：数组和矢量计算</a><br> <a href="../《利用Python进行数据分析·第2版》第5章%20pandas入门">第5章 pandas入门</a><br> <a href="../《利用Python进行数据分析·第2版》第6章%20数据加载、存储与文件格式">第6章 数据加载、存储与文件格式</a><br> <a href="../《利用Python进行数据分析·第2版》第7章%20数据清洗和准备">第7章 数据清洗和准备</a><br> <a href="../《利用Python进行数据分析·第2版》第8章%20数据规整：聚合、合并和重塑">第8章 数据规整：聚合、合并和重塑</a><br> <a href="../《利用Python进行数据分析·第2版》第9章%20绘图和可视化">第9章 绘图和可视化</a><br> <a href="../《利用Python进行数据分析·第2版》第10章%20数据聚合与分组运算">第10章 数据聚合与分组运算</a><br> <a href="../《利用Python进行数据分析·第2版》第11章%20时间序列">第11章 时间序列</a><br> <a href="../《利用Python进行数据分析·第2版》第12章%20pandas高级应用">第12章 pandas高级应用</a><br> <a href="../《利用Python进行数据分析·第2版》第13章%20Python建模库介绍">第13章 Python建模库介绍</a><br> <a href="../《利用Python进行数据分析·第2版》第14章%20数据分析案例">第14章 数据分析案例</a><br> <a href="../《利用Python进行数据分析·第2版》附录A%20NumPy高级应用">附录A NumPy高级应用</a><br>附录B 更多关于IPython的内容（完）      </p><a id="more"></a><hr><p>第2章中，我们学习了IPython shell和Jupyter notebook的基础。本章中，我们会探索IPython更深层次的功能，可以从控制台或在jupyter使用。</p><h1 id="B-1-使用命令历史"><a href="#B-1-使用命令历史" class="headerlink" title="B.1 使用命令历史"></a>B.1 使用命令历史</h1><p>Ipython维护了一个位于磁盘的小型数据库，用于保存执行的每条指令。它的用途有：</p><ul><li>只用最少的输入，就能搜索、补全和执行先前运行过的指令；</li><li>在不同session间保存命令历史；</li><li>将日志输入/输出历史到一个文件</li></ul><p>这些功能在shell中，要比notebook更为有用，因为notebook从设计上是将输入和输出的代码放到每个代码格子中。</p><h2 id="搜索和重复使用命令历史"><a href="#搜索和重复使用命令历史" class="headerlink" title="搜索和重复使用命令历史"></a>搜索和重复使用命令历史</h2><p>Ipython可以让你搜索和执行之前的代码或其他命令。这个功能非常有用，因为你可能需要重复执行同样的命令，例如%run命令，或其它代码。假设你必须要执行：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In[<span class="hljs-number">7</span>]: %run first/second/third/data_script.py</span><br></pre></td></tr></table></figure><p>运行成功，然后检查结果，发现计算有错。解决完问题，然后修改了data_script.py，你就可以输入一些%run命令，然后按Ctrl+P或上箭头。这样就可以搜索历史命令，匹配输入字符的命令。多次按Ctrl+P或上箭头，会继续搜索命令。如果你要执行你想要执行的命令，不要害怕。你可以按下Ctrl-N或下箭头，向前移动历史命令。这样做了几次后，你可以不假思索地按下这些键！</p><p>Ctrl-R可以带来如同Unix风格shell（比如bash shell）的readline的部分增量搜索功能。在Windows上，readline功能是被IPython模仿的。要使用这个功能，先按Ctrl-R，然后输入一些包含于输入行的想要搜索的字符：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">1</span>]: a_command = foo(x, y, z)</span><br><span class="line"></span><br><span class="line">(reverse-i-search)`com<span class="hljs-string">': a_command = foo(x, y, z)</span></span><br></pre></td></tr></table></figure><p>Ctrl-R会循环历史，找到匹配字符的每一行。</p><h2 id="输入和输出变量"><a href="#输入和输出变量" class="headerlink" title="输入和输出变量"></a>输入和输出变量</h2><p>忘记将函数调用的结果分配给变量是非常烦人的。IPython的一个session会在一个特殊变量，存储输入和输出Python对象的引用。前面两个输出会分别存储在 _（一个下划线）和 __（两个下划线）变量：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">24</span>]: <span class="hljs-number">2</span> ** <span class="hljs-number">27</span></span><br><span class="line">Out[<span class="hljs-number">24</span>]: <span class="hljs-number">134217728</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">25</span>]: _</span><br><span class="line">Out[<span class="hljs-number">25</span>]: <span class="hljs-number">134217728</span></span><br></pre></td></tr></table></figure><p>输入变量是存储在名字类似_iX的变量中，X是输入行的编号。对于每个输入变量，都有一个对应的输出变量_X。因此在输入第27行之后，会有两个新变量_27 （输出）和_i27（输入）:</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">26</span>]: foo = <span class="hljs-string">'bar'</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">27</span>]: foo</span><br><span class="line">Out[<span class="hljs-number">27</span>]: <span class="hljs-string">'bar'</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">28</span>]: _i27</span><br><span class="line">Out[<span class="hljs-number">28</span>]: <span class="hljs-string">u'foo'</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">29</span>]: _27</span><br><span class="line">Out[<span class="hljs-number">29</span>]: <span class="hljs-string">'bar'</span></span><br></pre></td></tr></table></figure><p>因为输入变量是字符串，它们可以用Python的exec关键字再次执行：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">30</span>]: exec(_i27)</span><br></pre></td></tr></table></figure><p>这里，_i27是在In [27]输入的代码。</p><p>有几个魔术函数可以让你利用输入和输出历史。%hist可以打印所有或部分的输入历史，加上或不加上编号。%reset可以清理交互命名空间，或输入和输出缓存。%xdel魔术函数可以去除IPython中对一个特别对象的所有引用。对于关于这些魔术方法的更多内容，请查看文档。</p><blockquote><p>警告：当处理非常大的数据集时，要记住IPython的输入和输出的历史会造成被引用的对象不被垃圾回收（释放内存），即使你使用del关键字从交互命名空间删除变量。在这种情况下，小心使用xdel %和%reset可以帮助你避免陷入内存问题。</p></blockquote><h1 id="B-2-与操作系统交互"><a href="#B-2-与操作系统交互" class="headerlink" title="B.2 与操作系统交互"></a>B.2 与操作系统交互</h1><p>IPython的另一个功能是无缝连接文件系统和操作系统。这意味着，在同时做其它事时，无需退出IPython，就可以像Windows或Unix使用命令行操作，包括shell命令、更改目录、用Python对象（列表或字符串）存储结果。它还有简单的命令别名和目录书签功能。</p><p>表B-1总结了调用shell命令的魔术函数和语法。我会在下面几节介绍这些功能。</p><p><img src="/images/blog/7178691-4da7ee14be2da211-1576024711936.webp" alt="img"></p><p>表B-1 IPython系统相关命令</p><h2 id="Shell命令和别名"><a href="#Shell命令和别名" class="headerlink" title="Shell命令和别名"></a>Shell命令和别名</h2><p>用叹号开始一行，是告诉IPython执行叹号后面的所有内容。这意味着你可以删除文件（取决于操作系统，用rm或del）、改变目录或执行任何其他命令。</p><p>通过给变量加上叹号，你可以在一个变量中存储命令的控制台输出。例如，在我联网的基于Linux的主机上，我可以获得IP地址为Python变量：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">1</span>]: ip_info = !ifconfig wlan0 | grep <span class="hljs-string">"inet "</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">2</span>]: ip_info[<span class="hljs-number">0</span>].strip()</span><br><span class="line">Out[<span class="hljs-number">2</span>]: <span class="hljs-string">'inet addr:10.0.0.11  Bcast:10.0.0.255  Mask:255.255.255.0'</span></span><br></pre></td></tr></table></figure><p>返回的Python对象ip_info实际上是一个自定义的列表类型，它包含着多种版本的控制台输出。</p><p>当使用！，IPython还可以替换定义在当前环境的Python值。要这么做，可以在变量名前面加上$符号：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">3</span>]: foo = <span class="hljs-string">'test*'</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">4</span>]: !ls $foo</span><br><span class="line">test4.py  test.py  test.xml</span><br></pre></td></tr></table></figure><p>%alias魔术函数可以自定义shell命令的快捷方式。看一个简单的例子：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">1</span>]: %alias ll ls -l</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">2</span>]: ll /usr</span><br><span class="line">total <span class="hljs-number">332</span></span><br><span class="line">drwxr-xr-x   <span class="hljs-number">2</span> root root  <span class="hljs-number">69632</span> <span class="hljs-number">2012</span><span class="hljs-number">-01</span><span class="hljs-number">-29</span> <span class="hljs-number">20</span>:<span class="hljs-number">36</span> bin/</span><br><span class="line">drwxr-xr-x   <span class="hljs-number">2</span> root root   <span class="hljs-number">4096</span> <span class="hljs-number">2010</span><span class="hljs-number">-08</span><span class="hljs-number">-23</span> <span class="hljs-number">12</span>:<span class="hljs-number">05</span> games/</span><br><span class="line">drwxr-xr-x <span class="hljs-number">123</span> root root  <span class="hljs-number">20480</span> <span class="hljs-number">2011</span><span class="hljs-number">-12</span><span class="hljs-number">-26</span> <span class="hljs-number">18</span>:<span class="hljs-number">08</span> include/</span><br><span class="line">drwxr-xr-x <span class="hljs-number">265</span> root root <span class="hljs-number">126976</span> <span class="hljs-number">2012</span><span class="hljs-number">-01</span><span class="hljs-number">-29</span> <span class="hljs-number">20</span>:<span class="hljs-number">36</span> lib/</span><br><span class="line">drwxr-xr-x  <span class="hljs-number">44</span> root root  <span class="hljs-number">69632</span> <span class="hljs-number">2011</span><span class="hljs-number">-12</span><span class="hljs-number">-26</span> <span class="hljs-number">18</span>:<span class="hljs-number">08</span> lib32/</span><br><span class="line">lrwxrwxrwx   1 root root      3 2010-08-23 16:02 lib64 -&gt; lib/</span><br><span class="line">drwxr-xr-x  <span class="hljs-number">15</span> root root   <span class="hljs-number">4096</span> <span class="hljs-number">2011</span><span class="hljs-number">-10</span><span class="hljs-number">-13</span> <span class="hljs-number">19</span>:<span class="hljs-number">03</span> local/</span><br><span class="line">drwxr-xr-x   <span class="hljs-number">2</span> root root  <span class="hljs-number">12288</span> <span class="hljs-number">2012</span><span class="hljs-number">-01</span><span class="hljs-number">-12</span> <span class="hljs-number">09</span>:<span class="hljs-number">32</span> sbin/</span><br><span class="line">drwxr-xr-x <span class="hljs-number">387</span> root root  <span class="hljs-number">12288</span> <span class="hljs-number">2011</span><span class="hljs-number">-11</span><span class="hljs-number">-04</span> <span class="hljs-number">22</span>:<span class="hljs-number">53</span> share/</span><br><span class="line">drwxrwsr-x  <span class="hljs-number">24</span> root src    <span class="hljs-number">4096</span> <span class="hljs-number">2011</span><span class="hljs-number">-07</span><span class="hljs-number">-17</span> <span class="hljs-number">18</span>:<span class="hljs-number">38</span> src/</span><br></pre></td></tr></table></figure><p>你可以执行多个命令，就像在命令行中一样，只需用分号隔开：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">558</span>]: %alias test_alias (cd examples; ls; cd ..)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">559</span>]: test_alias</span><br><span class="line">macrodata.csv  spx.csv  tips.csv</span><br></pre></td></tr></table></figure><p>当session结束，你定义的别名就会失效。要创建恒久的别名，需要使用配置。</p><h2 id="目录书签系统"><a href="#目录书签系统" class="headerlink" title="目录书签系统"></a>目录书签系统</h2><p>IPython有一个简单的目录书签系统，可以让你保存常用目录的别名，这样在跳来跳去的时候会非常方便。例如，假设你想创建一个书签，指向本书的补充内容：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">6</span>]: %bookmark py4da /home/wesm/code/pydata-book</span><br></pre></td></tr></table></figure><p>这么做之后，当使用%cd魔术命令，就可以使用定义的书签：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">7</span>]: cd py4da</span><br><span class="line">(bookmark:py4da) -&gt; /home/wesm/code/pydata-book</span><br><span class="line">/home/wesm/code/pydata-book</span><br></pre></td></tr></table></figure><p>如果书签的名字，与当前工作目录的一个目录重名，你可以使用-b标志来覆写，使用书签的位置。使用%bookmark的-l选项，可以列出所有的书签：</p><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">8</span>]: %bookmark -l</span><br><span class="line">Current bookmarks:</span><br><span class="line">py4da -&gt; /home/wesm/code/pydata-book-source</span><br></pre></td></tr></table></figure><p>书签，和别名不同，在session之间是保持的。</p><h1 id="B-3-软件开发工具"><a href="#B-3-软件开发工具" class="headerlink" title="B.3 软件开发工具"></a>B.3 软件开发工具</h1><p>除了作为优秀的交互式计算和数据探索环境，IPython也是有效的Python软件开发工具。在数据分析中，最重要的是要有正确的代码。幸运的是，IPython紧密集成了和加强了Python内置的pdb调试器。第二，需要快速的代码。对于这点，IPython有易于使用的代码计时和分析工具。我会详细介绍这些工具。</p><h2 id="交互调试器"><a href="#交互调试器" class="headerlink" title="交互调试器"></a>交互调试器</h2><p>IPython的调试器用tab补全、语法增强、逐行异常追踪增强了pdb。调试代码的最佳时间就是刚刚发生错误。异常发生之后就输入%debug，就启动了调试器，进入抛出异常的堆栈框架：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">2</span>]: run examples/ipython_bug.py</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">AssertionError                            Traceback (most recent call last)</span><br><span class="line">/home/wesm/code/pydata-book/examples/ipython_bug.py <span class="hljs-keyword">in</span> &lt;module&gt;()</span><br><span class="line">     <span class="hljs-number">13</span>     throws_an_exception()</span><br><span class="line">     <span class="hljs-number">14</span></span><br><span class="line">---&gt; 15 calling_things()</span><br><span class="line"></span><br><span class="line">/home/wesm/code/pydata-book/examples/ipython_bug.py <span class="hljs-keyword">in</span> calling_things()</span><br><span class="line"><span class="hljs-number">11</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">calling_things</span><span class="hljs-params">()</span>:</span></span><br><span class="line">     <span class="hljs-number">12</span>     works_fine()</span><br><span class="line">---&gt; 13     throws_an_exception()</span><br><span class="line">     <span class="hljs-number">14</span></span><br><span class="line">     <span class="hljs-number">15</span> calling_things()</span><br><span class="line"></span><br><span class="line">/home/wesm/code/pydata-book/examples/ipython_bug.py <span class="hljs-keyword">in</span> throws_an_exception()</span><br><span class="line">      <span class="hljs-number">7</span>     a = <span class="hljs-number">5</span></span><br><span class="line">      <span class="hljs-number">8</span>     b = <span class="hljs-number">6</span></span><br><span class="line">----&gt; 9     assert(a + b == 10)</span><br><span class="line">     <span class="hljs-number">10</span></span><br><span class="line">     <span class="hljs-number">11</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">calling_things</span><span class="hljs-params">()</span>:</span></span><br><span class="line"></span><br><span class="line">AssertionError:</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">3</span>]: %debug</span><br><span class="line">&gt; /home/wesm/code/pydata-book/examples/ipython_bug.py(<span class="hljs-number">9</span>)throws_an_exception()</span><br><span class="line">      <span class="hljs-number">8</span>     b = <span class="hljs-number">6</span></span><br><span class="line">----&gt; 9     assert(a + b == 10)</span><br><span class="line">     <span class="hljs-number">10</span></span><br><span class="line"></span><br><span class="line">ipdb&gt;</span><br></pre></td></tr></table></figure><p>一旦进入调试器，你就可以执行任意的Python代码，在每个堆栈框架中检查所有的对象和数据（解释器会保持它们活跃）。默认是从错误发生的最低级开始。通过u（up）和d（down），你可以在不同等级的堆栈踪迹切换：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ipdb&gt; u</span><br><span class="line">&gt; /home/wesm/code/pydata-book/examples/ipython_bug.py(<span class="hljs-number">13</span>)calling_things()</span><br><span class="line">     <span class="hljs-number">12</span>     works_fine()</span><br><span class="line">---&gt; 13     throws_an_exception()</span><br><span class="line">     <span class="hljs-number">14</span></span><br></pre></td></tr></table></figure><p>执行%pdb命令，可以在发生任何异常时让IPython自动启动调试器，许多用户会发现这个功能非常好用。</p><p>用调试器帮助开发代码也很容易，特别是当你希望设置断点或在函数和脚本间移动，以检查每个阶段的状态。有多种方法可以实现。第一种是使用%run和-d，它会在执行传入脚本的任何代码之前调用调试器。你必须马上按s（step）以进入脚本：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">5</span>]: run -d examples/ipython_bug.py</span><br><span class="line">Breakpoint <span class="hljs-number">1</span> at /home/wesm/code/pydata-book/examples/ipython_bug.py:<span class="hljs-number">1</span></span><br><span class="line">NOTE: Enter <span class="hljs-string">'c'</span> at the ipdb&gt;  prompt to start your script.</span><br><span class="line">&gt; &lt;string&gt;(<span class="hljs-number">1</span>)&lt;module&gt;()</span><br><span class="line"></span><br><span class="line">ipdb&gt; s</span><br><span class="line">--Call--</span><br><span class="line">&gt; /home/wesm/code/pydata-book/examples/ipython_bug.py(<span class="hljs-number">1</span>)&lt;module&gt;()</span><br><span class="line">1---&gt; 1 def works_fine():</span><br><span class="line">      <span class="hljs-number">2</span>     a = <span class="hljs-number">5</span></span><br><span class="line">      <span class="hljs-number">3</span>     b = <span class="hljs-number">6</span></span><br></pre></td></tr></table></figure><p>然后，你就可以决定如何工作。例如，在前面的异常，我们可以设置一个断点，就在调用works_fine之前，然后运行脚本，在遇到断点时按c（continue）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ipdb&gt; b <span class="hljs-number">12</span></span><br><span class="line">ipdb&gt; c</span><br><span class="line">&gt; /home/wesm/code/pydata-book/examples/ipython_bug.py(<span class="hljs-number">12</span>)calling_things()</span><br><span class="line">     <span class="hljs-number">11</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">calling_things</span><span class="hljs-params">()</span>:</span></span><br><span class="line">2--&gt; 12     works_fine()</span><br><span class="line">     <span class="hljs-number">13</span>     throws_an_exception()</span><br></pre></td></tr></table></figure><p>这时，你可以step进入works_fine()，或通过按n（next）执行works_fine()，进入下一行：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ipdb&gt; n</span><br><span class="line">&gt; /home/wesm/code/pydata-book/examples/ipython_bug.py(<span class="hljs-number">13</span>)calling_things()</span><br><span class="line"><span class="hljs-number">2</span>    <span class="hljs-number">12</span>     works_fine()</span><br><span class="line">---&gt; 13     throws_an_exception()</span><br><span class="line">     <span class="hljs-number">14</span></span><br></pre></td></tr></table></figure><p>然后，我们可以进入throws_an_exception，到达发生错误的一行，查看变量。注意，调试器的命令是在变量名之前，在变量名前面加叹号！可以查看内容：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">ipdb&gt; s</span><br><span class="line">--Call--</span><br><span class="line">&gt; /home/wesm/code/pydata-book/examples/ipython_bug.py(<span class="hljs-number">6</span>)throws_an_exception()</span><br><span class="line">      <span class="hljs-number">5</span></span><br><span class="line">----&gt; 6 def throws_an_exception():</span><br><span class="line">      <span class="hljs-number">7</span>     a = <span class="hljs-number">5</span></span><br><span class="line"></span><br><span class="line">ipdb&gt; n</span><br><span class="line">&gt; /home/wesm/code/pydata-book/examples/ipython_bug.py(<span class="hljs-number">7</span>)throws_an_exception()</span><br><span class="line">      <span class="hljs-number">6</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">throws_an_exception</span><span class="hljs-params">()</span>:</span></span><br><span class="line">----&gt; 7     a = 5</span><br><span class="line">      <span class="hljs-number">8</span>     b = <span class="hljs-number">6</span></span><br><span class="line"></span><br><span class="line">ipdb&gt; n</span><br><span class="line">&gt; /home/wesm/code/pydata-book/examples/ipython_bug.py(<span class="hljs-number">8</span>)throws_an_exception()</span><br><span class="line">      <span class="hljs-number">7</span>     a = <span class="hljs-number">5</span></span><br><span class="line">----&gt; 8     b = 6</span><br><span class="line">      <span class="hljs-number">9</span>     <span class="hljs-keyword">assert</span>(a + b == <span class="hljs-number">10</span>)</span><br><span class="line"></span><br><span class="line">ipdb&gt; n</span><br><span class="line">&gt; /home/wesm/code/pydata-book/examples/ipython_bug.py(<span class="hljs-number">9</span>)throws_an_exception()</span><br><span class="line">      <span class="hljs-number">8</span>     b = <span class="hljs-number">6</span></span><br><span class="line">----&gt; 9     assert(a + b == 10)</span><br><span class="line">     <span class="hljs-number">10</span></span><br><span class="line"></span><br><span class="line">ipdb&gt; !a</span><br><span class="line"><span class="hljs-number">5</span></span><br><span class="line">ipdb&gt; !b</span><br><span class="line"><span class="hljs-number">6</span></span><br></pre></td></tr></table></figure><p>提高使用交互式调试器的熟练度需要练习和经验。表B-2，列出了所有调试器命令。如果你习惯了IDE，你可能觉得终端的调试器在一开始会不顺手，但会觉得越来越好用。一些Python的IDEs有很好的GUI调试器，选择顺手的就好。</p><p><img src="/images/blog/7178691-90a4b17e20b5b03a-1576024711942.webp" alt="img"></p><p>表B-2 IPython调试器命令</p><h2 id="使用调试器的其它方式"><a href="#使用调试器的其它方式" class="headerlink" title="使用调试器的其它方式"></a>使用调试器的其它方式</h2><p>还有一些其它工作可以用到调试器。第一个是使用特殊的set_trace函数（根据pdb.set_trace命名的），这是一个简装的断点。还有两种方法是你可能想用的（像我一样，将其添加到IPython的配置）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> IPython.core.debugger <span class="hljs-keyword">import</span> Pdb</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">set_trace</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    Pdb(color_scheme=<span class="hljs-string">'Linux'</span>).set_trace(sys._getframe().f_back)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">(f, *args, **kwargs)</span>:</span></span><br><span class="line">    pdb = Pdb(color_scheme=<span class="hljs-string">'Linux'</span>)</span><br><span class="line">    <span class="hljs-keyword">return</span> pdb.runcall(f, *args, **kwargs)</span><br></pre></td></tr></table></figure><p>第一个函数set_trace非常简单。如果你想暂时停下来进行仔细检查（比如发生异常之前），可以在代码的任何位置使用set_trace：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">7</span>]: run examples/ipython_bug.py</span><br><span class="line">&gt; /home/wesm/code/pydata-book/examples/ipython_bug.py(<span class="hljs-number">16</span>)calling_things()</span><br><span class="line">     <span class="hljs-number">15</span>     set_trace()</span><br><span class="line">---&gt; 16     throws_an_exception()</span><br><span class="line">     <span class="hljs-number">17</span></span><br></pre></td></tr></table></figure><p>按c（continue）可以让代码继续正常行进。</p><p>我们刚看的debug函数，可以让你方便的在调用任何函数时使用调试器。假设我们写了一个下面的函数，想逐步分析它的逻辑：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span><span class="hljs-params">(x, y, z=<span class="hljs-number">1</span>)</span>:</span></span><br><span class="line">    tmp = x + y</span><br><span class="line">    <span class="hljs-keyword">return</span> tmp / z</span><br></pre></td></tr></table></figure><p>普通地使用f，就会像f(1, 2, z=3)。而要想进入f，将f作为第一个参数传递给debug，再将位置和关键词参数传递给f：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">6</span>]: debug(f, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, z=<span class="hljs-number">3</span>)</span><br><span class="line">&gt; &lt;ipython-input&gt;(<span class="hljs-number">2</span>)f()</span><br><span class="line">      <span class="hljs-number">1</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span><span class="hljs-params">(x, y, z)</span>:</span></span><br><span class="line">----&gt; 2     tmp = x + y</span><br><span class="line">      <span class="hljs-number">3</span>     <span class="hljs-keyword">return</span> tmp / z</span><br><span class="line"></span><br><span class="line">ipdb&gt;</span><br></pre></td></tr></table></figure><p>这两个简单方法节省了我平时的大量时间。</p><p>最后，调试器可以和%run一起使用。脚本通过运行%run -d，就可以直接进入调试器，随意设置断点并启动脚本：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">1</span>]: %run -d examples/ipython_bug.py</span><br><span class="line">Breakpoint <span class="hljs-number">1</span> at /home/wesm/code/pydata-book/examples/ipython_bug.py:<span class="hljs-number">1</span></span><br><span class="line">NOTE: Enter <span class="hljs-string">'c'</span> at the ipdb&gt;  prompt to start your script.</span><br><span class="line">&gt; &lt;string&gt;(<span class="hljs-number">1</span>)&lt;module&gt;()</span><br><span class="line"></span><br><span class="line">ipdb&gt;</span><br></pre></td></tr></table></figure><p>加上-b和行号，可以预设一个断点：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">2</span>]: %run -d -b2 examples/ipython_bug.py</span><br><span class="line"></span><br><span class="line">Breakpoint <span class="hljs-number">1</span> at /home/wesm/code/pydata-book/examples/ipython_bug.py:<span class="hljs-number">2</span></span><br><span class="line">NOTE: Enter <span class="hljs-string">'c'</span> at the ipdb&gt;  prompt to start your script.</span><br><span class="line">&gt; &lt;string&gt;(<span class="hljs-number">1</span>)&lt;module&gt;()</span><br><span class="line"></span><br><span class="line">ipdb&gt; c</span><br><span class="line">&gt; /home/wesm/code/pydata-book/examples/ipython_bug.py(<span class="hljs-number">2</span>)works_fine()</span><br><span class="line">      <span class="hljs-number">1</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">works_fine</span><span class="hljs-params">()</span>:</span></span><br><span class="line">1---&gt; 2     a = 5</span><br><span class="line">      <span class="hljs-number">3</span>     b = <span class="hljs-number">6</span></span><br><span class="line"></span><br><span class="line">ipdb&gt;</span><br></pre></td></tr></table></figure><h2 id="代码计时：-time-和-timeit"><a href="#代码计时：-time-和-timeit" class="headerlink" title="代码计时：%time 和 %timeit"></a>代码计时：%time 和 %timeit</h2><p>对于大型和长时间运行的数据分析应用，你可能希望测量不同组件或单独函数调用语句的执行时间。你可能想知道哪个函数占用的时间最长。幸运的是，IPython可以让你开发和测试代码时，很容易地获得这些信息。</p><p>手动用time模块和它的函数time.clock和time.time给代码计时，既单调又重复，因为必须要写一些无趣的模板化代码：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> time</span><br><span class="line">start = time.time()</span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(iterations):</span><br><span class="line">    <span class="hljs-comment"># some code to run here</span></span><br><span class="line">elapsed_per = (time.time() - start) / iterations</span><br></pre></td></tr></table></figure><p>因为这是一个很普通的操作，IPython有两个魔术函数，%time和%timeit，可以自动化这个过程。</p><p>%time会运行一次语句，报告总共的执行时间。假设我们有一个大的字符串列表，我们想比较不同的可以挑选出特定开头字符串的方法。这里有一个含有600000字符串的列表，和两个方法，用以选出foo开头的字符串：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># a very large list of strings</span></span><br><span class="line">strings = [<span class="hljs-string">'foo'</span>, <span class="hljs-string">'foobar'</span>, <span class="hljs-string">'baz'</span>, <span class="hljs-string">'qux'</span>,</span><br><span class="line">           <span class="hljs-string">'python'</span>, <span class="hljs-string">'Guido Van Rossum'</span>] * <span class="hljs-number">100000</span></span><br><span class="line"></span><br><span class="line">method1 = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> strings <span class="hljs-keyword">if</span> x.startswith(<span class="hljs-string">'foo'</span>)]</span><br><span class="line"></span><br><span class="line">method2 = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> strings <span class="hljs-keyword">if</span> x[:<span class="hljs-number">3</span>] == <span class="hljs-string">'foo'</span>]</span><br></pre></td></tr></table></figure><p>看起来它们的性能应该是同级别的，但事实呢？用%time进行一下测量：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">561</span>]: %time method1 = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> strings <span class="hljs-keyword">if</span> x.startswith(<span class="hljs-string">'foo'</span>)]</span><br><span class="line">CPU times: user <span class="hljs-number">0.19</span> s, sys: <span class="hljs-number">0.00</span> s, total: <span class="hljs-number">0.19</span> s</span><br><span class="line">Wall time: <span class="hljs-number">0.19</span> s</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">562</span>]: %time method2 = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> strings <span class="hljs-keyword">if</span> x[:<span class="hljs-number">3</span>] == <span class="hljs-string">'foo'</span>]</span><br><span class="line">CPU times: user <span class="hljs-number">0.09</span> s, sys: <span class="hljs-number">0.00</span> s, total: <span class="hljs-number">0.09</span> s</span><br><span class="line">Wall time: <span class="hljs-number">0.09</span> s</span><br></pre></td></tr></table></figure><p>Wall time（wall-clock time的简写）是主要关注的。第一个方法是第二个方法的两倍多，但是这种测量方法并不准确。如果用%time多次测量，你就会发现结果是变化的。要想更准确，可以使用%timeit魔术函数。给出任意一条语句，它能多次运行这条语句以得到一个更为准确的时间：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">563</span>]: %timeit [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> strings <span class="hljs-keyword">if</span> x.startswith(<span class="hljs-string">'foo'</span>)]</span><br><span class="line"><span class="hljs-number">10</span> loops, best of <span class="hljs-number">3</span>: <span class="hljs-number">159</span> ms per loop</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">564</span>]: %timeit [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> strings <span class="hljs-keyword">if</span> x[:<span class="hljs-number">3</span>] == <span class="hljs-string">'foo'</span>]</span><br><span class="line"><span class="hljs-number">10</span> loops, best of <span class="hljs-number">3</span>: <span class="hljs-number">59.3</span> ms per loop</span><br></pre></td></tr></table></figure><p>这个例子说明了解Python标准库、NumPy、pandas和其它库的性能是很有价值的。在大型数据分析中，这些毫秒的时间就会累积起来！</p><p>%timeit特别适合分析执行时间短的语句和函数，即使是微秒或纳秒。这些时间可能看起来毫不重要，但是一个20微秒的函数执行1百万次就比一个5微秒的函数长15秒。在上一个例子中，我们可以直接比较两个字符串操作，以了解它们的性能特点：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">565</span>]: x = <span class="hljs-string">'foobar'</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">566</span>]: y = <span class="hljs-string">'foo'</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">567</span>]: %timeit x.startswith(y)</span><br><span class="line"><span class="hljs-number">1000000</span> loops, best of <span class="hljs-number">3</span>: <span class="hljs-number">267</span> ns per loop</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">568</span>]: %timeit x[:<span class="hljs-number">3</span>] == y</span><br><span class="line"><span class="hljs-number">10000000</span> loops, best of <span class="hljs-number">3</span>: <span class="hljs-number">147</span> ns per loop</span><br></pre></td></tr></table></figure><h2 id="基础分析：-prun和-run-p"><a href="#基础分析：-prun和-run-p" class="headerlink" title="基础分析：%prun和%run -p"></a>基础分析：%prun和%run -p</h2><p>分析代码与代码计时关系很紧密，除了它关注的是“时间花在了哪里”。Python主要的分析工具是cProfile模块，它并不局限于IPython。cProfile会执行一个程序或任意的代码块，并会跟踪每个函数执行的时间。</p><p>使用cProfile的通常方式是在命令行中运行一整段程序，输出每个函数的累积时间。假设我们有一个简单的在循环中进行线型代数运算的脚本（计算一系列的100×100矩阵的最大绝对特征值）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line"><span class="hljs-keyword">from</span> numpy.linalg <span class="hljs-keyword">import</span> eigvals</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run_experiment</span><span class="hljs-params">(niter=<span class="hljs-number">100</span>)</span>:</span></span><br><span class="line">    K = <span class="hljs-number">100</span></span><br><span class="line">    results = []</span><br><span class="line">    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> xrange(niter):</span><br><span class="line">        mat = np.random.randn(K, K)</span><br><span class="line">        max_eigenvalue = np.abs(eigvals(mat)).max()</span><br><span class="line">        results.append(max_eigenvalue)</span><br><span class="line">    <span class="hljs-keyword">return</span> results</span><br><span class="line">some_results = run_experiment()</span><br><span class="line"><span class="hljs-keyword">print</span> <span class="hljs-string">'Largest one we saw: %s'</span> % np.max(some_results)</span><br></pre></td></tr></table></figure><p>你可以用cProfile运行这个脚本，使用下面的命令行：</p><figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">python</span> <span class="hljs-selector-tag">-m</span> <span class="hljs-selector-tag">cProfile</span> <span class="hljs-selector-tag">cprof_example</span><span class="hljs-selector-class">.py</span></span><br></pre></td></tr></table></figure><p>运行之后，你会发现输出是按函数名排序的。这样要看出谁耗费的时间多有点困难，最好用-s指定排序：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ python -m cProfile -s cumulative cprof_example.py</span><br><span class="line">Largest one we saw: <span class="hljs-number">11.923204422</span></span><br><span class="line">    <span class="hljs-number">15116</span> function calls (<span class="hljs-number">14927</span> primitive calls) <span class="hljs-keyword">in</span> <span class="hljs-number">0.720</span> seconds</span><br><span class="line"></span><br><span class="line">Ordered by: cumulative time</span><br><span class="line"></span><br><span class="line">ncalls  tottime  percall  cumtime  percall filename:lineno(function)</span><br><span class="line">     <span class="hljs-number">1</span>    <span class="hljs-number">0.001</span>    <span class="hljs-number">0.001</span>    <span class="hljs-number">0.721</span>    <span class="hljs-number">0.721</span> cprof_example.py:<span class="hljs-number">1</span>(&lt;module&gt;)</span><br><span class="line">   <span class="hljs-number">100</span>    <span class="hljs-number">0.003</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">0.586</span>    <span class="hljs-number">0.006</span> linalg.py:<span class="hljs-number">702</span>(eigvals)</span><br><span class="line">   <span class="hljs-number">200</span>    <span class="hljs-number">0.572</span>    <span class="hljs-number">0.003</span>    <span class="hljs-number">0.572</span>    <span class="hljs-number">0.003</span> &#123;numpy.linalg.lapack_lite.dgeev&#125;</span><br><span class="line">     <span class="hljs-number">1</span>    <span class="hljs-number">0.002</span>    <span class="hljs-number">0.002</span>    <span class="hljs-number">0.075</span>    <span class="hljs-number">0.075</span> __init__.py:<span class="hljs-number">106</span>(&lt;module&gt;)</span><br><span class="line">   <span class="hljs-number">100</span>    <span class="hljs-number">0.059</span>    <span class="hljs-number">0.001</span>    <span class="hljs-number">0.059</span>    <span class="hljs-number">0.001</span> &#123;method <span class="hljs-string">'randn'</span>)</span><br><span class="line">     <span class="hljs-number">1</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">0.044</span>    <span class="hljs-number">0.044</span> add_newdocs.py:<span class="hljs-number">9</span>(&lt;module&gt;)</span><br><span class="line">     <span class="hljs-number">2</span>    <span class="hljs-number">0.001</span>    <span class="hljs-number">0.001</span>    <span class="hljs-number">0.037</span>    <span class="hljs-number">0.019</span> __init__.py:<span class="hljs-number">1</span>(&lt;module&gt;)</span><br><span class="line">     <span class="hljs-number">2</span>    <span class="hljs-number">0.003</span>    <span class="hljs-number">0.002</span>    <span class="hljs-number">0.030</span>    <span class="hljs-number">0.015</span> __init__.py:<span class="hljs-number">2</span>(&lt;module&gt;)</span><br><span class="line">     <span class="hljs-number">1</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">0.030</span>    <span class="hljs-number">0.030</span> type_check.py:<span class="hljs-number">3</span>(&lt;module&gt;)</span><br><span class="line">     <span class="hljs-number">1</span>    <span class="hljs-number">0.001</span>    <span class="hljs-number">0.001</span>    <span class="hljs-number">0.021</span>    <span class="hljs-number">0.021</span> __init__.py:<span class="hljs-number">15</span>(&lt;module&gt;)</span><br><span class="line">     <span class="hljs-number">1</span>    <span class="hljs-number">0.013</span>    <span class="hljs-number">0.013</span>    <span class="hljs-number">0.013</span>    <span class="hljs-number">0.013</span> numeric.py:<span class="hljs-number">1</span>(&lt;module&gt;)</span><br><span class="line">     <span class="hljs-number">1</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">0.009</span>    <span class="hljs-number">0.009</span> __init__.py:<span class="hljs-number">6</span>(&lt;module&gt;)</span><br><span class="line">     <span class="hljs-number">1</span>    <span class="hljs-number">0.001</span>    <span class="hljs-number">0.001</span>    <span class="hljs-number">0.008</span>    <span class="hljs-number">0.008</span> __init__.py:<span class="hljs-number">45</span>(&lt;module&gt;)</span><br><span class="line">   <span class="hljs-number">262</span>    <span class="hljs-number">0.005</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">0.007</span>    <span class="hljs-number">0.000</span> function_base.py:<span class="hljs-number">3178</span>(add_newdoc)</span><br><span class="line">   <span class="hljs-number">100</span>    <span class="hljs-number">0.003</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">0.005</span>    <span class="hljs-number">0.000</span> linalg.py:<span class="hljs-number">162</span>(_assertFinite)</span><br></pre></td></tr></table></figure><p>只显示出前15行。扫描cumtime列，可以容易地看出每个函数用了多少时间。如果一个函数调用了其它函数，计时并不会停止。cProfile会记录每个函数的起始和结束时间，使用它们进行计时。</p><p>除了在命令行中使用，cProfile也可以在程序中使用，分析任意代码块，而不必运行新进程。Ipython的%prun和%run -p，有便捷的接口实现这个功能。%prun使用类似cProfile的命令行选项，但是可以分析任意Python语句，而不用整个py文件：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">4</span>]: %prun -l <span class="hljs-number">7</span> -s cumulative run_experiment()</span><br><span class="line">         <span class="hljs-number">4203</span> function calls <span class="hljs-keyword">in</span> <span class="hljs-number">0.643</span> seconds</span><br><span class="line"></span><br><span class="line">Ordered by: cumulative time</span><br><span class="line">List reduced <span class="hljs-keyword">from</span> <span class="hljs-number">32</span> to <span class="hljs-number">7</span> due to restriction &lt;<span class="hljs-number">7</span>&gt;</span><br><span class="line">ncalls  tottime  percall  cumtime  percall filename:lineno(function)</span><br><span class="line">     <span class="hljs-number">1</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">0.643</span>    <span class="hljs-number">0.643</span> &lt;string&gt;:<span class="hljs-number">1</span>(&lt;module&gt;)</span><br><span class="line">     <span class="hljs-number">1</span>    <span class="hljs-number">0.001</span>    <span class="hljs-number">0.001</span>    <span class="hljs-number">0.643</span>    <span class="hljs-number">0.643</span> cprof_example.py:<span class="hljs-number">4</span>(run_experiment)</span><br><span class="line">   <span class="hljs-number">100</span>    <span class="hljs-number">0.003</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">0.583</span>    <span class="hljs-number">0.006</span> linalg.py:<span class="hljs-number">702</span>(eigvals)</span><br><span class="line">   <span class="hljs-number">200</span>    <span class="hljs-number">0.569</span>    <span class="hljs-number">0.003</span>    <span class="hljs-number">0.569</span>    <span class="hljs-number">0.003</span> &#123;numpy.linalg.lapack_lite.dgeev&#125;</span><br><span class="line">   <span class="hljs-number">100</span>    <span class="hljs-number">0.058</span>    <span class="hljs-number">0.001</span>    <span class="hljs-number">0.058</span>    <span class="hljs-number">0.001</span> &#123;method <span class="hljs-string">'randn'</span>&#125;</span><br><span class="line">   <span class="hljs-number">100</span>    <span class="hljs-number">0.003</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">0.005</span>    <span class="hljs-number">0.000</span> linalg.py:<span class="hljs-number">162</span>(_assertFinite)</span><br><span class="line">   <span class="hljs-number">200</span>    <span class="hljs-number">0.002</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">0.002</span>    <span class="hljs-number">0.000</span> &#123;method <span class="hljs-string">'all'</span> of <span class="hljs-string">'numpy.ndarray'</span>&#125;</span><br></pre></td></tr></table></figure><p>相似的，调用<code>%run -p -s cumulative cprof_example.py</code>有和命令行相似的作用，只是你不用离开Ipython。</p><p>在Jupyter notebook中，你可以使用%%prun魔术方法（两个%）来分析一整段代码。这会弹出一个带有分析输出的独立窗口。便于快速回答一些问题，比如“为什么这段代码用了这么长时间”？</p><p>使用IPython或Jupyter，还有一些其它工具可以让分析工作更便于理解。其中之一是SnakeViz（<a href="https://github.com/jiffyclub/snakeviz/），它会使用d3.js产生一个分析结果的交互可视化界面。" target="_blank" rel="noopener">https://github.com/jiffyclub/snakeviz/），它会使用d3.js产生一个分析结果的交互可视化界面。</a></p><h2 id="逐行分析函数"><a href="#逐行分析函数" class="headerlink" title="逐行分析函数"></a>逐行分析函数</h2><p>有些情况下，用%prun（或其它基于cProfile的分析方法）得到的信息，不能获得函数执行时间的整个过程，或者结果过于复杂，加上函数名，很难进行解读。对于这种情况，有一个小库叫做line_profiler（可以通过PyPI或包管理工具获得）。它包含IPython插件，可以启用一个新的魔术函数%lprun，可以对一个函数或多个函数进行逐行分析。你可以通过修改IPython配置（查看IPython文档或本章后面的配置小节）加入下面这行，启用这个插件：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># A list of dotted module names of IPython extensions to load.</span></span><br><span class="line">c.TerminalIPythonApp.extensions = [<span class="hljs-string">'line_profiler'</span>]</span><br></pre></td></tr></table></figure><p>你还可以运行命令：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%load_ext line_profiler</span><br></pre></td></tr></table></figure><p>line_profiler也可以在程序中使用（查看完整文档），但是在IPython中使用是最为强大的。假设你有一个带有下面代码的模块prof_mod，做一些NumPy数组操作：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> numpy.random <span class="hljs-keyword">import</span> randn</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_and_sum</span><span class="hljs-params">(x, y)</span>:</span></span><br><span class="line">    added = x + y</span><br><span class="line">    summed = added.sum(axis=<span class="hljs-number">1</span>)</span><br><span class="line">    <span class="hljs-keyword">return</span> summed</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call_function</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    x = randn(<span class="hljs-number">1000</span>, <span class="hljs-number">1000</span>)</span><br><span class="line">    y = randn(<span class="hljs-number">1000</span>, <span class="hljs-number">1000</span>)</span><br><span class="line">    <span class="hljs-keyword">return</span> add_and_sum(x, y)</span><br></pre></td></tr></table></figure><p>如果想了解add_and_sum函数的性能，%prun可以给出下面内容：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">569</span>]: %run prof_mod</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">570</span>]: x = randn(<span class="hljs-number">3000</span>, <span class="hljs-number">3000</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">571</span>]: y = randn(<span class="hljs-number">3000</span>, <span class="hljs-number">3000</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">572</span>]: %prun add_and_sum(x, y)</span><br><span class="line">         <span class="hljs-number">4</span> function calls <span class="hljs-keyword">in</span> <span class="hljs-number">0.049</span> seconds</span><br><span class="line">   Ordered by: internal time</span><br><span class="line">   ncalls  tottime  percall  cumtime  percall filename:lineno(function)</span><br><span class="line">        <span class="hljs-number">1</span>    <span class="hljs-number">0.036</span>    <span class="hljs-number">0.036</span>    <span class="hljs-number">0.046</span>    <span class="hljs-number">0.046</span> prof_mod.py:<span class="hljs-number">3</span>(add_and_sum)</span><br><span class="line">        <span class="hljs-number">1</span>    <span class="hljs-number">0.009</span>    <span class="hljs-number">0.009</span>    <span class="hljs-number">0.009</span>    <span class="hljs-number">0.009</span> &#123;method <span class="hljs-string">'sum'</span> of <span class="hljs-string">'numpy.ndarray'</span>&#125;</span><br><span class="line">        <span class="hljs-number">1</span>    <span class="hljs-number">0.003</span>    <span class="hljs-number">0.003</span>    <span class="hljs-number">0.049</span>    <span class="hljs-number">0.049</span> &lt;string&gt;:<span class="hljs-number">1</span>(&lt;module&gt;)</span><br></pre></td></tr></table></figure><p>上面的做法启发性不大。激活了IPython插件line_profiler，新的命令%lprun就能用了。使用中的不同点是，我们必须告诉%lprun要分析的函数是哪个。语法是：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%lprun -f func1 -f func2 statement_to_profile</span><br></pre></td></tr></table></figure><p>我们想分析add_and_sum，运行：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">573</span>]: %lprun -f add_and_sum add_and_sum(x, y)</span><br><span class="line">Timer unit: <span class="hljs-number">1e-06</span> s</span><br><span class="line">File: prof_mod.py</span><br><span class="line">Function: add_and_sum at line <span class="hljs-number">3</span></span><br><span class="line">Total time: <span class="hljs-number">0.045936</span> s</span><br><span class="line">Line <span class="hljs-comment">#      Hits         Time  Per Hit   % Time  Line Contents</span></span><br><span class="line">==============================================================</span><br><span class="line">     <span class="hljs-number">3</span>                                           <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_and_sum</span><span class="hljs-params">(x, y)</span>:</span></span><br><span class="line">     <span class="hljs-number">4</span>         <span class="hljs-number">1</span>        <span class="hljs-number">36510</span>  <span class="hljs-number">36510.0</span>     <span class="hljs-number">79.5</span>      added = x + y</span><br><span class="line">     <span class="hljs-number">5</span>         <span class="hljs-number">1</span>         <span class="hljs-number">9425</span>   <span class="hljs-number">9425.0</span>     <span class="hljs-number">20.5</span>      summed = added.sum(axis=<span class="hljs-number">1</span>)</span><br><span class="line">     <span class="hljs-number">6</span>         <span class="hljs-number">1</span>            <span class="hljs-number">1</span>      <span class="hljs-number">1.0</span>      <span class="hljs-number">0.0</span>      <span class="hljs-keyword">return</span> summed</span><br></pre></td></tr></table></figure><p>这样就容易诠释了。我们分析了和代码语句中一样的函数。看之前的模块代码，我们可以调用call_function并对它和add_and_sum进行分析，得到一个完整的代码性能概括：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">574</span>]: %lprun -f add_and_sum -f call_function call_function()</span><br><span class="line">Timer unit: <span class="hljs-number">1e-06</span> s</span><br><span class="line">File: prof_mod.py</span><br><span class="line">Function: add_and_sum at line <span class="hljs-number">3</span></span><br><span class="line">Total time: <span class="hljs-number">0.005526</span> s</span><br><span class="line">Line <span class="hljs-comment">#      Hits         Time  Per Hit   % Time  Line Contents</span></span><br><span class="line">==============================================================</span><br><span class="line">     <span class="hljs-number">3</span>                                           <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_and_sum</span><span class="hljs-params">(x, y)</span>:</span></span><br><span class="line">     <span class="hljs-number">4</span>         <span class="hljs-number">1</span>         <span class="hljs-number">4375</span>   <span class="hljs-number">4375.0</span>     <span class="hljs-number">79.2</span>      added = x + y</span><br><span class="line">     <span class="hljs-number">5</span>         <span class="hljs-number">1</span>         <span class="hljs-number">1149</span>   <span class="hljs-number">1149.0</span>     <span class="hljs-number">20.8</span>      summed = added.sum(axis=<span class="hljs-number">1</span>)</span><br><span class="line">     <span class="hljs-number">6</span>         <span class="hljs-number">1</span>            <span class="hljs-number">2</span>      <span class="hljs-number">2.0</span>      <span class="hljs-number">0.0</span>      <span class="hljs-keyword">return</span> summed</span><br><span class="line">File: prof_mod.py</span><br><span class="line">Function: call_function at line <span class="hljs-number">8</span></span><br><span class="line">Total time: <span class="hljs-number">0.121016</span> s</span><br><span class="line">Line <span class="hljs-comment">#      Hits         Time  Per Hit   % Time  Line Contents</span></span><br><span class="line">==============================================================</span><br><span class="line">     <span class="hljs-number">8</span>                                           <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call_function</span><span class="hljs-params">()</span>:</span></span><br><span class="line">     <span class="hljs-number">9</span>         <span class="hljs-number">1</span>        <span class="hljs-number">57169</span>  <span class="hljs-number">57169.0</span>     <span class="hljs-number">47.2</span>      x = randn(<span class="hljs-number">1000</span>, <span class="hljs-number">1000</span>)</span><br><span class="line">    <span class="hljs-number">10</span>         <span class="hljs-number">1</span>        <span class="hljs-number">58304</span>  <span class="hljs-number">58304.0</span>     <span class="hljs-number">48.2</span>      y = randn(<span class="hljs-number">1000</span>, <span class="hljs-number">1000</span>)</span><br><span class="line">    <span class="hljs-number">11</span>         <span class="hljs-number">1</span>         <span class="hljs-number">5543</span>   <span class="hljs-number">5543.0</span>      <span class="hljs-number">4.6</span>      <span class="hljs-keyword">return</span> add_and_sum(x, y)</span><br></pre></td></tr></table></figure><p>我的经验是用%prun (cProfile)进行宏观分析，%lprun (line_profiler)做微观分析。最好对这两个工具都了解清楚。</p><blockquote><p>笔记：使用%lprun必须要指明函数名的原因是追踪每行的执行时间的损耗过多。追踪无用的函数会显著地改变结果。</p></blockquote><h1 id="B-4-使用IPython高效开发的技巧"><a href="#B-4-使用IPython高效开发的技巧" class="headerlink" title="B.4 使用IPython高效开发的技巧"></a>B.4 使用IPython高效开发的技巧</h1><p>方便快捷地写代码、调试和使用是每个人的目标。除了代码风格，流程细节（比如代码重载）也需要一些调整。</p><p>因此，这一节的内容更像是门艺术而不是科学，还需要你不断的试验，以达成高效。最终，你要能结构优化代码，并且能省时省力地检查程序或函数的结果。我发现用IPython设计的软件比起命令行，要更适合工作。尤其是当发生错误时，你需要检查自己或别人写的数月或数年前写的代码的错误。</p><h2 id="重载模块依赖"><a href="#重载模块依赖" class="headerlink" title="重载模块依赖"></a>重载模块依赖</h2><p>在Python中，当你输入import some_lib，some_lib中的代码就会被执行，所有的变量、函数和定义的引入，就会被存入到新创建的some_lib模块命名空间。当下一次输入some_lib，就会得到一个已存在的模块命名空间的引用。潜在的问题是当你%run一个脚本，它依赖于另一个模块，而这个模块做过修改，就会产生问题。假设我在test_script.py中有如下代码：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> some_lib</span><br><span class="line"></span><br><span class="line">x = <span class="hljs-number">5</span></span><br><span class="line">y = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]</span><br><span class="line">result = some_lib.get_answer(x, y)</span><br></pre></td></tr></table></figure><p>如果你运行过了%run test_script.py，然后修改了some_lib.py，下一次再执行%run test_script.py，还会得到旧版本的some_lib.py，这是因为Python模块系统的“一次加载”机制。这一点区分了Python和其它数据分析环境，比如MATLAB，它会自动传播代码修改。解决这个问题，有多种方法。第一种是在标准库importlib模块中使用reload函数：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> some_lib</span><br><span class="line"><span class="hljs-keyword">import</span> importlib</span><br><span class="line"></span><br><span class="line">importlib.reload(some_lib)</span><br></pre></td></tr></table></figure><p>这可以保证每次运行test_script.py时可以加载最新的some_lib.py。很明显，如果依赖更深，在各处都使用reload是非常麻烦的。对于这个问题，IPython有一个特殊的dreload函数（它不是魔术函数）重载深层的模块。如果我运行过some_lib.py，然后输入dreload(some_lib)，就会尝试重载some_lib和它的依赖。不过，这个方法不适用于所有场景，但比重启IPython强多了。</p><h2 id="代码设计技巧"><a href="#代码设计技巧" class="headerlink" title="代码设计技巧"></a>代码设计技巧</h2><p>对于这单，没有简单的对策，但是有一些原则，是我在工作中发现很好用的。</p><h2 id="保持相关对象和数据活跃"><a href="#保持相关对象和数据活跃" class="headerlink" title="保持相关对象和数据活跃"></a>保持相关对象和数据活跃</h2><p>为命令行写一个下面示例中的程序是很少见的：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> my_functions <span class="hljs-keyword">import</span> g</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span><span class="hljs-params">(x, y)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">return</span> g(x + y)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    x = <span class="hljs-number">6</span></span><br><span class="line">    y = <span class="hljs-number">7.5</span></span><br><span class="line">    result = x + y</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>在IPython中运行这个程序会发生问题，你发现是什么了吗？运行之后，任何定义在main函数中的结果和对象都不能在IPython中被访问到。更好的方法是将main中的代码直接在模块的命名空间中执行（或者在<code>__name__ == &#39;__main__&#39;:</code>中，如果你想让这个模块可以被引用）。这样，当你%rundiamante，就可以查看所有定义在main中的变量。这等价于在Jupyter notebook的代码格中定义一个顶级变量。</p><h2 id="扁平优于嵌套"><a href="#扁平优于嵌套" class="headerlink" title="扁平优于嵌套"></a>扁平优于嵌套</h2><p>深层嵌套的代码总让我联想到洋葱皮。当测试或调试一个函数时，你需要剥多少层洋葱皮才能到达目标代码呢？“扁平优于嵌套”是Python之禅的一部分，它也适用于交互式代码开发。尽量将函数和类去耦合和模块化，有利于测试（如果你是在写单元测试）、调试和交互式使用。</p><h2 id="克服对大文件的恐惧"><a href="#克服对大文件的恐惧" class="headerlink" title="克服对大文件的恐惧"></a>克服对大文件的恐惧</h2><p>如果你之前是写JAVA（或者其它类似的语言），你可能被告知要让文件简短。在多数语言中，这都是合理的建议：太长会让人感觉是坏代码，意味着重构和重组是必要的。但是，在用IPython开发时，运行10个相关联的小文件（小于100行），比起两个或三个长文件，会让你更头疼。更少的文件意味着重载更少的模块和更少的编辑时在文件中跳转。我发现维护大模块，每个模块都是紧密组织的，会更实用和Pythonic。经过方案迭代，有时会将大文件分解成小文件。</p><p>我不建议极端化这条建议，那样会形成一个单独的超大文件。找到一个合理和直观的大型代码模块库和封装结构往往需要一点工作，但这在团队工作中非常重要。每个模块都应该结构紧密，并且应该能直观地找到负责每个功能领域功能和类。</p><h1 id="B-5-IPython高级功能"><a href="#B-5-IPython高级功能" class="headerlink" title="B.5 IPython高级功能"></a>B.5 IPython高级功能</h1><p>要全面地使用IPython系统需要用另一种稍微不同的方式写代码，或深入IPython的配置。</p><h2 id="让类是对IPython友好的"><a href="#让类是对IPython友好的" class="headerlink" title="让类是对IPython友好的"></a>让类是对IPython友好的</h2><p>IPython会尽可能地在控制台美化展示每个字符串。对于许多对象，比如字典、列表和元组，内置的pprint模块可以用来美化格式。但是，在用户定义的类中，你必自己生成字符串。假设有一个下面的简单的类：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Message</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, msg)</span>:</span></span><br><span class="line">        self.msg = msg</span><br></pre></td></tr></table></figure><p>如果这么写，就会发现默认的输出不够美观：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">576</span>]: x = Message(<span class="hljs-string">'I have a secret'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">577</span>]: x</span><br><span class="line">Out[<span class="hljs-number">577</span>]: &lt;__main__.Message instance at <span class="hljs-number">0x60ebbd8</span>&gt;</span><br></pre></td></tr></table></figure><p>IPython会接收<strong>repr</strong>魔术方法返回的字符串（通过output = repr(obj)），并在控制台打印出来。因此，我们可以添加一个简单的<strong>repr</strong>方法到前面的类中，以得到一个更有用的输出：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Message</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, msg)</span>:</span></span><br><span class="line">        self.msg = msg</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__repr__</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">'Message: %s'</span> % self.msg</span><br><span class="line">In [<span class="hljs-number">579</span>]: x = Message(<span class="hljs-string">'I have a secret'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">580</span>]: x</span><br><span class="line">Out[<span class="hljs-number">580</span>]: Message: I have a secret</span><br></pre></td></tr></table></figure><h2 id="文件和配置"><a href="#文件和配置" class="headerlink" title="文件和配置"></a>文件和配置</h2><p>通过扩展配置系统，大多数IPython和Jupyter notebook的外观（颜色、提示符、行间距等等）和动作都是可以配置的。通过配置，你可以做到：</p><ul><li>改变颜色主题</li><li>改变输入和输出提示符，或删除输出之后、输入之前的空行</li><li>执行任意Python语句（例如，引入总是要使用的代码或者每次加载IPython都要运行的内容）</li><li>启用IPython总是要运行的插件，比如line_profiler中的%lprun魔术函数</li><li>启用Jupyter插件</li><li>定义自己的魔术函数或系统别名</li></ul><p>IPython的配置存储在特殊的ipython_config.py文件中，它通常是在用户home目录的.ipython/文件夹中。配置是通过一个特殊文件。当你启动IPython，就会默认加载这个存储在profile_default文件夹中的默认文件。因此，在我的Linux系统，完整的IPython配置文件路径是：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/wesm/.ipython/profile_default/ipython_config.py</span><br></pre></td></tr></table></figure><p>要启动这个文件，运行下面的命令：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipython profile create</span><br></pre></td></tr></table></figure><p>这个文件中的内容留给读者自己探索。这个文件有注释，解释了每个配置选项的作用。另一点，可以有多个配置文件。假设你想要另一个IPython配置文件，专门是为另一个应用或项目的。创建一个新的配置文件很简单，如下所示：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipython profile create secret_project</span><br></pre></td></tr></table></figure><p>做完之后，在新创建的profile_secret_project目录便捷配置文件，然后如下启动IPython：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ ipython --profile=secret_project</span><br><span class="line">Python <span class="hljs-number">3.5</span><span class="hljs-number">.1</span> | packaged by conda-forge | (default, May <span class="hljs-number">20</span> <span class="hljs-number">2016</span>, <span class="hljs-number">05</span>:<span class="hljs-number">22</span>:<span class="hljs-number">56</span>)</span><br><span class="line">Type <span class="hljs-string">"copyright"</span>, <span class="hljs-string">"credits"</span> <span class="hljs-keyword">or</span> <span class="hljs-string">"license"</span> <span class="hljs-keyword">for</span> more information.</span><br><span class="line"></span><br><span class="line">IPython <span class="hljs-number">5.1</span><span class="hljs-number">.0</span> -- An enhanced Interactive Python.</span><br><span class="line">?         -&gt; Introduction and overview of IPython's features.</span><br><span class="line">%quickref -&gt; Quick reference.</span><br><span class="line">help      -&gt; Python's own help system.</span><br><span class="line">object?   -&gt; Details about 'object', use 'object??' for extra details.</span><br><span class="line"></span><br><span class="line">IPython profile: secret_project</span><br></pre></td></tr></table></figure><p>和之前一样，IPython的文档是一个极好的学习配置文件的资源。</p><p>配置Jupyter有些不同，因为你可以使用除了Python的其它语言。要创建一个类似的Jupyter配置文件，运行：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure><p>这样会在home目录的.jupyter/jupyter_notebook_config.py创建配置文件。编辑完之后，可以将它重命名：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mv ~/.jupyter/jupyter_notebook_config.py ~/.jupyter/my_custom_config.py</span><br></pre></td></tr></table></figure><p>打开Jupyter之后，你可以添加–config参数：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --config=~/.jupyter/my_custom_config.py</span><br></pre></td></tr></table></figure><h1 id="B-6-总结"><a href="#B-6-总结" class="headerlink" title="B.6 总结"></a>B.6 总结</h1><p>学习过本书中的代码案例，你的Python技能得到了一定的提升，我建议你持续学习IPython和Jupyter。因为这两个项目的设计初衷就是提高生产率的，你可能还会发现一些工具，可以让你更便捷地使用Python和计算库。</p><p>你可以在nbviewer（<a href="https://nbviewer.jupyter.org/）上找到更多有趣的Jupyter" target="_blank" rel="noopener">https://nbviewer.jupyter.org/）上找到更多有趣的Jupyter</a> notebooks。</p><hr><p><a href="https://www.jianshu.com/p/04d180d90a3f" target="_blank" rel="noopener">第1章 准备工作</a><a href="https://www.jianshu.com/p/fc93e943e94a" target="_blank" rel="noopener">第2章 Python语法基础，IPython和Jupyter</a><a href="https://www.jianshu.com/p/b444cda10aa0" target="_blank" rel="noopener">第3章 Python的数据结构、函数和文件</a><a href="https://www.jianshu.com/p/a380222a3292" target="_blank" rel="noopener">第4章 NumPy基础：数组和矢量计算</a><a href="https://www.jianshu.com/p/161364dd0acf" target="_blank" rel="noopener">第5章 pandas入门</a><a href="https://www.jianshu.com/p/047d8c1c7e14" target="_blank" rel="noopener">第6章 数据加载、存储与文件格式</a><a href="https://www.jianshu.com/p/ac7bec000dad" target="_blank" rel="noopener">第7章 数据清洗和准备</a><a href="https://www.jianshu.com/p/cfc035bae567" target="_blank" rel="noopener">第8章 数据规整：聚合、合并和重塑</a><a href="https://www.jianshu.com/p/7a0eafdd1340" target="_blank" rel="noopener">第9章 绘图和可视化</a><a href="https://www.jianshu.com/p/b94deb5c7eb1" target="_blank" rel="noopener">第10章 数据聚合与分组运算</a><a href="https://www.jianshu.com/p/29ece4592178" target="_blank" rel="noopener">第11章 时间序列</a><a href="https://www.jianshu.com/p/9d093ebcc5d8" target="_blank" rel="noopener">第12章 pandas高级应用</a><a href="https://www.jianshu.com/p/e46a1ac36aa5" target="_blank" rel="noopener">第13章 Python建模库介绍</a><a href="https://www.jianshu.com/p/72b6c83bb69e" target="_blank" rel="noopener">第14章 数据分析案例</a><a href="https://www.jianshu.com/p/3c3f7da88516" target="_blank" rel="noopener">附录A NumPy高级应用</a>附录B 更多关于IPython的内容（完）</p><hr><blockquote><p>后记：经过三个月，总算翻译完成了这本书。工作砌码，回家码字。最大的改变是，十个手指头，除了两个大拇指和右手的小拇指，其它指尖竟然掉皮、磨出了茧。好长时间，只要手一沾水，就会起皱。读者们持续的阅读、点赞、留言、指出错误，让我感觉是和很多人一起完成一项有意义的事情。Thanks all！</p></blockquote><blockquote><p>后记2：2018年8月5日，做完了第一次校阅。</p></blockquote><p><img src="/images/blog/7178691-260d699e695f8e81.webp" alt="img"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载自&lt;a href=&quot;https://www.jianshu.com/p/fb6719a18cea&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;../《利用Python进行数据分析·第2版》第1章%20准备工作&quot;&gt;第1章 准备工作&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第2章%20Python语法基础，IPython和Jupyter%20Notebooks&quot;&gt;第2章 Python语法基础，IPython和Jupyter Notebooks&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第3章%20Python的数据结构、函数和文件&quot;&gt;第3章 Python的数据结构、函数和文件&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第4章%20NumPy基础：数组和矢量计算&quot;&gt;第4章 NumPy基础：数组和矢量计算&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第5章%20pandas入门&quot;&gt;第5章 pandas入门&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第6章%20数据加载、存储与文件格式&quot;&gt;第6章 数据加载、存储与文件格式&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第7章%20数据清洗和准备&quot;&gt;第7章 数据清洗和准备&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第8章%20数据规整：聚合、合并和重塑&quot;&gt;第8章 数据规整：聚合、合并和重塑&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第9章%20绘图和可视化&quot;&gt;第9章 绘图和可视化&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第10章%20数据聚合与分组运算&quot;&gt;第10章 数据聚合与分组运算&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第11章%20时间序列&quot;&gt;第11章 时间序列&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第12章%20pandas高级应用&quot;&gt;第12章 pandas高级应用&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第13章%20Python建模库介绍&quot;&gt;第13章 Python建模库介绍&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第14章%20数据分析案例&quot;&gt;第14章 数据分析案例&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》附录A%20NumPy高级应用&quot;&gt;附录A NumPy高级应用&lt;/a&gt;&lt;br&gt;附录B 更多关于IPython的内容（完）      &lt;/p&gt;
    
    </summary>
    
    
      <category term="数据分析" scheme="https://glanhoo.coding.me/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="https://glanhoo.coding.me/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="pandas" scheme="https://glanhoo.coding.me/tags/pandas/"/>
    
      <category term="python" scheme="https://glanhoo.coding.me/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>《利用Python进行数据分析·第2版》附录A NumPy高级应用</title>
    <link href="https://glanhoo.coding.me/2019/11/05/%E3%80%8A%E5%88%A9%E7%94%A8Python%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%C2%B7%E7%AC%AC2%E7%89%88%E3%80%8B%E9%99%84%E5%BD%95A%20NumPy%E9%AB%98%E7%BA%A7%E5%BA%94%E7%94%A8/"/>
    <id>https://glanhoo.coding.me/2019/11/05/%E3%80%8A%E5%88%A9%E7%94%A8Python%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%C2%B7%E7%AC%AC2%E7%89%88%E3%80%8B%E9%99%84%E5%BD%95A%20NumPy%E9%AB%98%E7%BA%A7%E5%BA%94%E7%94%A8/</id>
    <published>2019-11-05T02:04:52.000Z</published>
    <updated>2019-12-11T02:21:42.086Z</updated>
    
    <content type="html"><![CDATA[<p>转载自<a href="https://www.jianshu.com/p/3c3f7da88516" target="_blank" rel="noopener">简书</a></p><p><a href="../《利用Python进行数据分析·第2版》第1章%20准备工作">第1章 准备工作</a><br> <a href="../《利用Python进行数据分析·第2版》第2章%20Python语法基础，IPython和Jupyter%20Notebooks">第2章 Python语法基础，IPython和Jupyter Notebooks</a><br> <a href="../《利用Python进行数据分析·第2版》第3章%20Python的数据结构、函数和文件">第3章 Python的数据结构、函数和文件</a><br> <a href="../《利用Python进行数据分析·第2版》第4章%20NumPy基础：数组和矢量计算">第4章 NumPy基础：数组和矢量计算</a><br> <a href="../《利用Python进行数据分析·第2版》第5章%20pandas入门">第5章 pandas入门</a><br> <a href="../《利用Python进行数据分析·第2版》第6章%20数据加载、存储与文件格式">第6章 数据加载、存储与文件格式</a><br> <a href="../《利用Python进行数据分析·第2版》第7章%20数据清洗和准备">第7章 数据清洗和准备</a><br> <a href="../《利用Python进行数据分析·第2版》第8章%20数据规整：聚合、合并和重塑">第8章 数据规整：聚合、合并和重塑</a><br> <a href="../《利用Python进行数据分析·第2版》第9章%20绘图和可视化">第9章 绘图和可视化</a><br> <a href="../《利用Python进行数据分析·第2版》第10章%20数据聚合与分组运算">第10章 数据聚合与分组运算</a><br> <a href="../《利用Python进行数据分析·第2版》第11章%20时间序列">第11章 时间序列</a><br> <a href="../《利用Python进行数据分析·第2版》第12章%20pandas高级应用">第12章 pandas高级应用</a><br> <a href="../《利用Python进行数据分析·第2版》第13章%20Python建模库介绍">第13章 Python建模库介绍</a><br> <a href="../《利用Python进行数据分析·第2版》第14章%20数据分析案例">第14章 数据分析案例</a><br>附录A NumPy高级应用<br> <a href="../《利用Python进行数据分析·第2版》附录B%20更多关于IPython的内容（完）">附录B 更多关于IPython的内容（完）</a>      </p><a id="more"></a><hr><p>在这篇附录中，我会深入NumPy库的数组计算。这会包括ndarray更内部的细节，和更高级的数组操作和算法。</p><p>本章包括了一些杂乱的章节，不需要仔细研究。</p><h1 id="A-1-ndarray对象的内部机理"><a href="#A-1-ndarray对象的内部机理" class="headerlink" title="A.1 ndarray对象的内部机理"></a>A.1 ndarray对象的内部机理</h1><p>NumPy的ndarray提供了一种将同质数据块（可以是连续或跨越）解释为多维数组对象的方式。正如你之前所看到的那样，数据类型（dtype）决定了数据的解释方式，比如浮点数、整数、布尔值等。</p><p>ndarray如此强大的部分原因是所有数组对象都是数据块的一个跨度视图（strided view）。你可能想知道数组视图arr[::2,::-1]不复制任何数据的原因是什么。简单地说，ndarray不只是一块内存和一个dtype，它还有跨度信息，这使得数组能以各种步幅（step size）在内存中移动。更准确地讲，ndarray内部由以下内容组成：</p><ul><li>一个指向数据（内存或内存映射文件中的一块数据）的指针。</li><li>数据类型或dtype，描述在数组中的固定大小值的格子。</li><li>一个表示数组形状（shape）的元组。</li><li>一个跨度元组（stride），其中的整数指的是为了前进到当前维度下一个元素需要“跨过”的字节数。</li></ul><p>图A-1简单地说明了ndarray的内部结构。</p><p><img src="/images/blog/7178691-43452f2f413e5094.webp" alt="img"></p><p>图A-1 Numpy的ndarray对象</p><p>例如，一个10×5的数组，其形状为(10,5)：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">10</span>]: np.ones((<span class="hljs-number">10</span>, <span class="hljs-number">5</span>)).shape</span><br><span class="line">Out[<span class="hljs-number">10</span>]: (<span class="hljs-number">10</span>, <span class="hljs-number">5</span>)</span><br></pre></td></tr></table></figure><p>一个典型的（C顺序，稍后将详细讲解）3×4×5的float64（8个字节）数组，其跨度为(160,40,8) —— 知道跨度是非常有用的，通常，跨度在一个轴上越大，沿这个轴进行计算的开销就越大：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">11</span>]: np.ones((<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>), dtype=np.float64).strides</span><br><span class="line">Out[<span class="hljs-number">11</span>]: (<span class="hljs-number">160</span>, <span class="hljs-number">40</span>, <span class="hljs-number">8</span>)</span><br></pre></td></tr></table></figure><p>虽然NumPy用户很少会对数组的跨度信息感兴趣，但它们却是构建非复制式数组视图的重要因素。跨度甚至可以是负数，这样会使数组在内存中后向移动，比如在切片obj[::-1]或obj[:,::-1]中就是这样的。</p><h2 id="NumPy数据类型体系"><a href="#NumPy数据类型体系" class="headerlink" title="NumPy数据类型体系"></a>NumPy数据类型体系</h2><p>你可能偶尔需要检查数组中所包含的是否是整数、浮点数、字符串或Python对象。因为浮点数的种类很多（从float16到float128），判断dtype是否属于某个大类的工作非常繁琐。幸运的是，dtype都有一个超类（比如np.integer和np.floating），它们可以跟np.issubdtype函数结合使用：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">12</span>]: ints = np.ones(<span class="hljs-number">10</span>, dtype=np.uint16)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">13</span>]: floats = np.ones(<span class="hljs-number">10</span>, dtype=np.float32)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">14</span>]: np.issubdtype(ints.dtype, np.integer)</span><br><span class="line">Out[<span class="hljs-number">14</span>]: <span class="hljs-literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">15</span>]: np.issubdtype(floats.dtype, np.floating)</span><br><span class="line">Out[<span class="hljs-number">15</span>]: <span class="hljs-literal">True</span></span><br></pre></td></tr></table></figure><p>调用dtype的mro方法即可查看其所有的父类：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">16</span>]: np.float64.mro()</span><br><span class="line">Out[<span class="hljs-number">16</span>]:</span><br><span class="line">[numpy.float64,</span><br><span class="line"> numpy.floating,</span><br><span class="line"> numpy.inexact,</span><br><span class="line"> numpy.number,</span><br><span class="line"> numpy.generic,</span><br><span class="line"> float,</span><br><span class="line"> object]</span><br></pre></td></tr></table></figure><p>然后得到：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">17</span>]: np.issubdtype(ints.dtype, np.number)</span><br><span class="line">Out[<span class="hljs-number">17</span>]: <span class="hljs-literal">True</span></span><br></pre></td></tr></table></figure><p>大部分NumPy用户完全不需要了解这些知识，但是这些知识偶尔还是能派上用场的。图A-2说明了dtype体系以及父子类关系。</p><p><img src="/images/blog/7178691-b8996bf943a06ab9.webp" alt="img"></p><p>图A-2 NumPy的dtype体系</p><h1 id="A-2-高级数组操作"><a href="#A-2-高级数组操作" class="headerlink" title="A.2 高级数组操作"></a>A.2 高级数组操作</h1><p>除花式索引、切片、布尔条件取子集等操作之外，数组的操作方式还有很多。虽然pandas中的高级函数可以处理数据分析工作中的许多重型任务，但有时你还是需要编写一些在现有库中找不到的数据算法。</p><h2 id="数组重塑"><a href="#数组重塑" class="headerlink" title="数组重塑"></a>数组重塑</h2><p>多数情况下，你可以无需复制任何数据，就将数组从一个形状转换为另一个形状。只需向数组的实例方法reshape传入一个表示新形状的元组即可实现该目的。例如，假设有一个一维数组，我们希望将其重新排列为一个矩阵（结果见图A-3）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">18</span>]: arr = np.arange(<span class="hljs-number">8</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">19</span>]: arr</span><br><span class="line">Out[<span class="hljs-number">19</span>]: array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">20</span>]: arr.reshape((<span class="hljs-number">4</span>, <span class="hljs-number">2</span>))</span><br><span class="line">Out[<span class="hljs-number">20</span>]: </span><br><span class="line">array([[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>],</span><br><span class="line">       [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>],</span><br><span class="line">       [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>],</span><br><span class="line">       [<span class="hljs-number">6</span>, <span class="hljs-number">7</span>]])</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-95bbca6d8d04e4c7.webp" alt="img"></p><p>图A-3 按C顺序（按行）和按Fortran顺序（按列）进行重塑</p><p>多维数组也能被重塑：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">21</span>]: arr.reshape((<span class="hljs-number">4</span>, <span class="hljs-number">2</span>)).reshape((<span class="hljs-number">2</span>, <span class="hljs-number">4</span>))</span><br><span class="line">Out[<span class="hljs-number">21</span>]: </span><br><span class="line">array([[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],</span><br><span class="line">       [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]])</span><br></pre></td></tr></table></figure><p>作为参数的形状的其中一维可以是－1，它表示该维度的大小由数据本身推断而来：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">22</span>]: arr = np.arange(<span class="hljs-number">15</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">23</span>]: arr.reshape((<span class="hljs-number">5</span>, <span class="hljs-number">-1</span>))</span><br><span class="line">Out[<span class="hljs-number">23</span>]: </span><br><span class="line">array([[ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>],</span><br><span class="line">       [ <span class="hljs-number">3</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>],</span><br><span class="line">       [ <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">8</span>],</span><br><span class="line">       [ <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>],</span><br><span class="line">       [<span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>]])</span><br></pre></td></tr></table></figure><p>与reshape将一维数组转换为多维数组的运算过程相反的运算通常称为扁平化（flattening）或散开（raveling）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">27</span>]: arr = np.arange(<span class="hljs-number">15</span>).reshape((<span class="hljs-number">5</span>, <span class="hljs-number">3</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">28</span>]: arr</span><br><span class="line">Out[<span class="hljs-number">28</span>]: </span><br><span class="line">array([[ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>],</span><br><span class="line">       [ <span class="hljs-number">3</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>],</span><br><span class="line">       [ <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">8</span>],</span><br><span class="line">       [ <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>],</span><br><span class="line">       [<span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">29</span>]: arr.ravel()</span><br><span class="line">Out[<span class="hljs-number">29</span>]: array([ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>])</span><br></pre></td></tr></table></figure><p>如果结果中的值与原始数组相同，ravel不会产生源数据的副本。flatten方法的行为类似于ravel，只不过它总是返回数据的副本：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">30</span>]: arr.flatten()</span><br><span class="line">Out[<span class="hljs-number">30</span>]: array([ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>])</span><br></pre></td></tr></table></figure><p>数组可以被重塑或散开为别的顺序。这对NumPy新手来说是一个比较微妙的问题，所以在下一小节中我们将专门讲解这个问题。</p><h2 id="C和Fortran顺序"><a href="#C和Fortran顺序" class="headerlink" title="C和Fortran顺序"></a>C和Fortran顺序</h2><p>NumPy允许你更为灵活地控制数据在内存中的布局。默认情况下，NumPy数组是按行优先顺序创建的。在空间方面，这就意味着，对于一个二维数组，每行中的数据项是被存放在相邻内存位置上的。另一种顺序是列优先顺序，它意味着每列中的数据项是被存放在相邻内存位置上的。</p><p>由于一些历史原因，行和列优先顺序又分别称为C和Fortran顺序。在FORTRAN 77中，矩阵全都是列优先的。</p><p>像reshape和reval这样的函数，都可以接受一个表示数组数据存放顺序的order参数。一般可以是’C’或’F’（还有’A’和’K’等不常用的选项，具体请参考NumPy的文档）。图A-3对此进行了说明：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">31</span>]: arr = np.arange(<span class="hljs-number">12</span>).reshape((<span class="hljs-number">3</span>, <span class="hljs-number">4</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">32</span>]: arr</span><br><span class="line">Out[<span class="hljs-number">32</span>]: </span><br><span class="line">array([[ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>],</span><br><span class="line">       [ <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>],</span><br><span class="line">       [ <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">33</span>]: arr.ravel()</span><br><span class="line">Out[<span class="hljs-number">33</span>]: array([ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">34</span>]: arr.ravel(<span class="hljs-string">'F'</span>)</span><br><span class="line">Out[<span class="hljs-number">34</span>]: array([ <span class="hljs-number">0</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">6</span>, <span class="hljs-number">10</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">7</span>, <span class="hljs-number">11</span>])</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-f486e7c41d7e0eec.webp" alt="img"></p><p>图A-3 按C（行优先）或Fortran（列优先）顺序进行重塑</p><p>二维或更高维数组的重塑过程比较令人费解（见图A-3）。C和Fortran顺序的关键区别就是维度的行进顺序：</p><ul><li>C/行优先顺序：先经过更高的维度（例如，轴1会先于轴0被处理）。</li><li>Fortran/列优先顺序：后经过更高的维度（例如，轴0会先于轴1被处理）。</li></ul><h2 id="数组的合并和拆分"><a href="#数组的合并和拆分" class="headerlink" title="数组的合并和拆分"></a>数组的合并和拆分</h2><p>numpy.concatenate可以按指定轴将一个由数组组成的序列（如元组、列表等）连接到一起：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">35</span>]: arr1 = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">36</span>]: arr2 = np.array([[<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>], [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">37</span>]: np.concatenate([arr1, arr2], axis=<span class="hljs-number">0</span>)</span><br><span class="line">Out[<span class="hljs-number">37</span>]: </span><br><span class="line">array([[ <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>],</span><br><span class="line">       [ <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>],</span><br><span class="line">       [ <span class="hljs-number">7</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>],</span><br><span class="line">       [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">38</span>]: np.concatenate([arr1, arr2], axis=<span class="hljs-number">1</span>)</span><br><span class="line">Out[<span class="hljs-number">38</span>]: </span><br><span class="line">array([[ <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>],</span><br><span class="line">       [ <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]])</span><br></pre></td></tr></table></figure><p>对于常见的连接操作，NumPy提供了一些比较方便的方法（如vstack和hstack）。因此，上面的运算还可以表达为：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">39</span>]: np.vstack((arr1, arr2))</span><br><span class="line">Out[<span class="hljs-number">39</span>]: </span><br><span class="line">array([[ <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>],</span><br><span class="line">       [ <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>],</span><br><span class="line">       [ <span class="hljs-number">7</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>],</span><br><span class="line">       [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">40</span>]: np.hstack((arr1, arr2))</span><br><span class="line">Out[<span class="hljs-number">40</span>]: </span><br><span class="line">array([[ <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>],</span><br><span class="line">[ <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]])</span><br></pre></td></tr></table></figure><p>与此相反，split用于将一个数组沿指定轴拆分为多个数组：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">41</span>]: arr = np.random.randn(<span class="hljs-number">5</span>, <span class="hljs-number">2</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">42</span>]: arr</span><br><span class="line">Out[<span class="hljs-number">42</span>]: </span><br><span class="line">array([[<span class="hljs-number">-0.2047</span>,  <span class="hljs-number">0.4789</span>],</span><br><span class="line">       [<span class="hljs-number">-0.5194</span>, <span class="hljs-number">-0.5557</span>],</span><br><span class="line">       [ <span class="hljs-number">1.9658</span>,  <span class="hljs-number">1.3934</span>],</span><br><span class="line">       [ <span class="hljs-number">0.0929</span>,  <span class="hljs-number">0.2817</span>],</span><br><span class="line">       [ <span class="hljs-number">0.769</span> ,  <span class="hljs-number">1.2464</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">43</span>]: first, second, third = np.split(arr, [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">44</span>]: first</span><br><span class="line">Out[<span class="hljs-number">44</span>]: array([[<span class="hljs-number">-0.2047</span>,  <span class="hljs-number">0.4789</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">45</span>]: second</span><br><span class="line">Out[<span class="hljs-number">45</span>]: </span><br><span class="line">array([[<span class="hljs-number">-0.5194</span>, <span class="hljs-number">-0.5557</span>],</span><br><span class="line">       [ <span class="hljs-number">1.9658</span>,  <span class="hljs-number">1.3934</span>]])</span><br><span class="line">In [<span class="hljs-number">46</span>]: third</span><br><span class="line">Out[<span class="hljs-number">46</span>]: </span><br><span class="line">array([[ <span class="hljs-number">0.0929</span>,  <span class="hljs-number">0.2817</span>],</span><br><span class="line">       [ <span class="hljs-number">0.769</span> ,  <span class="hljs-number">1.2464</span>]])</span><br></pre></td></tr></table></figure><p>传入到np.split的值[1,3]指示在哪个索引处分割数组。</p><p>表A-1中列出了所有关于数组连接和拆分的函数，其中有些是专门为了方便常见的连接运算而提供的。</p><p><img src="/images/blog/7178691-c597246722a6bb01.webp" alt="img"></p><p>表A-1 数组连接函数</p><h2 id="堆叠辅助类：r-和c"><a href="#堆叠辅助类：r-和c" class="headerlink" title="堆叠辅助类：r_和c_"></a>堆叠辅助类：r_和c_</h2><p>NumPy命名空间中有两个特殊的对象——r_和c_，它们可以使数组的堆叠操作更为简洁：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">47</span>]: arr = np.arange(<span class="hljs-number">6</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">48</span>]: arr1 = arr.reshape((<span class="hljs-number">3</span>, <span class="hljs-number">2</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">49</span>]: arr2 = np.random.randn(<span class="hljs-number">3</span>, <span class="hljs-number">2</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">50</span>]: np.r_[arr1, arr2]</span><br><span class="line">Out[<span class="hljs-number">50</span>]: </span><br><span class="line">array([[ <span class="hljs-number">0.</span>    ,  <span class="hljs-number">1.</span>    ],</span><br><span class="line">       [ <span class="hljs-number">2.</span>    ,  <span class="hljs-number">3.</span>    ],</span><br><span class="line">       [ <span class="hljs-number">4.</span>    ,  <span class="hljs-number">5.</span>    ],</span><br><span class="line">       [ <span class="hljs-number">1.0072</span>, <span class="hljs-number">-1.2962</span>],</span><br><span class="line">       [ <span class="hljs-number">0.275</span> ,  <span class="hljs-number">0.2289</span>],</span><br><span class="line">       [ <span class="hljs-number">1.3529</span>,  <span class="hljs-number">0.8864</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">51</span>]: np.c_[np.r_[arr1, arr2], arr]</span><br><span class="line">Out[<span class="hljs-number">51</span>]: </span><br><span class="line">array([[ <span class="hljs-number">0.</span>    ,  <span class="hljs-number">1.</span>    ,  <span class="hljs-number">0.</span>    ],</span><br><span class="line">       [ <span class="hljs-number">2.</span>    ,  <span class="hljs-number">3.</span>    ,  <span class="hljs-number">1.</span>    ],</span><br><span class="line">       [ <span class="hljs-number">4.</span>    ,  <span class="hljs-number">5.</span>    ,  <span class="hljs-number">2.</span>    ],</span><br><span class="line">       [ <span class="hljs-number">1.0072</span>, <span class="hljs-number">-1.2962</span>,  <span class="hljs-number">3.</span>    ],</span><br><span class="line">       [ <span class="hljs-number">0.275</span> ,  <span class="hljs-number">0.2289</span>,  <span class="hljs-number">4.</span>    ],</span><br><span class="line">       [ <span class="hljs-number">1.3529</span>,  <span class="hljs-number">0.8864</span>,  <span class="hljs-number">5.</span>    ]])</span><br></pre></td></tr></table></figure><p>它还可以将切片转换成数组：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">52</span>]: np.c_[<span class="hljs-number">1</span>:<span class="hljs-number">6</span>, <span class="hljs-number">-10</span>:<span class="hljs-number">-5</span>]</span><br><span class="line">Out[<span class="hljs-number">52</span>]: </span><br><span class="line">array([[  <span class="hljs-number">1</span>, <span class="hljs-number">-10</span>],</span><br><span class="line">       [  <span class="hljs-number">2</span>,  <span class="hljs-number">-9</span>],</span><br><span class="line">       [  <span class="hljs-number">3</span>,  <span class="hljs-number">-8</span>],</span><br><span class="line">       [  <span class="hljs-number">4</span>,  <span class="hljs-number">-7</span>],</span><br><span class="line">       [  <span class="hljs-number">5</span>,  <span class="hljs-number">-6</span>]])</span><br></pre></td></tr></table></figure><p>r_和c_的具体功能请参考其文档。</p><h2 id="元素的重复操作：tile和repeat"><a href="#元素的重复操作：tile和repeat" class="headerlink" title="元素的重复操作：tile和repeat"></a>元素的重复操作：tile和repeat</h2><p>对数组进行重复以产生更大数组的工具主要是repeat和tile这两个函数。repeat会将数组中的各个元素重复一定次数，从而产生一个更大的数组：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">53</span>]: arr = np.arange(<span class="hljs-number">3</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">54</span>]: arr</span><br><span class="line">Out[<span class="hljs-number">54</span>]: array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">55</span>]: arr.repeat(<span class="hljs-number">3</span>)</span><br><span class="line">Out[<span class="hljs-number">55</span>]: array([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>])</span><br></pre></td></tr></table></figure><blockquote><p>笔记：跟其他流行的数组编程语言（如MATLAB）不同，NumPy中很少需要对数组进行重复（replicate）。这主要是因为广播（broadcasting，我们将在下一节中讲解该技术）能更好地满足该需求。</p></blockquote><p>默认情况下，如果传入的是一个整数，则各元素就都会重复那么多次。如果传入的是一组整数，则各元素就可以重复不同的次数：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">56</span>]: arr.repeat([<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])</span><br><span class="line">Out[<span class="hljs-number">56</span>]: array([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>])</span><br></pre></td></tr></table></figure><p>对于多维数组，还可以让它们的元素沿指定轴重复：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">57</span>]: arr = np.random.randn(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">58</span>]: arr</span><br><span class="line">Out[<span class="hljs-number">58</span>]: </span><br><span class="line">array([[<span class="hljs-number">-2.0016</span>, <span class="hljs-number">-0.3718</span>],</span><br><span class="line">       [ <span class="hljs-number">1.669</span> , <span class="hljs-number">-0.4386</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">59</span>]: arr.repeat(<span class="hljs-number">2</span>, axis=<span class="hljs-number">0</span>)</span><br><span class="line">Out[<span class="hljs-number">59</span>]: </span><br><span class="line">array([[<span class="hljs-number">-2.0016</span>, <span class="hljs-number">-0.3718</span>],</span><br><span class="line">       [<span class="hljs-number">-2.0016</span>, <span class="hljs-number">-0.3718</span>],</span><br><span class="line">       [ <span class="hljs-number">1.669</span> , <span class="hljs-number">-0.4386</span>],</span><br><span class="line">       [ <span class="hljs-number">1.669</span> , <span class="hljs-number">-0.4386</span>]])</span><br></pre></td></tr></table></figure><p>注意，如果没有设置轴向，则数组会被扁平化，这可能不会是你想要的结果。同样，在对多维进行重复时，也可以传入一组整数，这样就会使各切片重复不同的次数：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">60</span>]: arr.repeat([<span class="hljs-number">2</span>, <span class="hljs-number">3</span>], axis=<span class="hljs-number">0</span>)</span><br><span class="line">Out[<span class="hljs-number">60</span>]: </span><br><span class="line">array([[<span class="hljs-number">-2.0016</span>, <span class="hljs-number">-0.3718</span>],</span><br><span class="line">       [<span class="hljs-number">-2.0016</span>, <span class="hljs-number">-0.3718</span>],</span><br><span class="line">       [ <span class="hljs-number">1.669</span> , <span class="hljs-number">-0.4386</span>],</span><br><span class="line">       [ <span class="hljs-number">1.669</span> , <span class="hljs-number">-0.4386</span>],</span><br><span class="line">       [ <span class="hljs-number">1.669</span> , <span class="hljs-number">-0.4386</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">61</span>]: arr.repeat([<span class="hljs-number">2</span>, <span class="hljs-number">3</span>], axis=<span class="hljs-number">1</span>)</span><br><span class="line">Out[<span class="hljs-number">61</span>]: </span><br><span class="line">array([[<span class="hljs-number">-2.0016</span>, <span class="hljs-number">-2.0016</span>, <span class="hljs-number">-0.3718</span>, <span class="hljs-number">-0.3718</span>, <span class="hljs-number">-0.3718</span>],</span><br><span class="line">       [ <span class="hljs-number">1.669</span> ,  <span class="hljs-number">1.669</span> , <span class="hljs-number">-0.4386</span>, <span class="hljs-number">-0.4386</span>, <span class="hljs-number">-0.4386</span>]])</span><br></pre></td></tr></table></figure><p>tile的功能是沿指定轴向堆叠数组的副本。你可以形象地将其想象成“铺瓷砖”：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">62</span>]: arr</span><br><span class="line">Out[<span class="hljs-number">62</span>]: </span><br><span class="line">array([[<span class="hljs-number">-2.0016</span>, <span class="hljs-number">-0.3718</span>],</span><br><span class="line">       [ <span class="hljs-number">1.669</span> , <span class="hljs-number">-0.4386</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">63</span>]: np.tile(arr, <span class="hljs-number">2</span>)</span><br><span class="line">Out[<span class="hljs-number">63</span>]: </span><br><span class="line">array([[<span class="hljs-number">-2.0016</span>, <span class="hljs-number">-0.3718</span>, <span class="hljs-number">-2.0016</span>, <span class="hljs-number">-0.3718</span>],</span><br><span class="line">       [ <span class="hljs-number">1.669</span> , <span class="hljs-number">-0.4386</span>,  <span class="hljs-number">1.669</span> , <span class="hljs-number">-0.4386</span>]])</span><br></pre></td></tr></table></figure><p>第二个参数是瓷砖的数量。对于标量，瓷砖是水平铺设的，而不是垂直铺设。它可以是一个表示“铺设”布局的元组：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">64</span>]: arr</span><br><span class="line">Out[<span class="hljs-number">64</span>]: </span><br><span class="line">array([[<span class="hljs-number">-2.0016</span>, <span class="hljs-number">-0.3718</span>],</span><br><span class="line">       [ <span class="hljs-number">1.669</span> , <span class="hljs-number">-0.4386</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">65</span>]: np.tile(arr, (<span class="hljs-number">2</span>, <span class="hljs-number">1</span>))</span><br><span class="line">Out[<span class="hljs-number">65</span>]: </span><br><span class="line">array([[<span class="hljs-number">-2.0016</span>, <span class="hljs-number">-0.3718</span>],</span><br><span class="line">       [ <span class="hljs-number">1.669</span> , <span class="hljs-number">-0.4386</span>],</span><br><span class="line">       [<span class="hljs-number">-2.0016</span>, <span class="hljs-number">-0.3718</span>],</span><br><span class="line">       [ <span class="hljs-number">1.669</span> , <span class="hljs-number">-0.4386</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">66</span>]: np.tile(arr, (<span class="hljs-number">3</span>, <span class="hljs-number">2</span>))</span><br><span class="line">Out[<span class="hljs-number">66</span>]: </span><br><span class="line">array([[<span class="hljs-number">-2.0016</span>, <span class="hljs-number">-0.3718</span>, <span class="hljs-number">-2.0016</span>, <span class="hljs-number">-0.3718</span>],</span><br><span class="line">       [ <span class="hljs-number">1.669</span> , <span class="hljs-number">-0.4386</span>,  <span class="hljs-number">1.669</span> , <span class="hljs-number">-0.4386</span>],</span><br><span class="line">       [<span class="hljs-number">-2.0016</span>, <span class="hljs-number">-0.3718</span>, <span class="hljs-number">-2.0016</span>, <span class="hljs-number">-0.3718</span>],</span><br><span class="line">       [ <span class="hljs-number">1.669</span> , <span class="hljs-number">-0.4386</span>,  <span class="hljs-number">1.669</span> , <span class="hljs-number">-0.4386</span>],</span><br><span class="line">       [<span class="hljs-number">-2.0016</span>, <span class="hljs-number">-0.3718</span>, <span class="hljs-number">-2.0016</span>, <span class="hljs-number">-0.3718</span>],</span><br><span class="line">       [ <span class="hljs-number">1.669</span> , <span class="hljs-number">-0.4386</span>,  <span class="hljs-number">1.669</span> , <span class="hljs-number">-0.4386</span>]])</span><br></pre></td></tr></table></figure><h2 id="花式索引的等价函数：take和put"><a href="#花式索引的等价函数：take和put" class="headerlink" title="花式索引的等价函数：take和put"></a>花式索引的等价函数：take和put</h2><p>在第4章中我们讲过，获取和设置数组子集的一个办法是通过整数数组使用花式索引：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">67</span>]: arr = np.arange(<span class="hljs-number">10</span>) * <span class="hljs-number">100</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">68</span>]: inds = [<span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">69</span>]: arr[inds]</span><br><span class="line">Out[<span class="hljs-number">69</span>]: array([<span class="hljs-number">700</span>, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">600</span>])</span><br></pre></td></tr></table></figure><p>ndarray还有其它方法用于获取单个轴向上的选区：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">70</span>]: arr.take(inds)</span><br><span class="line">Out[<span class="hljs-number">70</span>]: array([<span class="hljs-number">700</span>, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">600</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">71</span>]: arr.put(inds, <span class="hljs-number">42</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">72</span>]: arr</span><br><span class="line">Out[<span class="hljs-number">72</span>]: array([  <span class="hljs-number">0</span>,  <span class="hljs-number">42</span>,  <span class="hljs-number">42</span>, <span class="hljs-number">300</span>, <span class="hljs-number">400</span>, <span class="hljs-number">500</span>,  <span class="hljs-number">42</span>,  <span class="hljs-number">42</span>,<span class="hljs-number">800</span>, <span class="hljs-number">900</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">73</span>]: arr.put(inds, [<span class="hljs-number">40</span>, <span class="hljs-number">41</span>, <span class="hljs-number">42</span>, <span class="hljs-number">43</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">74</span>]: arr</span><br><span class="line">Out[<span class="hljs-number">74</span>]: array([  <span class="hljs-number">0</span>,  <span class="hljs-number">41</span>,  <span class="hljs-number">42</span>, <span class="hljs-number">300</span>, <span class="hljs-number">400</span>, <span class="hljs-number">500</span>,  <span class="hljs-number">43</span>,  <span class="hljs-number">40</span>, <span class="hljs-number">800</span>, <span class="hljs-number">900</span>])</span><br></pre></td></tr></table></figure><p>要在其它轴上使用take，只需传入axis关键字即可：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">75</span>]: inds = [<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">76</span>]: arr = np.random.randn(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">77</span>]: arr</span><br><span class="line">Out[<span class="hljs-number">77</span>]: </span><br><span class="line">array([[<span class="hljs-number">-0.5397</span>,  <span class="hljs-number">0.477</span> ,  <span class="hljs-number">3.2489</span>, <span class="hljs-number">-1.0212</span>],</span><br><span class="line">       [<span class="hljs-number">-0.5771</span>,  <span class="hljs-number">0.1241</span>,  <span class="hljs-number">0.3026</span>,  <span class="hljs-number">0.5238</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">78</span>]: arr.take(inds, axis=<span class="hljs-number">1</span>)</span><br><span class="line">Out[<span class="hljs-number">78</span>]: </span><br><span class="line">array([[ <span class="hljs-number">3.2489</span>, <span class="hljs-number">-0.5397</span>,  <span class="hljs-number">3.2489</span>,  <span class="hljs-number">0.477</span> ],</span><br><span class="line">       [ <span class="hljs-number">0.3026</span>, <span class="hljs-number">-0.5771</span>,  <span class="hljs-number">0.3026</span>,  <span class="hljs-number">0.1241</span>]])</span><br></pre></td></tr></table></figure><p>put不接受axis参数，它只会在数组的扁平化版本（一维，C顺序）上进行索引。因此，在需要用其他轴向的索引设置元素时，最好还是使用花式索引。</p><h1 id="A-3-广播"><a href="#A-3-广播" class="headerlink" title="A.3 广播"></a>A.3 广播</h1><p>广播（broadcasting）指的是不同形状的数组之间的算术运算的执行方式。它是一种非常强大的功能，但也容易令人误解，即使是经验丰富的老手也是如此。将标量值跟数组合并时就会发生最简单的广播：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">79</span>]: arr = np.arange(<span class="hljs-number">5</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">80</span>]: arr</span><br><span class="line">Out[<span class="hljs-number">80</span>]: array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">81</span>]: arr * <span class="hljs-number">4</span></span><br><span class="line">Out[<span class="hljs-number">81</span>]: array([ <span class="hljs-number">0</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">8</span>, <span class="hljs-number">12</span>, <span class="hljs-number">16</span>])</span><br></pre></td></tr></table></figure><p>这里我们说：在这个乘法运算中，标量值4被广播到了其他所有的元素上。</p><p>看一个例子，我们可以通过减去列平均值的方式对数组的每一列进行距平化处理。这个问题解决起来非常简单：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">82</span>]: arr = np.random.randn(<span class="hljs-number">4</span>, <span class="hljs-number">3</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">83</span>]: arr.mean(<span class="hljs-number">0</span>)</span><br><span class="line">Out[<span class="hljs-number">83</span>]: array([<span class="hljs-number">-0.3928</span>, <span class="hljs-number">-0.3824</span>, <span class="hljs-number">-0.8768</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">84</span>]: demeaned = arr - arr.mean(<span class="hljs-number">0</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">85</span>]: demeaned</span><br><span class="line">Out[<span class="hljs-number">85</span>]: </span><br><span class="line">array([[ <span class="hljs-number">0.3937</span>,  <span class="hljs-number">1.7263</span>,  <span class="hljs-number">0.1633</span>],</span><br><span class="line">       [<span class="hljs-number">-0.4384</span>, <span class="hljs-number">-1.9878</span>, <span class="hljs-number">-0.9839</span>],</span><br><span class="line">       [<span class="hljs-number">-0.468</span> ,  <span class="hljs-number">0.9426</span>, <span class="hljs-number">-0.3891</span>],</span><br><span class="line">       [ <span class="hljs-number">0.5126</span>, <span class="hljs-number">-0.6811</span>,  <span class="hljs-number">1.2097</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">86</span>]: demeaned.mean(<span class="hljs-number">0</span>)</span><br><span class="line">Out[<span class="hljs-number">86</span>]: array([<span class="hljs-number">-0.</span>,  <span class="hljs-number">0.</span>, <span class="hljs-number">-0.</span>])</span><br></pre></td></tr></table></figure><p>图A-4形象地展示了该过程。用广播的方式对行进行距平化处理会稍微麻烦一些。幸运的是，只要遵循一定的规则，低维度的值是可以被广播到数组的任意维度的（比如对二维数组各列减去行平均值）。</p><p><img src="/images/blog/7178691-6aaf022ab88452a9.webp" alt="img"></p><p>图A-4 一维数组在轴0上的广播</p><p>于是就得到了：</p><p><img src="/images/blog/7178691-fcaba8455960862a.webp" alt="img"></p><p>虽然我是一名经验丰富的NumPy老手，但经常还是得停下来画张图并想想广播的原则。再来看一下最后那个例子，假设你希望对各行减去那个平均值。由于arr.mean(0)的长度为3，所以它可以在0轴向上进行广播：因为arr的后缘维度是3，所以它们是兼容的。根据该原则，要在1轴向上做减法（即各行减去行平均值），较小的那个数组的形状必须是(4,1)：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">87</span>]: arr</span><br><span class="line">Out[<span class="hljs-number">87</span>]: </span><br><span class="line">array([[ <span class="hljs-number">0.0009</span>,  <span class="hljs-number">1.3438</span>, <span class="hljs-number">-0.7135</span>],</span><br><span class="line">       [<span class="hljs-number">-0.8312</span>, <span class="hljs-number">-2.3702</span>, <span class="hljs-number">-1.8608</span>],</span><br><span class="line">       [<span class="hljs-number">-0.8608</span>,  <span class="hljs-number">0.5601</span>, <span class="hljs-number">-1.2659</span>],</span><br><span class="line">       [ <span class="hljs-number">0.1198</span>, <span class="hljs-number">-1.0635</span>,  <span class="hljs-number">0.3329</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">88</span>]: row_means = arr.mean(<span class="hljs-number">1</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">89</span>]: row_means.shape</span><br><span class="line">Out[<span class="hljs-number">89</span>]: (<span class="hljs-number">4</span>,)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">90</span>]: row_means.reshape((<span class="hljs-number">4</span>, <span class="hljs-number">1</span>))</span><br><span class="line">Out[<span class="hljs-number">90</span>]: </span><br><span class="line">array([[ <span class="hljs-number">0.2104</span>],</span><br><span class="line">       [<span class="hljs-number">-1.6874</span>],</span><br><span class="line">       [<span class="hljs-number">-0.5222</span>],</span><br><span class="line">       [<span class="hljs-number">-0.2036</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">91</span>]: demeaned = arr - row_means.reshape((<span class="hljs-number">4</span>, <span class="hljs-number">1</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">92</span>]: demeaned.mean(<span class="hljs-number">1</span>)</span><br><span class="line">Out[<span class="hljs-number">92</span>]: array([ <span class="hljs-number">0.</span>, <span class="hljs-number">-0.</span>,  <span class="hljs-number">0.</span>,  <span class="hljs-number">0.</span>])</span><br></pre></td></tr></table></figure><p>图A-5说明了该运算的过程。</p><p><img src="/images/blog/7178691-9b0310d6773c3d38.webp" alt="img"></p><p>图A-5 二维数组在轴1上的广播</p><p>图A-6展示了另外一种情况，这次是在一个三维数组上沿0轴向加上一个二维数组。</p><p><img src="/images/blog/7178691-965eb28b60046cd9.webp" alt="img"></p><p>图A-6 三维数组在轴0上的广播</p><h2 id="沿其它轴向广播"><a href="#沿其它轴向广播" class="headerlink" title="沿其它轴向广播"></a>沿其它轴向广播</h2><p>高维度数组的广播似乎更难以理解，而实际上它也是遵循广播原则的。如果不然，你就会得到下面这样一个错误：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">93</span>]: arr - arr.mean(<span class="hljs-number">1</span>)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">ValueError                                Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="hljs-number">-93</span><span class="hljs-number">-7</span>b87b85a20b2&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 arr - arr.mean(1)</span><br><span class="line">ValueError: operands could <span class="hljs-keyword">not</span> be broadcast together <span class="hljs-keyword">with</span> shapes (<span class="hljs-number">4</span>,<span class="hljs-number">3</span>) (<span class="hljs-number">4</span>,)</span><br></pre></td></tr></table></figure><p>人们经常需要通过算术运算过程将较低维度的数组在除0轴以外的其他轴向上广播。根据广播的原则，较小数组的“广播维”必须为1。在上面那个行距平化的例子中，这就意味着要将行平均值的形状变成(4,1)而不是(4,)：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">94</span>]: arr - arr.mean(<span class="hljs-number">1</span>).reshape((<span class="hljs-number">4</span>, <span class="hljs-number">1</span>))</span><br><span class="line">Out[<span class="hljs-number">94</span>]: </span><br><span class="line">array([[<span class="hljs-number">-0.2095</span>,  <span class="hljs-number">1.1334</span>, <span class="hljs-number">-0.9239</span>],</span><br><span class="line">       [ <span class="hljs-number">0.8562</span>, <span class="hljs-number">-0.6828</span>, <span class="hljs-number">-0.1734</span>],</span><br><span class="line">       [<span class="hljs-number">-0.3386</span>,  <span class="hljs-number">1.0823</span>, <span class="hljs-number">-0.7438</span>],</span><br><span class="line">       [ <span class="hljs-number">0.3234</span>, <span class="hljs-number">-0.8599</span>,  <span class="hljs-number">0.5365</span>]])</span><br></pre></td></tr></table></figure><p>对于三维的情况，在三维中的任何一维上广播其实也就是将数据重塑为兼容的形状而已。图A-7说明了要在三维数组各维度上广播的形状需求。</p><p><img src="/images/blog/7178691-b40936aab8e757d0.webp" alt="img"></p><p>图A-7：能在该三维数组上广播的二维数组的形状</p><p>于是就有了一个非常普遍的问题（尤其是在通用算法中），即专门为了广播而添加一个长度为1的新轴。虽然reshape是一个办法，但插入轴需要构造一个表示新形状的元组。这是一个很郁闷的过程。因此，NumPy数组提供了一种通过索引机制插入轴的特殊语法。下面这段代码通过特殊的np.newaxis属性以及“全”切片来插入新轴：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">95</span>]: arr = np.zeros((<span class="hljs-number">4</span>, <span class="hljs-number">4</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">96</span>]: arr_3d = arr[:, np.newaxis, :]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">97</span>]: arr_3d.shape</span><br><span class="line">Out[<span class="hljs-number">97</span>]: (<span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">98</span>]: arr_1d = np.random.normal(size=<span class="hljs-number">3</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">99</span>]: arr_1d[:, np.newaxis]</span><br><span class="line">Out[<span class="hljs-number">99</span>]: </span><br><span class="line">array([[<span class="hljs-number">-2.3594</span>],</span><br><span class="line">       [<span class="hljs-number">-0.1995</span>],</span><br><span class="line">       [<span class="hljs-number">-1.542</span> ]])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">100</span>]: arr_1d[np.newaxis, :]</span><br><span class="line">Out[<span class="hljs-number">100</span>]: array([[<span class="hljs-number">-2.3594</span>, <span class="hljs-number">-0.1995</span>, <span class="hljs-number">-1.542</span> ]])</span><br></pre></td></tr></table></figure><p>因此，如果我们有一个三维数组，并希望对轴2进行距平化，那么只需要编写下面这样的代码就可以了：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">101</span>]: arr = np.random.randn(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">102</span>]: depth_means = arr.mean(<span class="hljs-number">2</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">103</span>]: depth_means</span><br><span class="line">Out[<span class="hljs-number">103</span>]: </span><br><span class="line">array([[<span class="hljs-number">-0.4735</span>,  <span class="hljs-number">0.3971</span>, <span class="hljs-number">-0.0228</span>,  <span class="hljs-number">0.2001</span>],</span><br><span class="line">       [<span class="hljs-number">-0.3521</span>, <span class="hljs-number">-0.281</span> , <span class="hljs-number">-0.071</span> , <span class="hljs-number">-0.1586</span>],</span><br><span class="line">       [ <span class="hljs-number">0.6245</span>,  <span class="hljs-number">0.6047</span>,  <span class="hljs-number">0.4396</span>, <span class="hljs-number">-0.2846</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">104</span>]: depth_means.shape</span><br><span class="line">Out[<span class="hljs-number">104</span>]: (<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">105</span>]: demeaned = arr - depth_means[:, :, np.newaxis]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">106</span>]: demeaned.mean(<span class="hljs-number">2</span>)</span><br><span class="line">Out[<span class="hljs-number">106</span>]: </span><br><span class="line">array([[ <span class="hljs-number">0.</span>,  <span class="hljs-number">0.</span>, <span class="hljs-number">-0.</span>, <span class="hljs-number">-0.</span>],</span><br><span class="line">       [ <span class="hljs-number">0.</span>,  <span class="hljs-number">0.</span>, <span class="hljs-number">-0.</span>,  <span class="hljs-number">0.</span>],</span><br><span class="line">       [ <span class="hljs-number">0.</span>,  <span class="hljs-number">0.</span>, <span class="hljs-number">-0.</span>, <span class="hljs-number">-0.</span>]])</span><br></pre></td></tr></table></figure><p>有些读者可能会想，在对指定轴进行距平化时，有没有一种既通用又不牺牲性能的方法呢？实际上是有的，但需要一些索引方面的技巧：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">demean_axis</span><span class="hljs-params">(arr, axis=<span class="hljs-number">0</span>)</span>:</span></span><br><span class="line">    means = arr.mean(axis)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment"># This generalizes things like [:, :, np.newaxis] to N dimensions</span></span><br><span class="line">    indexer = [slice(<span class="hljs-literal">None</span>)] * arr.ndim</span><br><span class="line">    indexer[axis] = np.newaxis</span><br><span class="line">    <span class="hljs-keyword">return</span> arr - means[indexer]</span><br></pre></td></tr></table></figure><h2 id="通过广播设置数组的值"><a href="#通过广播设置数组的值" class="headerlink" title="通过广播设置数组的值"></a>通过广播设置数组的值</h2><p>算术运算所遵循的广播原则同样也适用于通过索引机制设置数组值的操作。对于最简单的情况，我们可以这样做：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">107</span>]: arr = np.zeros((<span class="hljs-number">4</span>, <span class="hljs-number">3</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">108</span>]: arr[:] = <span class="hljs-number">5</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">109</span>]: arr</span><br><span class="line">Out[<span class="hljs-number">109</span>]: </span><br><span class="line">array([[ <span class="hljs-number">5.</span>,  <span class="hljs-number">5.</span>,  <span class="hljs-number">5.</span>],</span><br><span class="line">       [ <span class="hljs-number">5.</span>,  <span class="hljs-number">5.</span>,  <span class="hljs-number">5.</span>],</span><br><span class="line">       [ <span class="hljs-number">5.</span>,  <span class="hljs-number">5.</span>,  <span class="hljs-number">5.</span>],</span><br><span class="line">       [ <span class="hljs-number">5.</span>,  <span class="hljs-number">5.</span>,  <span class="hljs-number">5.</span>]])</span><br></pre></td></tr></table></figure><p>但是，假设我们想要用一个一维数组来设置目标数组的各列，只要保证形状兼容就可以了：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">110</span>]: col = np.array([<span class="hljs-number">1.28</span>, <span class="hljs-number">-0.42</span>, <span class="hljs-number">0.44</span>, <span class="hljs-number">1.6</span>])</span><br><span class="line">In [<span class="hljs-number">111</span>]: arr[:] = col[:, np.newaxis]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">112</span>]: arr</span><br><span class="line">Out[<span class="hljs-number">112</span>]: </span><br><span class="line">array([[ <span class="hljs-number">1.28</span>,  <span class="hljs-number">1.28</span>,  <span class="hljs-number">1.28</span>],</span><br><span class="line">       [<span class="hljs-number">-0.42</span>, <span class="hljs-number">-0.42</span>, <span class="hljs-number">-0.42</span>],</span><br><span class="line">       [ <span class="hljs-number">0.44</span>,  <span class="hljs-number">0.44</span>,  <span class="hljs-number">0.44</span>],</span><br><span class="line">       [ <span class="hljs-number">1.6</span> ,  <span class="hljs-number">1.6</span> ,  <span class="hljs-number">1.6</span> ]])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">113</span>]: arr[:<span class="hljs-number">2</span>] = [[<span class="hljs-number">-1.37</span>], [<span class="hljs-number">0.509</span>]]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">114</span>]: arr</span><br><span class="line">Out[<span class="hljs-number">114</span>]: </span><br><span class="line">array([[<span class="hljs-number">-1.37</span> , <span class="hljs-number">-1.37</span> , <span class="hljs-number">-1.37</span> ],</span><br><span class="line">       [ <span class="hljs-number">0.509</span>,  <span class="hljs-number">0.509</span>,  <span class="hljs-number">0.509</span>],</span><br><span class="line">       [ <span class="hljs-number">0.44</span> ,  <span class="hljs-number">0.44</span> ,  <span class="hljs-number">0.44</span> ],</span><br><span class="line">       [ <span class="hljs-number">1.6</span>  ,  <span class="hljs-number">1.6</span>  ,  <span class="hljs-number">1.6</span>  ]])</span><br></pre></td></tr></table></figure><h1 id="A-4-ufunc高级应用"><a href="#A-4-ufunc高级应用" class="headerlink" title="A.4 ufunc高级应用"></a>A.4 ufunc高级应用</h1><p>虽然许多NumPy用户只会用到通用函数所提供的快速的元素级运算，但通用函数实际上还有一些高级用法能使我们丢开循环而编写出更为简洁的代码。</p><h2 id="ufunc实例方法"><a href="#ufunc实例方法" class="headerlink" title="ufunc实例方法"></a>ufunc实例方法</h2><p>NumPy的各个二元ufunc都有一些用于执行特定矢量化运算的特殊方法。表A-2汇总了这些方法，下面我将通过几个具体的例子对它们进行说明。</p><p>reduce接受一个数组参数，并通过一系列的二元运算对其值进行聚合（可指明轴向）。例如，我们可以用np.add.reduce对数组中各个元素进行求和：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">115</span>]: arr = np.arange(<span class="hljs-number">10</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">116</span>]: np.add.reduce(arr)</span><br><span class="line">Out[<span class="hljs-number">116</span>]: <span class="hljs-number">45</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">117</span>]: arr.sum()</span><br><span class="line">Out[<span class="hljs-number">117</span>]: <span class="hljs-number">45</span></span><br></pre></td></tr></table></figure><p>起始值取决于ufunc（对于add的情况，就是0）。如果设置了轴号，约简运算就会沿该轴向执行。这就使你能用一种比较简洁的方式得到某些问题的答案。在下面这个例子中，我们用np.logical_and检查数组各行中的值是否是有序的：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">118</span>]: np.random.seed(<span class="hljs-number">12346</span>)  <span class="hljs-comment"># for reproducibility</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">119</span>]: arr = np.random.randn(<span class="hljs-number">5</span>, <span class="hljs-number">5</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">120</span>]: arr[::<span class="hljs-number">2</span>].sort(<span class="hljs-number">1</span>) <span class="hljs-comment"># sort a few rows</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">121</span>]: arr[:, :<span class="hljs-number">-1</span>] &lt; arr[:, <span class="hljs-number">1</span>:]</span><br><span class="line">Out[<span class="hljs-number">121</span>]: </span><br><span class="line">array([[ <span class="hljs-literal">True</span>,  <span class="hljs-literal">True</span>,  <span class="hljs-literal">True</span>,  <span class="hljs-literal">True</span>],</span><br><span class="line">       [<span class="hljs-literal">False</span>,  <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>],</span><br><span class="line">       [ <span class="hljs-literal">True</span>,  <span class="hljs-literal">True</span>,  <span class="hljs-literal">True</span>,  <span class="hljs-literal">True</span>],</span><br><span class="line">       [ <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>,  <span class="hljs-literal">True</span>,  <span class="hljs-literal">True</span>],</span><br><span class="line">       [ <span class="hljs-literal">True</span>,  <span class="hljs-literal">True</span>,  <span class="hljs-literal">True</span>,  <span class="hljs-literal">True</span>]], dtype=bool)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">122</span>]: np.logical_and.reduce(arr[:, :<span class="hljs-number">-1</span>] &lt; arr[:, <span class="hljs-number">1</span>:], axis=<span class="hljs-number">1</span>)</span><br><span class="line">Out[<span class="hljs-number">122</span>]: array([ <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>,  <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>,  <span class="hljs-literal">True</span>], dtype=bool)</span><br></pre></td></tr></table></figure><p>注意，logical_and.reduce跟all方法是等价的。</p><p>ccumulate跟reduce的关系就像cumsum跟sum的关系那样。它产生一个跟原数组大小相同的中间“累计”值数组：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">123</span>]: arr = np.arange(<span class="hljs-number">15</span>).reshape((<span class="hljs-number">3</span>, <span class="hljs-number">5</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">124</span>]: np.add.accumulate(arr, axis=<span class="hljs-number">1</span>)</span><br><span class="line">Out[<span class="hljs-number">124</span>]: </span><br><span class="line">array([[ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">6</span>, <span class="hljs-number">10</span>],</span><br><span class="line">       [ <span class="hljs-number">5</span>, <span class="hljs-number">11</span>, <span class="hljs-number">18</span>, <span class="hljs-number">26</span>, <span class="hljs-number">35</span>],</span><br><span class="line">       [<span class="hljs-number">10</span>, <span class="hljs-number">21</span>, <span class="hljs-number">33</span>, <span class="hljs-number">46</span>, <span class="hljs-number">60</span>]])</span><br></pre></td></tr></table></figure><p>outer用于计算两个数组的叉积：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">125</span>]: arr = np.arange(<span class="hljs-number">3</span>).repeat([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">126</span>]: arr</span><br><span class="line">Out[<span class="hljs-number">126</span>]: array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">127</span>]: np.multiply.outer(arr, np.arange(<span class="hljs-number">5</span>))</span><br><span class="line">Out[<span class="hljs-number">127</span>]: </span><br><span class="line">array([[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],</span><br><span class="line">       [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>],</span><br><span class="line">       [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>],</span><br><span class="line">       [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>],</span><br><span class="line">       [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]])</span><br></pre></td></tr></table></figure><p>outer输出结果的维度是两个输入数据的维度之和：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">128</span>]: x, y = np.random.randn(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>), np.random.randn(<span class="hljs-number">5</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">129</span>]: result = np.subtract.outer(x, y)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">130</span>]: result.shape</span><br><span class="line">Out[<span class="hljs-number">130</span>]: (<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)</span><br></pre></td></tr></table></figure><p>最后一个方法reduceat用于计算“局部约简”，其实就是一个对数据各切片进行聚合的groupby运算。它接受一组用于指示如何对值进行拆分和聚合的“面元边界”：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">131</span>]: arr = np.arange(<span class="hljs-number">10</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">132</span>]: np.add.reduceat(arr, [<span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>])</span><br><span class="line">Out[<span class="hljs-number">132</span>]: array([<span class="hljs-number">10</span>, <span class="hljs-number">18</span>, <span class="hljs-number">17</span>])</span><br></pre></td></tr></table></figure><p>最终结果是在arr[0:5]、arr[5:8]以及arr[8:]上执行的约简。跟其他方法一样，这里也可以传入一个axis参数：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">133</span>]: arr = np.multiply.outer(np.arange(<span class="hljs-number">4</span>), np.arange(<span class="hljs-number">5</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">134</span>]: arr</span><br><span class="line">Out[<span class="hljs-number">134</span>]: </span><br><span class="line">array([[ <span class="hljs-number">0</span>,  <span class="hljs-number">0</span>,  <span class="hljs-number">0</span>,  <span class="hljs-number">0</span>,  <span class="hljs-number">0</span>],</span><br><span class="line">       [ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">4</span>],</span><br><span class="line">       [ <span class="hljs-number">0</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">8</span>],</span><br><span class="line">       [ <span class="hljs-number">0</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">12</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">135</span>]: np.add.reduceat(arr, [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>], axis=<span class="hljs-number">1</span>)</span><br><span class="line">Out[<span class="hljs-number">135</span>]: </span><br><span class="line">array([[ <span class="hljs-number">0</span>,  <span class="hljs-number">0</span>,  <span class="hljs-number">0</span>],</span><br><span class="line">       [ <span class="hljs-number">1</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">4</span>],</span><br><span class="line">       [ <span class="hljs-number">2</span>, <span class="hljs-number">10</span>,  <span class="hljs-number">8</span>],</span><br><span class="line">       [ <span class="hljs-number">3</span>, <span class="hljs-number">15</span>, <span class="hljs-number">12</span>]])</span><br></pre></td></tr></table></figure><p>表A-2总结了部分的ufunc方法。</p><p><img src="/images/blog/7178691-c997bd45000f7b72.webp" alt="img"></p><p>表A ufunc方法</p><h2 id="编写新的ufunc"><a href="#编写新的ufunc" class="headerlink" title="编写新的ufunc"></a>编写新的ufunc</h2><p>有多种方法可以让你编写自己的NumPy ufuncs。最常见的是使用NumPy C API，但它超越了本书的范围。在本节，我们讲纯粹的Python ufunc。</p><p>numpy.frompyfunc接受一个Python函数以及两个分别表示输入输出参数数量的参数。例如，下面是一个能够实现元素级加法的简单函数：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">136</span>]: <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_elements</span><span class="hljs-params">(x, y)</span>:</span></span><br><span class="line">   .....:     <span class="hljs-keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">137</span>]: add_them = np.frompyfunc(add_elements, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">138</span>]: add_them(np.arange(<span class="hljs-number">8</span>), np.arange(<span class="hljs-number">8</span>))</span><br><span class="line">Out[<span class="hljs-number">138</span>]: array([<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>, <span class="hljs-number">14</span>], dtype=object)</span><br></pre></td></tr></table></figure><p>用frompyfunc创建的函数总是返回Python对象数组，这一点很不方便。幸运的是，还有另一个办法，即numpy.vectorize。虽然没有frompyfunc那么强大，但可以让你指定输出类型：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">139</span>]: add_them = np.vectorize(add_elements, otypes=[np.float64])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">140</span>]: add_them(np.arange(<span class="hljs-number">8</span>), np.arange(<span class="hljs-number">8</span>))</span><br><span class="line">Out[<span class="hljs-number">140</span>]: array([  <span class="hljs-number">0.</span>,   <span class="hljs-number">2.</span>,   <span class="hljs-number">4.</span>,   <span class="hljs-number">6.</span>,   <span class="hljs-number">8.</span>,  <span class="hljs-number">10.</span>,  <span class="hljs-number">12.</span>,  <span class="hljs-number">14.</span>])</span><br></pre></td></tr></table></figure><p>虽然这两个函数提供了一种创建ufunc型函数的手段，但它们非常慢，因为它们在计算每个元素时都要执行一次Python函数调用，这就会比NumPy自带的基于C的ufunc慢很多：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">141</span>]: arr = np.random.randn(<span class="hljs-number">10000</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">142</span>]: %timeit add_them(arr, arr)</span><br><span class="line"><span class="hljs-number">4.12</span> ms +- <span class="hljs-number">182</span> us per loop (mean +- std. dev. of <span class="hljs-number">7</span> runs, <span class="hljs-number">100</span> loops each)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">143</span>]: %timeit np.add(arr, arr)</span><br><span class="line"><span class="hljs-number">6.89</span> us +- <span class="hljs-number">504</span> ns per loop (mean +- std. dev. of <span class="hljs-number">7</span> runs, <span class="hljs-number">100000</span> loops each)</span><br></pre></td></tr></table></figure><p>本章的后面，我会介绍使用Numba（<a href="http://numba.pydata.org/），创建快速Python" target="_blank" rel="noopener">http://numba.pydata.org/），创建快速Python</a> ufuncs。</p><h1 id="A-5-结构化和记录式数组"><a href="#A-5-结构化和记录式数组" class="headerlink" title="A.5 结构化和记录式数组"></a>A.5 结构化和记录式数组</h1><p>你可能已经注意到了，到目前为止我们所讨论的ndarray都是一种同质数据容器，也就是说，在它所表示的内存块中，各元素占用的字节数相同（具体根据dtype而定）。从表面上看，它似乎不能用于表示异质或表格型的数据。结构化数组是一种特殊的ndarray，其中的各个元素可以被看做C语言中的结构体（struct，这就是“结构化”的由来）或SQL表中带有多个命名字段的行：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">144</span>]: dtype = [(<span class="hljs-string">'x'</span>, np.float64), (<span class="hljs-string">'y'</span>, np.int32)]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">145</span>]: sarr = np.array([(<span class="hljs-number">1.5</span>, <span class="hljs-number">6</span>), (np.pi, <span class="hljs-number">-2</span>)], dtype=dtype)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">146</span>]: sarr</span><br><span class="line">Out[<span class="hljs-number">146</span>]: </span><br><span class="line">array([( <span class="hljs-number">1.5</span>   ,  <span class="hljs-number">6</span>), ( <span class="hljs-number">3.1416</span>, <span class="hljs-number">-2</span>)],</span><br><span class="line">      dtype=[(<span class="hljs-string">'x'</span>, <span class="hljs-string">'&lt;f8'</span>), (<span class="hljs-string">'y'</span>, <span class="hljs-string">'&lt;i4'</span>)])</span><br></pre></td></tr></table></figure><p>定义结构化dtype（请参考NumPy的在线文档）的方式有很多。最典型的办法是元组列表，各元组的格式为(field_name,field_data_type)。这样，数组的元素就成了元组式的对象，该对象中各个元素可以像字典那样进行访问：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">147</span>]: sarr[<span class="hljs-number">0</span>]</span><br><span class="line">Out[<span class="hljs-number">147</span>]: ( <span class="hljs-number">1.5</span>, <span class="hljs-number">6</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">148</span>]: sarr[<span class="hljs-number">0</span>][<span class="hljs-string">'y'</span>]</span><br><span class="line">Out[<span class="hljs-number">148</span>]: <span class="hljs-number">6</span></span><br></pre></td></tr></table></figure><p>字段名保存在dtype.names属性中。在访问结构化数组的某个字段时，返回的是该数据的视图，所以不会发生数据复制：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">149</span>]: sarr[<span class="hljs-string">'x'</span>]</span><br><span class="line">Out[<span class="hljs-number">149</span>]: array([ <span class="hljs-number">1.5</span>   ,  <span class="hljs-number">3.1416</span>])</span><br></pre></td></tr></table></figure><h2 id="嵌套dtype和多维字段"><a href="#嵌套dtype和多维字段" class="headerlink" title="嵌套dtype和多维字段"></a>嵌套dtype和多维字段</h2><p>在定义结构化dtype时，你可以再设置一个形状（可以是一个整数，也可以是一个元组）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">150</span>]: dtype = [(<span class="hljs-string">'x'</span>, np.int64, <span class="hljs-number">3</span>), (<span class="hljs-string">'y'</span>, np.int32)]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">151</span>]: arr = np.zeros(<span class="hljs-number">4</span>, dtype=dtype)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">152</span>]: arr</span><br><span class="line">Out[<span class="hljs-number">152</span>]: </span><br><span class="line">array([([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], <span class="hljs-number">0</span>), ([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], <span class="hljs-number">0</span>), ([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], <span class="hljs-number">0</span>), ([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], <span class="hljs-number">0</span>)],</span><br><span class="line">      dtype=[(<span class="hljs-string">'x'</span>, <span class="hljs-string">'&lt;i8'</span>, (<span class="hljs-number">3</span>,)), (<span class="hljs-string">'y'</span>, <span class="hljs-string">'&lt;i4'</span>)])</span><br></pre></td></tr></table></figure><p>在这种情况下，各个记录的x字段所表示的是一个长度为3的数组：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">153</span>]: arr[<span class="hljs-number">0</span>][<span class="hljs-string">'x'</span>]</span><br><span class="line">Out[<span class="hljs-number">153</span>]: array([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])</span><br></pre></td></tr></table></figure><p>这样，访问arr[‘x’]即可得到一个二维数组，而不是前面那个例子中的一维数组：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">154</span>]: arr[<span class="hljs-string">'x'</span>]</span><br><span class="line">Out[<span class="hljs-number">154</span>]: </span><br><span class="line">array([[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],</span><br><span class="line">       [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],</span><br><span class="line">       [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],</span><br><span class="line">       [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]])</span><br></pre></td></tr></table></figure><p>这就使你能用单个数组的内存块存放复杂的嵌套结构。你还可以嵌套dtype，作出更复杂的结构。下面是一个简单的例子：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">155</span>]: dtype = [(<span class="hljs-string">'x'</span>, [(<span class="hljs-string">'a'</span>, <span class="hljs-string">'f8'</span>), (<span class="hljs-string">'b'</span>, <span class="hljs-string">'f4'</span>)]), (<span class="hljs-string">'y'</span>, np.int32)]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">156</span>]: data = np.array([((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>), <span class="hljs-number">5</span>), ((<span class="hljs-number">3</span>, <span class="hljs-number">4</span>), <span class="hljs-number">6</span>)], dtype=dtype)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">157</span>]: data[<span class="hljs-string">'x'</span>]</span><br><span class="line">Out[<span class="hljs-number">157</span>]: </span><br><span class="line">array([( <span class="hljs-number">1.</span>,  <span class="hljs-number">2.</span>), ( <span class="hljs-number">3.</span>,  <span class="hljs-number">4.</span>)],</span><br><span class="line">      dtype=[(<span class="hljs-string">'a'</span>, <span class="hljs-string">'&lt;f8'</span>), (<span class="hljs-string">'b'</span>, <span class="hljs-string">'&lt;f4'</span>)])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">158</span>]: data[<span class="hljs-string">'y'</span>]</span><br><span class="line">Out[<span class="hljs-number">158</span>]: array([<span class="hljs-number">5</span>, <span class="hljs-number">6</span>], dtype=int32)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">159</span>]: data[<span class="hljs-string">'x'</span>][<span class="hljs-string">'a'</span>]</span><br><span class="line">Out[<span class="hljs-number">159</span>]: array([ <span class="hljs-number">1.</span>,  <span class="hljs-number">3.</span>])</span><br></pre></td></tr></table></figure><p>pandas的DataFrame并不直接支持该功能，但它的分层索引机制跟这个差不多。</p><h2 id="为什么要用结构化数组"><a href="#为什么要用结构化数组" class="headerlink" title="为什么要用结构化数组"></a>为什么要用结构化数组</h2><p>跟pandas的DataFrame相比，NumPy的结构化数组是一种相对较低级的工具。它可以将单个内存块解释为带有任意复杂嵌套列的表格型结构。由于数组中的每个元素在内存中都被表示为固定的字节数，所以结构化数组能够提供非常快速高效的磁盘数据读写（包括内存映像）、网络传输等功能。</p><p>结构化数组的另一个常见用法是，将数据文件写成定长记录字节流，这是C和C++代码中常见的数据序列化手段（业界许多历史系统中都能找得到）。只要知道文件的格式（记录的大小、元素的顺序、字节数以及数据类型等），就可以用np.fromfile将数据读入内存。这种用法超出了本书的范围，知道这点就可以了。</p><h1 id="A-6-更多有关排序的话题"><a href="#A-6-更多有关排序的话题" class="headerlink" title="A.6 更多有关排序的话题"></a>A.6 更多有关排序的话题</h1><p>跟Python内置的列表一样，ndarray的sort实例方法也是就地排序。也就是说，数组内容的重新排列是不会产生新数组的：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">160</span>]: arr = np.random.randn(<span class="hljs-number">6</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">161</span>]: arr.sort()</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">162</span>]: arr</span><br><span class="line">Out[<span class="hljs-number">162</span>]: array([<span class="hljs-number">-1.082</span> ,  <span class="hljs-number">0.3759</span>,  <span class="hljs-number">0.8014</span>,  <span class="hljs-number">1.1397</span>,  <span class="hljs-number">1.2888</span>,  <span class="hljs-number">1.8413</span>])</span><br></pre></td></tr></table></figure><p>在对数组进行就地排序时要注意一点，如果目标数组只是一个视图，则原始数组将会被修改：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">163</span>]: arr = np.random.randn(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">164</span>]: arr</span><br><span class="line">Out[<span class="hljs-number">164</span>]: </span><br><span class="line">array([[<span class="hljs-number">-0.3318</span>, <span class="hljs-number">-1.4711</span>,  <span class="hljs-number">0.8705</span>, <span class="hljs-number">-0.0847</span>, <span class="hljs-number">-1.1329</span>],</span><br><span class="line">       [<span class="hljs-number">-1.0111</span>, <span class="hljs-number">-0.3436</span>,  <span class="hljs-number">2.1714</span>,  <span class="hljs-number">0.1234</span>, <span class="hljs-number">-0.0189</span>],</span><br><span class="line">       [ <span class="hljs-number">0.1773</span>,  <span class="hljs-number">0.7424</span>,  <span class="hljs-number">0.8548</span>,  <span class="hljs-number">1.038</span> , <span class="hljs-number">-0.329</span> ]])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">165</span>]: arr[:, <span class="hljs-number">0</span>].sort()  <span class="hljs-comment"># Sort first column values in-place</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">166</span>]: arr</span><br><span class="line">Out[<span class="hljs-number">166</span>]: </span><br><span class="line">array([[<span class="hljs-number">-1.0111</span>, <span class="hljs-number">-1.4711</span>,  <span class="hljs-number">0.8705</span>, <span class="hljs-number">-0.0847</span>, <span class="hljs-number">-1.1329</span>],</span><br><span class="line">       [<span class="hljs-number">-0.3318</span>, <span class="hljs-number">-0.3436</span>,  <span class="hljs-number">2.1714</span>,  <span class="hljs-number">0.1234</span>, <span class="hljs-number">-0.0189</span>],</span><br><span class="line">       [ <span class="hljs-number">0.1773</span>,  <span class="hljs-number">0.7424</span>,  <span class="hljs-number">0.8548</span>,  <span class="hljs-number">1.038</span> , <span class="hljs-number">-0.329</span> ]])</span><br></pre></td></tr></table></figure><p>相反，numpy.sort会为原数组创建一个已排序副本。另外，它所接受的参数（比如kind）跟ndarray.sort一样：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">167</span>]: arr = np.random.randn(<span class="hljs-number">5</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">168</span>]: arr</span><br><span class="line">Out[<span class="hljs-number">168</span>]: array([<span class="hljs-number">-1.1181</span>, <span class="hljs-number">-0.2415</span>, <span class="hljs-number">-2.0051</span>,  <span class="hljs-number">0.7379</span>, <span class="hljs-number">-1.0614</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">169</span>]: np.sort(arr)</span><br><span class="line">Out[<span class="hljs-number">169</span>]: array([<span class="hljs-number">-2.0051</span>, <span class="hljs-number">-1.1181</span>, <span class="hljs-number">-1.0614</span>, <span class="hljs-number">-0.2415</span>,  <span class="hljs-number">0.7379</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">170</span>]: arr</span><br><span class="line">Out[<span class="hljs-number">170</span>]: array([<span class="hljs-number">-1.1181</span>, <span class="hljs-number">-0.2415</span>, <span class="hljs-number">-2.0051</span>,  <span class="hljs-number">0.7379</span>, <span class="hljs-number">-1.0614</span>])</span><br></pre></td></tr></table></figure><p>这两个排序方法都可以接受一个axis参数，以便沿指定轴向对各块数据进行单独排序：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">171</span>]: arr = np.random.randn(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">172</span>]: arr</span><br><span class="line">Out[<span class="hljs-number">172</span>]: </span><br><span class="line">array([[ <span class="hljs-number">0.5955</span>, <span class="hljs-number">-0.2682</span>,  <span class="hljs-number">1.3389</span>, <span class="hljs-number">-0.1872</span>,  <span class="hljs-number">0.9111</span>],</span><br><span class="line">       [<span class="hljs-number">-0.3215</span>,  <span class="hljs-number">1.0054</span>, <span class="hljs-number">-0.5168</span>,  <span class="hljs-number">1.1925</span>, <span class="hljs-number">-0.1989</span>],</span><br><span class="line">       [ <span class="hljs-number">0.3969</span>, <span class="hljs-number">-1.7638</span>,  <span class="hljs-number">0.6071</span>, <span class="hljs-number">-0.2222</span>, <span class="hljs-number">-0.2171</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">173</span>]: arr.sort(axis=<span class="hljs-number">1</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">174</span>]: arr</span><br><span class="line">Out[<span class="hljs-number">174</span>]: </span><br><span class="line">array([[<span class="hljs-number">-0.2682</span>, <span class="hljs-number">-0.1872</span>,  <span class="hljs-number">0.5955</span>,  <span class="hljs-number">0.9111</span>,  <span class="hljs-number">1.3389</span>],</span><br><span class="line">       [<span class="hljs-number">-0.5168</span>, <span class="hljs-number">-0.3215</span>, <span class="hljs-number">-0.1989</span>,  <span class="hljs-number">1.0054</span>,  <span class="hljs-number">1.1925</span>],</span><br><span class="line">       [<span class="hljs-number">-1.7638</span>, <span class="hljs-number">-0.2222</span>, <span class="hljs-number">-0.2171</span>,  <span class="hljs-number">0.3969</span>,  <span class="hljs-number">0.6071</span>]])</span><br></pre></td></tr></table></figure><p>你可能注意到了，这两个排序方法都不可以被设置为降序。其实这也无所谓，因为数组切片会产生视图（也就是说，不会产生副本，也不需要任何其他的计算工作）。许多Python用户都很熟悉一个有关列表的小技巧：values[::-1]可以返回一个反序的列表。对ndarray也是如此：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">175</span>]: arr[:, ::<span class="hljs-number">-1</span>]</span><br><span class="line">Out[<span class="hljs-number">175</span>]: </span><br><span class="line">array([[ <span class="hljs-number">1.3389</span>,  <span class="hljs-number">0.9111</span>,  <span class="hljs-number">0.5955</span>, <span class="hljs-number">-0.1872</span>, <span class="hljs-number">-0.2682</span>],</span><br><span class="line">       [ <span class="hljs-number">1.1925</span>,  <span class="hljs-number">1.0054</span>, <span class="hljs-number">-0.1989</span>, <span class="hljs-number">-0.3215</span>, <span class="hljs-number">-0.5168</span>],</span><br><span class="line">       [ <span class="hljs-number">0.6071</span>,  <span class="hljs-number">0.3969</span>, <span class="hljs-number">-0.2171</span>, <span class="hljs-number">-0.2222</span>, <span class="hljs-number">-1.7638</span>]])</span><br></pre></td></tr></table></figure><h2 id="间接排序：argsort和lexsort"><a href="#间接排序：argsort和lexsort" class="headerlink" title="间接排序：argsort和lexsort"></a>间接排序：argsort和lexsort</h2><p>在数据分析工作中，常常需要根据一个或多个键对数据集进行排序。例如，一个有关学生信息的数据表可能需要以姓和名进行排序（先姓后名）。这就是间接排序的一个例子，如果你阅读过有关pandas的章节，那就已经见过不少高级例子了。给定一个或多个键，你就可以得到一个由整数组成的索引数组（我亲切地称之为索引器），其中的索引值说明了数据在新顺序下的位置。argsort和numpy.lexsort就是实现该功能的两个主要方法。下面是一个简单的例子：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">176</span>]: values = np.array([<span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">177</span>]: indexer = values.argsort()</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">178</span>]: indexer</span><br><span class="line">Out[<span class="hljs-number">178</span>]: array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">179</span>]: values[indexer]</span><br><span class="line">Out[<span class="hljs-number">179</span>]: array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>])</span><br></pre></td></tr></table></figure><p>一个更复杂的例子，下面这段代码根据数组的第一行对其进行排序：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">180</span>]: arr = np.random.randn(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">181</span>]: arr[<span class="hljs-number">0</span>] = values</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">182</span>]: arr</span><br><span class="line">Out[<span class="hljs-number">182</span>]: </span><br><span class="line">array([[ <span class="hljs-number">5.</span>    ,  <span class="hljs-number">0.</span>    ,  <span class="hljs-number">1.</span>    ,  <span class="hljs-number">3.</span>    ,  <span class="hljs-number">2.</span>    ],</span><br><span class="line">       [<span class="hljs-number">-0.3636</span>, <span class="hljs-number">-0.1378</span>,  <span class="hljs-number">2.1777</span>, <span class="hljs-number">-0.4728</span>,  <span class="hljs-number">0.8356</span>],</span><br><span class="line">       [<span class="hljs-number">-0.2089</span>,  <span class="hljs-number">0.2316</span>,  <span class="hljs-number">0.728</span> , <span class="hljs-number">-1.3918</span>,  <span class="hljs-number">1.9956</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">183</span>]: arr[:, arr[<span class="hljs-number">0</span>].argsort()]</span><br><span class="line">Out[<span class="hljs-number">183</span>]: </span><br><span class="line">array([[ <span class="hljs-number">0.</span>    ,  <span class="hljs-number">1.</span>    ,  <span class="hljs-number">2.</span>    ,  <span class="hljs-number">3.</span>    ,  <span class="hljs-number">5.</span>    ],</span><br><span class="line">       [<span class="hljs-number">-0.1378</span>,  <span class="hljs-number">2.1777</span>,  <span class="hljs-number">0.8356</span>, <span class="hljs-number">-0.4728</span>, <span class="hljs-number">-0.3636</span>],</span><br><span class="line">       [ <span class="hljs-number">0.2316</span>,  <span class="hljs-number">0.728</span> ,  <span class="hljs-number">1.9956</span>, <span class="hljs-number">-1.3918</span>, <span class="hljs-number">-0.2089</span>]])</span><br></pre></td></tr></table></figure><p>lexsort跟argsort差不多，只不过它可以一次性对多个键数组执行间接排序（字典序）。假设我们想对一些以姓和名标识的数据进行排序：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">184</span>]: first_name = np.array([<span class="hljs-string">'Bob'</span>, <span class="hljs-string">'Jane'</span>, <span class="hljs-string">'Steve'</span>, <span class="hljs-string">'Bill'</span>, <span class="hljs-string">'Barbara'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">185</span>]: last_name = np.array([<span class="hljs-string">'Jones'</span>, <span class="hljs-string">'Arnold'</span>, <span class="hljs-string">'Arnold'</span>, <span class="hljs-string">'Jones'</span>, <span class="hljs-string">'Walters'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">186</span>]: sorter = np.lexsort((first_name, last_name))</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">187</span>]: sorter</span><br><span class="line">Out[<span class="hljs-number">187</span>]: array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">188</span>]: zip(last_name[sorter], first_name[sorter])</span><br><span class="line">Out[<span class="hljs-number">188</span>]: &lt;zip at <span class="hljs-number">0x7fa203eda1c8</span>&gt;</span><br></pre></td></tr></table></figure><p>刚开始使用lexsort的时候可能会比较容易头晕，这是因为键的应用顺序是从最后一个传入的算起的。不难看出，last_name是先于first_name被应用的。</p><blockquote><p>笔记：Series和DataFrame的sort_index以及Series的order方法就是通过这些函数的变体（它们还必须考虑缺失值）实现的。</p></blockquote><h2 id="其他排序算法"><a href="#其他排序算法" class="headerlink" title="其他排序算法"></a>其他排序算法</h2><p>稳定的（stable）排序算法会保持等价元素的相对位置。对于相对位置具有实际意义的那些间接排序而言，这一点非常重要：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">189</span>]: values = np.array([<span class="hljs-string">'2:first'</span>, <span class="hljs-string">'2:second'</span>, <span class="hljs-string">'1:first'</span>, <span class="hljs-string">'1:second'</span>,</span><br><span class="line">.....:                    <span class="hljs-string">'1:third'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">190</span>]: key = np.array([<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">191</span>]: indexer = key.argsort(kind=<span class="hljs-string">'mergesort'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">192</span>]: indexer</span><br><span class="line">Out[<span class="hljs-number">192</span>]: array([<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">193</span>]: values.take(indexer)</span><br><span class="line">Out[<span class="hljs-number">193</span>]: </span><br><span class="line">array([<span class="hljs-string">'1:first'</span>, <span class="hljs-string">'1:second'</span>, <span class="hljs-string">'1:third'</span>, <span class="hljs-string">'2:first'</span>, <span class="hljs-string">'2:second'</span>],</span><br><span class="line">      dtype=<span class="hljs-string">'&lt;U8'</span>)</span><br></pre></td></tr></table></figure><p>mergesort（合并排序）是唯一的稳定排序，它保证有O(n log n)的性能（空间复杂度），但是其平均性能比默认的quicksort（快速排序）要差。表A-3列出了可用的排序算法及其相关的性能指标。大部分用户完全不需要知道这些东西，但了解一下总是好的。</p><p><img src="/images/blog/7178691-970f54f58b6b3356.webp" alt="img"></p><p>表A-3 数组排序算法</p><h2 id="部分排序数组"><a href="#部分排序数组" class="headerlink" title="部分排序数组"></a>部分排序数组</h2><p>排序的目的之一可能是确定数组中最大或最小的元素。NumPy有两个优化方法，numpy.partition和np.argpartition，可以在第k个最小元素划分的数组：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">194</span>]: np.random.seed(<span class="hljs-number">12345</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">195</span>]: arr = np.random.randn(<span class="hljs-number">20</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">196</span>]: arr</span><br><span class="line">Out[<span class="hljs-number">196</span>]: </span><br><span class="line">array([<span class="hljs-number">-0.2047</span>,  <span class="hljs-number">0.4789</span>, <span class="hljs-number">-0.5194</span>, <span class="hljs-number">-0.5557</span>,  <span class="hljs-number">1.9658</span>,  <span class="hljs-number">1.3934</span>,  <span class="hljs-number">0.0929</span>,</span><br><span class="line">        <span class="hljs-number">0.2817</span>,  <span class="hljs-number">0.769</span> ,  <span class="hljs-number">1.2464</span>,  <span class="hljs-number">1.0072</span>, <span class="hljs-number">-1.2962</span>,  <span class="hljs-number">0.275</span> ,  <span class="hljs-number">0.2289</span>,</span><br><span class="line">        <span class="hljs-number">1.3529</span>,  <span class="hljs-number">0.8864</span>, <span class="hljs-number">-2.0016</span>, <span class="hljs-number">-0.3718</span>,  <span class="hljs-number">1.669</span> , <span class="hljs-number">-0.4386</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">197</span>]: np.partition(arr, <span class="hljs-number">3</span>)</span><br><span class="line">Out[<span class="hljs-number">197</span>]: </span><br><span class="line">array([<span class="hljs-number">-2.0016</span>, <span class="hljs-number">-1.2962</span>, <span class="hljs-number">-0.5557</span>, <span class="hljs-number">-0.5194</span>, <span class="hljs-number">-0.3718</span>, <span class="hljs-number">-0.4386</span>, <span class="hljs-number">-0.2047</span>,</span><br><span class="line">        <span class="hljs-number">0.2817</span>,  <span class="hljs-number">0.769</span> ,  <span class="hljs-number">0.4789</span>,  <span class="hljs-number">1.0072</span>,  <span class="hljs-number">0.0929</span>,  <span class="hljs-number">0.275</span> ,  <span class="hljs-number">0.2289</span>,</span><br><span class="line">        <span class="hljs-number">1.3529</span>,  <span class="hljs-number">0.8864</span>,  <span class="hljs-number">1.3934</span>,  <span class="hljs-number">1.9658</span>,  <span class="hljs-number">1.669</span> ,  <span class="hljs-number">1.2464</span>])</span><br></pre></td></tr></table></figure><p>当你调用partition(arr, 3)，结果中的头三个元素是最小的三个，没有特定的顺序。numpy.argpartition与numpy.argsort相似，会返回索引，重排数据为等价的顺序：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">198</span>]: indices = np.argpartition(arr, <span class="hljs-number">3</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">199</span>]: indices</span><br><span class="line">Out[<span class="hljs-number">199</span>]: </span><br><span class="line">array([<span class="hljs-number">16</span>, <span class="hljs-number">11</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">2</span>, <span class="hljs-number">17</span>, <span class="hljs-number">19</span>,  <span class="hljs-number">0</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">1</span>, <span class="hljs-number">10</span>,  <span class="hljs-number">6</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>,  <span class="hljs-number">5</span>,</span><br><span class="line">        <span class="hljs-number">4</span>, <span class="hljs-number">18</span>,  <span class="hljs-number">9</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">200</span>]: arr.take(indices)</span><br><span class="line">Out[<span class="hljs-number">200</span>]: </span><br><span class="line">array([<span class="hljs-number">-2.0016</span>, <span class="hljs-number">-1.2962</span>, <span class="hljs-number">-0.5557</span>, <span class="hljs-number">-0.5194</span>, <span class="hljs-number">-0.3718</span>, <span class="hljs-number">-0.4386</span>, <span class="hljs-number">-0.2047</span>,</span><br><span class="line">        <span class="hljs-number">0.2817</span>,  <span class="hljs-number">0.769</span> ,  <span class="hljs-number">0.4789</span>,  <span class="hljs-number">1.0072</span>,  <span class="hljs-number">0.0929</span>,  <span class="hljs-number">0.275</span> ,  <span class="hljs-number">0.2289</span>,</span><br><span class="line">        <span class="hljs-number">1.3529</span>,  <span class="hljs-number">0.8864</span>,  <span class="hljs-number">1.3934</span>,  <span class="hljs-number">1.9658</span>,  <span class="hljs-number">1.669</span> ,  <span class="hljs-number">1.2464</span>])</span><br></pre></td></tr></table></figure><h2 id="numpy-searchsorted：在有序数组中查找元素"><a href="#numpy-searchsorted：在有序数组中查找元素" class="headerlink" title="numpy.searchsorted：在有序数组中查找元素"></a>numpy.searchsorted：在有序数组中查找元素</h2><p>searchsorted是一个在有序数组上执行二分查找的数组方法，只要将值插入到它返回的那个位置就能维持数组的有序性：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">201</span>]: arr = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">12</span>, <span class="hljs-number">15</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">202</span>]: arr.searchsorted(<span class="hljs-number">9</span>)</span><br><span class="line">Out[<span class="hljs-number">202</span>]: <span class="hljs-number">3</span></span><br></pre></td></tr></table></figure><p>你可以传入一组值就能得到一组索引：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">203</span>]: arr.searchsorted([<span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-number">11</span>, <span class="hljs-number">16</span>])</span><br><span class="line">Out[<span class="hljs-number">203</span>]: array([<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>])</span><br></pre></td></tr></table></figure><p>从上面的结果中可以看出，对于元素0，searchsorted会返回0。这是因为其默认行为是返回相等值组的左侧索引：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">204</span>]: arr = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">205</span>]: arr.searchsorted([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>])</span><br><span class="line">Out[<span class="hljs-number">205</span>]: array([<span class="hljs-number">0</span>, <span class="hljs-number">3</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">206</span>]: arr.searchsorted([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>], side=<span class="hljs-string">'right'</span>)</span><br><span class="line">Out[<span class="hljs-number">206</span>]: array([<span class="hljs-number">3</span>, <span class="hljs-number">7</span>])</span><br></pre></td></tr></table></figure><p>再来看searchsorted的另一个用法，假设我们有一个数据数组（其中的值在0到10000之间），还有一个表示“面元边界”的数组，我们希望用它将数据数组拆分开：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">207</span>]: data = np.floor(np.random.uniform(<span class="hljs-number">0</span>, <span class="hljs-number">10000</span>, size=<span class="hljs-number">50</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">208</span>]: bins = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">5000</span>, <span class="hljs-number">10000</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">209</span>]: data</span><br><span class="line">Out[<span class="hljs-number">209</span>]: </span><br><span class="line">array([ <span class="hljs-number">9940.</span>,  <span class="hljs-number">6768.</span>,  <span class="hljs-number">7908.</span>,  <span class="hljs-number">1709.</span>,   <span class="hljs-number">268.</span>,  <span class="hljs-number">8003.</span>, <span class="hljs-number">9037.</span>,   <span class="hljs-number">246.</span>,</span><br><span class="line">        <span class="hljs-number">4917.</span>,  <span class="hljs-number">5262.</span>,  <span class="hljs-number">5963.</span>,   <span class="hljs-number">519.</span>,  <span class="hljs-number">8950.</span>,  <span class="hljs-number">7282.</span>,  <span class="hljs-number">8183.</span>,  <span class="hljs-number">5002.</span>,</span><br><span class="line">        <span class="hljs-number">8101.</span>,   <span class="hljs-number">959.</span>,  <span class="hljs-number">2189.</span>,  <span class="hljs-number">2587.</span>,  <span class="hljs-number">4681.</span>,  <span class="hljs-number">4593.</span>,  <span class="hljs-number">7095.</span>,  <span class="hljs-number">1780.</span>,</span><br><span class="line">        <span class="hljs-number">5314.</span>,  <span class="hljs-number">1677.</span>,  <span class="hljs-number">7688.</span>,  <span class="hljs-number">9281.</span>,  <span class="hljs-number">6094.</span>,  <span class="hljs-number">1501.</span>,  <span class="hljs-number">4896.</span>,  <span class="hljs-number">3773.</span>,</span><br><span class="line">        <span class="hljs-number">8486.</span>,  <span class="hljs-number">9110.</span>,  <span class="hljs-number">3838.</span>,  <span class="hljs-number">3154.</span>,  <span class="hljs-number">5683.</span>,  <span class="hljs-number">1878.</span>,  <span class="hljs-number">1258.</span>,  <span class="hljs-number">6875.</span>,</span><br><span class="line">        <span class="hljs-number">7996.</span>,  <span class="hljs-number">5735.</span>,  <span class="hljs-number">9732.</span>,  <span class="hljs-number">6340.</span>,  <span class="hljs-number">8884.</span>,  <span class="hljs-number">4954.</span>,  <span class="hljs-number">3516.</span>,  <span class="hljs-number">7142.</span>,</span><br><span class="line">        <span class="hljs-number">5039.</span>,  <span class="hljs-number">2256.</span>])</span><br></pre></td></tr></table></figure><p>然后，为了得到各数据点所属区间的编号（其中1表示面元[0,100)），我们可以直接使用searchsorted：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">210</span>]: labels = bins.searchsorted(data)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">211</span>]: labels</span><br><span class="line">Out[<span class="hljs-number">211</span>]: </span><br><span class="line">array([<span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>,</span><br><span class="line">       <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>,</span><br><span class="line">       <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>])</span><br></pre></td></tr></table></figure><p>通过pandas的groupby使用该结果即可非常轻松地对原数据集进行拆分：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">212</span>]: pd.Series(data).groupby(labels).mean()</span><br><span class="line">Out[<span class="hljs-number">212</span>]: </span><br><span class="line"><span class="hljs-number">2</span>     <span class="hljs-number">498.000000</span></span><br><span class="line"><span class="hljs-number">3</span>    <span class="hljs-number">3064.277778</span></span><br><span class="line"><span class="hljs-number">4</span>    <span class="hljs-number">7389.035714</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><h1 id="A-7-用Numba编写快速NumPy函数"><a href="#A-7-用Numba编写快速NumPy函数" class="headerlink" title="A.7 用Numba编写快速NumPy函数"></a>A.7 用Numba编写快速NumPy函数</h1><p>Numba是一个开源项目，它可以利用CPUs、GPUs或其它硬件为类似NumPy的数据创建快速函数。它使用了LLVM项目（<a href="http://llvm.org/），将Python代码转换为机器代码。" target="_blank" rel="noopener">http://llvm.org/），将Python代码转换为机器代码。</a></p><p>为了介绍Numba，来考虑一个纯粹的Python函数，它使用for循环计算表达式(x - y).mean()：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mean_distance</span><span class="hljs-params">(x, y)</span>:</span></span><br><span class="line">    nx = len(x)</span><br><span class="line">    result = <span class="hljs-number">0.0</span></span><br><span class="line">    count = <span class="hljs-number">0</span></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(nx):</span><br><span class="line">        result += x[i] - y[i]</span><br><span class="line">        count += <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">return</span> result / count</span><br></pre></td></tr></table></figure><p>这个函数很慢：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">209</span>]: x = np.random.randn(<span class="hljs-number">10000000</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">210</span>]: y = np.random.randn(<span class="hljs-number">10000000</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">211</span>]: %timeit mean_distance(x, y)</span><br><span class="line"><span class="hljs-number">1</span> loop, best of <span class="hljs-number">3</span>: <span class="hljs-number">2</span> s per loop</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">212</span>]: %timeit (x - y).mean()</span><br><span class="line"><span class="hljs-number">100</span> loops, best of <span class="hljs-number">3</span>: <span class="hljs-number">14.7</span> ms per loop</span><br></pre></td></tr></table></figure><p>NumPy的版本要比它快过100倍。我们可以转换这个函数为编译的Numba函数，使用numba.jit函数：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">213</span>]: <span class="hljs-keyword">import</span> numba <span class="hljs-keyword">as</span> nb</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">214</span>]: numba_mean_distance = nb.jit(mean_distance)</span><br></pre></td></tr></table></figure><p>也可以写成装饰器：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">@nb.jit</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mean_distance</span><span class="hljs-params">(x, y)</span>:</span></span><br><span class="line">    nx = len(x)</span><br><span class="line">    result = <span class="hljs-number">0.0</span></span><br><span class="line">    count = <span class="hljs-number">0</span></span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(nx):</span><br><span class="line">        result += x[i] - y[i]</span><br><span class="line">        count += <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">return</span> result / count</span><br></pre></td></tr></table></figure><p>它要比矢量化的NumPy快：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">215</span>]: %timeit numba_mean_distance(x, y)</span><br><span class="line"><span class="hljs-number">100</span> loops, best of <span class="hljs-number">3</span>: <span class="hljs-number">10.3</span> ms per loop</span><br></pre></td></tr></table></figure><p>Numba不能编译Python代码，但它支持纯Python写的一个部分，可以编写数值算法。</p><p>Numba是一个深厚的库，支持多种硬件、编译模式和用户插件。它还可以编译NumPy Python API的一部分，而不用for循环。Numba也可以识别可以便以为机器编码的结构体，但是若调用CPython API，它就不知道如何编译。Numba的jit函数有一个选项，nopython=True，它限制了可以被转换为Python代码的代码，这些代码可以编译为LLVM，但没有任何Python C API调用。jit(nopython=True)有一个简短的别名numba.njit。</p><p>前面的例子，我们还可以这样写：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> numba <span class="hljs-keyword">import</span> float64, njit</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@njit(float64(float64[:], float64[:]))</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mean_distance</span><span class="hljs-params">(x, y)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">return</span> (x - y).mean()</span><br></pre></td></tr></table></figure><p>我建议你学习Numba的线上文档（<a href="http://numba.pydata.org/）。下一节介绍一个创建自定义Numpy" target="_blank" rel="noopener">http://numba.pydata.org/）。下一节介绍一个创建自定义Numpy</a> ufunc对象的例子。</p><h2 id="用Numba创建自定义numpy-ufunc对象"><a href="#用Numba创建自定义numpy-ufunc对象" class="headerlink" title="用Numba创建自定义numpy.ufunc对象"></a>用Numba创建自定义numpy.ufunc对象</h2><p>numba.vectorize创建了一个编译的NumPy ufunc，它与内置的ufunc很像。考虑一个numpy.add的Python例子：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> numba <span class="hljs-keyword">import</span> vectorize</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@vectorize</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">nb_add</span><span class="hljs-params">(x, y)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">return</span> x + y</span><br></pre></td></tr></table></figure><p>现在有：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">13</span>]: x = np.arange(<span class="hljs-number">10</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">14</span>]: nb_add(x, x)</span><br><span class="line">Out[<span class="hljs-number">14</span>]: array([  <span class="hljs-number">0.</span>,   <span class="hljs-number">2.</span>,   <span class="hljs-number">4.</span>,   <span class="hljs-number">6.</span>,   <span class="hljs-number">8.</span>,  <span class="hljs-number">10.</span>,  <span class="hljs-number">12.</span>,  <span class="hljs-number">14.</span>,  <span class="hljs-number">16.</span>,  <span class="hljs-number">18.</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">15</span>]: nb_add.accumulate(x, <span class="hljs-number">0</span>)</span><br><span class="line">Out[<span class="hljs-number">15</span>]: array([  <span class="hljs-number">0.</span>,   <span class="hljs-number">1.</span>,   <span class="hljs-number">3.</span>,   <span class="hljs-number">6.</span>,  <span class="hljs-number">10.</span>,  <span class="hljs-number">15.</span>,  <span class="hljs-number">21.</span>,  <span class="hljs-number">28.</span>,  <span class="hljs-number">36.</span>,  <span class="hljs-number">45.</span>])</span><br></pre></td></tr></table></figure><h1 id="A-8-高级数组输入输出"><a href="#A-8-高级数组输入输出" class="headerlink" title="A.8 高级数组输入输出"></a>A.8 高级数组输入输出</h1><p>我在第4章中讲过，np.save和np.load可用于读写磁盘上以二进制格式存储的数组。其实还有一些工具可用于更为复杂的场景。尤其是内存映像（memory map），它使你能处理在内存中放不下的数据集。</p><h2 id="内存映像文件"><a href="#内存映像文件" class="headerlink" title="内存映像文件"></a>内存映像文件</h2><p>内存映像文件是一种将磁盘上的非常大的二进制数据文件当做内存中的数组进行处理的方式。NumPy实现了一个类似于ndarray的memmap对象，它允许将大文件分成小段进行读写，而不是一次性将整个数组读入内存。另外，memmap也拥有跟普通数组一样的方法，因此，基本上只要是能用于ndarray的算法就也能用于memmap。</p><p>要创建一个内存映像，可以使用函数np.memmap并传入一个文件路径、数据类型、形状以及文件模式：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">214</span>]: mmap = np.memmap(<span class="hljs-string">'mymmap'</span>, dtype=<span class="hljs-string">'float64'</span>, mode=<span class="hljs-string">'w+'</span>,</span><br><span class="line">   .....:                  shape=(<span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">215</span>]: mmap</span><br><span class="line">Out[<span class="hljs-number">215</span>]: </span><br><span class="line">memmap([[ <span class="hljs-number">0.</span>,  <span class="hljs-number">0.</span>,  <span class="hljs-number">0.</span>, ...,  <span class="hljs-number">0.</span>,  <span class="hljs-number">0.</span>,  <span class="hljs-number">0.</span>],</span><br><span class="line">        [ <span class="hljs-number">0.</span>,  <span class="hljs-number">0.</span>,  <span class="hljs-number">0.</span>, ...,  <span class="hljs-number">0.</span>,  <span class="hljs-number">0.</span>,  <span class="hljs-number">0.</span>],</span><br><span class="line">        [ <span class="hljs-number">0.</span>,  <span class="hljs-number">0.</span>,  <span class="hljs-number">0.</span>, ...,  <span class="hljs-number">0.</span>,  <span class="hljs-number">0.</span>,  <span class="hljs-number">0.</span>],</span><br><span class="line">        ..., </span><br><span class="line">        [ <span class="hljs-number">0.</span>,  <span class="hljs-number">0.</span>,  <span class="hljs-number">0.</span>, ...,  <span class="hljs-number">0.</span>,  <span class="hljs-number">0.</span>,  <span class="hljs-number">0.</span>],</span><br><span class="line">        [ <span class="hljs-number">0.</span>,  <span class="hljs-number">0.</span>,  <span class="hljs-number">0.</span>, ...,  <span class="hljs-number">0.</span>,  <span class="hljs-number">0.</span>,  <span class="hljs-number">0.</span>],</span><br><span class="line">        [ <span class="hljs-number">0.</span>,  <span class="hljs-number">0.</span>,  <span class="hljs-number">0.</span>, ...,  <span class="hljs-number">0.</span>,  <span class="hljs-number">0.</span>,  <span class="hljs-number">0.</span>]])</span><br></pre></td></tr></table></figure><p>对memmap切片将会返回磁盘上的数据的视图：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">216</span>]: section = mmap[:<span class="hljs-number">5</span>]</span><br></pre></td></tr></table></figure><p>如果将数据赋值给这些视图：数据会先被缓存在内存中（就像是Python的文件对象），调用flush即可将其写入磁盘：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">217</span>]: section[:] = np.random.randn(<span class="hljs-number">5</span>, <span class="hljs-number">10000</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">218</span>]: mmap.flush()</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">219</span>]: mmap</span><br><span class="line">Out[<span class="hljs-number">219</span>]: </span><br><span class="line">memmap([[ <span class="hljs-number">0.7584</span>, <span class="hljs-number">-0.6605</span>,  <span class="hljs-number">0.8626</span>, ...,  <span class="hljs-number">0.6046</span>, <span class="hljs-number">-0.6212</span>,  <span class="hljs-number">2.0542</span>],</span><br><span class="line">        [<span class="hljs-number">-1.2113</span>, <span class="hljs-number">-1.0375</span>,  <span class="hljs-number">0.7093</span>, ..., <span class="hljs-number">-1.4117</span>, <span class="hljs-number">-0.1719</span>, <span class="hljs-number">-0.8957</span>],</span><br><span class="line">        [<span class="hljs-number">-0.1419</span>, <span class="hljs-number">-0.3375</span>,  <span class="hljs-number">0.4329</span>, ...,  <span class="hljs-number">1.2914</span>, <span class="hljs-number">-0.752</span> , <span class="hljs-number">-0.44</span>  ],</span><br><span class="line">        ..., </span><br><span class="line">        [ <span class="hljs-number">0.</span>    ,  <span class="hljs-number">0.</span>    ,  <span class="hljs-number">0.</span>    , ...,  <span class="hljs-number">0.</span>    ,  <span class="hljs-number">0.</span>    ,  <span class="hljs-number">0.</span>    ],</span><br><span class="line">        [ <span class="hljs-number">0.</span>    ,  <span class="hljs-number">0.</span>    ,  <span class="hljs-number">0.</span>    , ...,  <span class="hljs-number">0.</span>    ,  <span class="hljs-number">0.</span>    ,  <span class="hljs-number">0.</span>    ],</span><br><span class="line">        [ <span class="hljs-number">0.</span>    ,  <span class="hljs-number">0.</span>    ,  <span class="hljs-number">0.</span>    , ...,  <span class="hljs-number">0.</span>    ,  <span class="hljs-number">0.</span>    ,  <span class="hljs-number">0.</span>    ]])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">220</span>]: <span class="hljs-keyword">del</span> mmap</span><br></pre></td></tr></table></figure><p>只要某个内存映像超出了作用域，它就会被垃圾回收器回收，之前对其所做的任何修改都会被写入磁盘。当打开一个已经存在的内存映像时，仍然需要指明数据类型和形状，因为磁盘上的那个文件只是一块二进制数据而已，没有任何元数据：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">221</span>]: mmap = np.memmap(<span class="hljs-string">'mymmap'</span>, dtype=<span class="hljs-string">'float64'</span>, shape=(<span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">222</span>]: mmap</span><br><span class="line">Out[<span class="hljs-number">222</span>]: </span><br><span class="line">memmap([[ <span class="hljs-number">0.7584</span>, <span class="hljs-number">-0.6605</span>,  <span class="hljs-number">0.8626</span>, ...,  <span class="hljs-number">0.6046</span>, <span class="hljs-number">-0.6212</span>,  <span class="hljs-number">2.0542</span>],</span><br><span class="line">        [<span class="hljs-number">-1.2113</span>, <span class="hljs-number">-1.0375</span>,  <span class="hljs-number">0.7093</span>, ..., <span class="hljs-number">-1.4117</span>, <span class="hljs-number">-0.1719</span>, <span class="hljs-number">-0.8957</span>],</span><br><span class="line">        [<span class="hljs-number">-0.1419</span>, <span class="hljs-number">-0.3375</span>,  <span class="hljs-number">0.4329</span>, ...,  <span class="hljs-number">1.2914</span>, <span class="hljs-number">-0.752</span> , <span class="hljs-number">-0.44</span>  ],</span><br><span class="line">        ..., </span><br><span class="line">        [ <span class="hljs-number">0.</span>    ,  <span class="hljs-number">0.</span>    ,  <span class="hljs-number">0.</span>    , ...,  <span class="hljs-number">0.</span>    ,  <span class="hljs-number">0.</span>    ,  <span class="hljs-number">0.</span>    ],</span><br><span class="line">        [ <span class="hljs-number">0.</span>    ,  <span class="hljs-number">0.</span>    ,  <span class="hljs-number">0.</span>    , ...,  <span class="hljs-number">0.</span>    ,  <span class="hljs-number">0.</span>    ,  <span class="hljs-number">0.</span>    ],</span><br><span class="line">        [ <span class="hljs-number">0.</span>    ,  <span class="hljs-number">0.</span>    ,  <span class="hljs-number">0.</span>    , ...,  <span class="hljs-number">0.</span>    ,  <span class="hljs-number">0.</span>    ,  <span class="hljs-number">0.</span>    ]])</span><br></pre></td></tr></table></figure><p>内存映像可以使用前面介绍的结构化或嵌套dtype。</p><h2 id="HDF5及其他数组存储方式"><a href="#HDF5及其他数组存储方式" class="headerlink" title="HDF5及其他数组存储方式"></a>HDF5及其他数组存储方式</h2><p>PyTables和h5py这两个Python项目可以将NumPy的数组数据存储为高效且可压缩的HDF5格式（HDF意思是“层次化数据格式”）。你可以安全地将好几百GB甚至TB的数据存储为HDF5格式。要学习Python使用HDF5，请参考pandas线上文档。</p><h1 id="A-9-性能建议"><a href="#A-9-性能建议" class="headerlink" title="A.9 性能建议"></a>A.9 性能建议</h1><p>使用NumPy的代码的性能一般都很不错，因为数组运算一般都比纯Python循环快得多。下面大致列出了一些需要注意的事项：</p><ul><li>将Python循环和条件逻辑转换为数组运算和布尔数组运算。</li><li>尽量使用广播。</li><li>避免复制数据，尽量使用数组视图（即切片）。</li><li>利用ufunc及其各种方法。</li></ul><p>如果单用NumPy无论如何都达不到所需的性能指标，就可以考虑一下用C、Fortran或Cython（等下会稍微介绍一下）来编写代码。我自己在工作中经常会用到Cython（<a href="http://cython.org/" target="_blank" rel="noopener">http://cython.org</a>），因为它不用花费我太多精力就能得到C语言那样的性能。</p><h2 id="连续内存的重要性"><a href="#连续内存的重要性" class="headerlink" title="连续内存的重要性"></a>连续内存的重要性</h2><p>虽然这个话题有点超出本书的范围，但还是要提一下，因为在某些应用场景中，数组的内存布局可以对计算速度造成极大的影响。这是因为性能差别在一定程度上跟CPU的高速缓存（cache）体系有关。运算过程中访问连续内存块（例如，对以C顺序存储的数组的行求和）一般是最快的，因为内存子系统会将适当的内存块缓存到超高速的L1或L2CPU Cache中。此外，NumPy的C语言基础代码（某些）对连续存储的情况进行了优化处理，这样就能避免一些跨越式的内存访问。</p><p>一个数组的内存布局是连续的，就是说元素是以它们在数组中出现的顺序（即Fortran型（列优先）或C型（行优先））存储在内存中的。默认情况下，NumPy数组是以C型连续的方式创建的。列优先的数组（比如C型连续数组的转置）也被称为Fortran型连续。通过ndarray的flags属性即可查看这些信息：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">225</span>]: arr_c = np.ones((<span class="hljs-number">1000</span>, <span class="hljs-number">1000</span>), order=<span class="hljs-string">'C'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">226</span>]: arr_f = np.ones((<span class="hljs-number">1000</span>, <span class="hljs-number">1000</span>), order=<span class="hljs-string">'F'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">227</span>]: arr_c.flags</span><br><span class="line"></span><br><span class="line">Out[<span class="hljs-number">227</span>]: </span><br><span class="line">  C_CONTIGUOUS : <span class="hljs-literal">True</span></span><br><span class="line">  F_CONTIGUOUS : <span class="hljs-literal">False</span></span><br><span class="line">  OWNDATA : <span class="hljs-literal">True</span></span><br><span class="line">  WRITEABLE : <span class="hljs-literal">True</span></span><br><span class="line">  ALIGNED : <span class="hljs-literal">True</span></span><br><span class="line">  UPDATEIFCOPY : <span class="hljs-literal">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">228</span>]: arr_f.flags</span><br><span class="line">Out[<span class="hljs-number">228</span>]: </span><br><span class="line">  C_CONTIGUOUS : <span class="hljs-literal">False</span></span><br><span class="line">  F_CONTIGUOUS : <span class="hljs-literal">True</span></span><br><span class="line">  OWNDATA : <span class="hljs-literal">True</span></span><br><span class="line">  WRITEABLE : <span class="hljs-literal">True</span></span><br><span class="line">  ALIGNED : <span class="hljs-literal">True</span></span><br><span class="line">  UPDATEIFCOPY : <span class="hljs-literal">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">229</span>]: arr_f.flags.f_contiguous</span><br><span class="line">Out[<span class="hljs-number">229</span>]: <span class="hljs-literal">True</span></span><br></pre></td></tr></table></figure><p>在这个例子中，对两个数组的行进行求和计算，理论上说，arr_c会比arr_f快，因为arr_c的行在内存中是连续的。我们可以在IPython中用%timeit来确认一下：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">230</span>]: %timeit arr_c.sum(<span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-number">784</span> us +- <span class="hljs-number">10.4</span> us per loop (mean +- std. dev. of <span class="hljs-number">7</span> runs, <span class="hljs-number">1000</span> loops each)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">231</span>]: %timeit arr_f.sum(<span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-number">934</span> us +- <span class="hljs-number">29</span> us per loop (mean +- std. dev. of <span class="hljs-number">7</span> runs, <span class="hljs-number">1000</span> loops each)</span><br></pre></td></tr></table></figure><p>如果想从NumPy中提升性能，这里就应该是下手的地方。如果数组的内存顺序不符合你的要求，使用copy并传入’C’或’F’即可解决该问题：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">232</span>]: arr_f.copy(<span class="hljs-string">'C'</span>).flags</span><br><span class="line">Out[<span class="hljs-number">232</span>]: </span><br><span class="line">  C_CONTIGUOUS : <span class="hljs-literal">True</span></span><br><span class="line">  F_CONTIGUOUS : <span class="hljs-literal">False</span></span><br><span class="line">  OWNDATA : <span class="hljs-literal">True</span></span><br><span class="line">  WRITEABLE : <span class="hljs-literal">True</span></span><br><span class="line">  ALIGNED : <span class="hljs-literal">True</span></span><br><span class="line">  UPDATEIFCOPY : <span class="hljs-literal">False</span></span><br></pre></td></tr></table></figure><p>注意，在构造数组的视图时，其结果不一定是连续的：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">233</span>]: arr_c[:<span class="hljs-number">50</span>].flags.contiguous</span><br><span class="line">Out[<span class="hljs-number">233</span>]: <span class="hljs-literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">234</span>]: arr_c[:, :<span class="hljs-number">50</span>].flags</span><br><span class="line">Out[<span class="hljs-number">234</span>]: </span><br><span class="line">  C_CONTIGUOUS : <span class="hljs-literal">False</span></span><br><span class="line">  F_CONTIGUOUS : <span class="hljs-literal">False</span></span><br><span class="line">  OWNDATA : <span class="hljs-literal">False</span></span><br><span class="line">  WRITEABLE : <span class="hljs-literal">True</span></span><br><span class="line">  ALIGNED : <span class="hljs-literal">True</span></span><br><span class="line">  UPDATEIFCOPY : <span class="hljs-literal">False</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载自&lt;a href=&quot;https://www.jianshu.com/p/3c3f7da88516&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;../《利用Python进行数据分析·第2版》第1章%20准备工作&quot;&gt;第1章 准备工作&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第2章%20Python语法基础，IPython和Jupyter%20Notebooks&quot;&gt;第2章 Python语法基础，IPython和Jupyter Notebooks&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第3章%20Python的数据结构、函数和文件&quot;&gt;第3章 Python的数据结构、函数和文件&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第4章%20NumPy基础：数组和矢量计算&quot;&gt;第4章 NumPy基础：数组和矢量计算&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第5章%20pandas入门&quot;&gt;第5章 pandas入门&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第6章%20数据加载、存储与文件格式&quot;&gt;第6章 数据加载、存储与文件格式&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第7章%20数据清洗和准备&quot;&gt;第7章 数据清洗和准备&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第8章%20数据规整：聚合、合并和重塑&quot;&gt;第8章 数据规整：聚合、合并和重塑&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第9章%20绘图和可视化&quot;&gt;第9章 绘图和可视化&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第10章%20数据聚合与分组运算&quot;&gt;第10章 数据聚合与分组运算&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第11章%20时间序列&quot;&gt;第11章 时间序列&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第12章%20pandas高级应用&quot;&gt;第12章 pandas高级应用&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第13章%20Python建模库介绍&quot;&gt;第13章 Python建模库介绍&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第14章%20数据分析案例&quot;&gt;第14章 数据分析案例&lt;/a&gt;&lt;br&gt;附录A NumPy高级应用&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》附录B%20更多关于IPython的内容（完）&quot;&gt;附录B 更多关于IPython的内容（完）&lt;/a&gt;      &lt;/p&gt;
    
    </summary>
    
    
      <category term="数据分析" scheme="https://glanhoo.coding.me/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="https://glanhoo.coding.me/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="pandas" scheme="https://glanhoo.coding.me/tags/pandas/"/>
    
      <category term="python" scheme="https://glanhoo.coding.me/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>《利用Python进行数据分析·第2版》第14章 数据分析案例</title>
    <link href="https://glanhoo.coding.me/2019/11/05/%E3%80%8A%E5%88%A9%E7%94%A8Python%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%C2%B7%E7%AC%AC2%E7%89%88%E3%80%8B%E7%AC%AC14%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%A1%88%E4%BE%8B/"/>
    <id>https://glanhoo.coding.me/2019/11/05/%E3%80%8A%E5%88%A9%E7%94%A8Python%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%C2%B7%E7%AC%AC2%E7%89%88%E3%80%8B%E7%AC%AC14%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%A1%88%E4%BE%8B/</id>
    <published>2019-11-05T02:03:49.000Z</published>
    <updated>2019-12-11T02:21:37.993Z</updated>
    
    <content type="html"><![CDATA[<p>转载自<a href="https://www.jianshu.com/p/72b6c83bb69e" target="_blank" rel="noopener">简书</a></p><p><a href="../《利用Python进行数据分析·第2版》第1章%20准备工作">第1章 准备工作</a><br> <a href="../《利用Python进行数据分析·第2版》第2章%20Python语法基础，IPython和Jupyter%20Notebooks">第2章 Python语法基础，IPython和Jupyter Notebooks</a><br> <a href="../《利用Python进行数据分析·第2版》第3章%20Python的数据结构、函数和文件">第3章 Python的数据结构、函数和文件</a><br> <a href="../《利用Python进行数据分析·第2版》第4章%20NumPy基础：数组和矢量计算">第4章 NumPy基础：数组和矢量计算</a><br> <a href="../《利用Python进行数据分析·第2版》第5章%20pandas入门">第5章 pandas入门</a><br> <a href="../《利用Python进行数据分析·第2版》第6章%20数据加载、存储与文件格式">第6章 数据加载、存储与文件格式</a><br> <a href="../《利用Python进行数据分析·第2版》第7章%20数据清洗和准备">第7章 数据清洗和准备</a><br> <a href="../《利用Python进行数据分析·第2版》第8章%20数据规整：聚合、合并和重塑">第8章 数据规整：聚合、合并和重塑</a><br> <a href="../《利用Python进行数据分析·第2版》第9章%20绘图和可视化">第9章 绘图和可视化</a><br> <a href="../《利用Python进行数据分析·第2版》第10章%20数据聚合与分组运算">第10章 数据聚合与分组运算</a><br> <a href="../《利用Python进行数据分析·第2版》第11章%20时间序列">第11章 时间序列</a><br> <a href="../《利用Python进行数据分析·第2版》第12章%20pandas高级应用">第12章 pandas高级应用</a><br> <a href="../《利用Python进行数据分析·第2版》第13章%20Python建模库介绍">第13章 Python建模库介绍</a><br>第14章 数据分析案例<br> <a href="../《利用Python进行数据分析·第2版》附录A%20NumPy高级应用">附录A NumPy高级应用</a><br> <a href="../《利用Python进行数据分析·第2版》附录B%20更多关于IPython的内容（完）">附录B 更多关于IPython的内容（完）</a>      </p><a id="more"></a><hr><p>本书正文的最后一章，我们来看一些真实世界的数据集。对于每个数据集，我们会用之前介绍的方法，从原始数据中提取有意义的内容。展示的方法适用于其它数据集，也包括你的。本章包含了一些各种各样的案例数据集，可以用来练习。</p><p>案例数据集可以在Github仓库找到，见第一章。</p><h1 id="14-1-来自Bitly的USA-gov数据"><a href="#14-1-来自Bitly的USA-gov数据" class="headerlink" title="14.1 来自Bitly的USA.gov数据"></a>14.1 来自Bitly的USA.gov数据</h1><p>2011年，URL缩短服务Bitly跟美国政府网站USA.gov合作，提供了一份从生成.gov或.mil短链接的用户那里收集来的匿名数据。在2011年，除实时数据之外，还可以下载文本文件形式的每小时快照。写作此书时（2017年），这项服务已经关闭，但我们保存一份数据用于本书的案例。</p><p>以每小时快照为例，文件中各行的格式为JSON（即JavaScript Object Notation，这是一种常用的Web数据格式）。例如，如果我们只读取某个文件中的第一行，那么所看到的结果应该是下面这样：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">5</span>]: path = <span class="hljs-string">'datasets/bitly_usagov/example.txt'</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">6</span>]: open(path).readline()</span><br><span class="line">Out[<span class="hljs-number">6</span>]: <span class="hljs-string">'&#123; "a": "Mozilla\\/5.0 (Windows NT 6.1; WOW64) AppleWebKit\\/535.11</span></span><br><span class="line"><span class="hljs-string">(KHTML, like Gecko) Chrome\\/17.0.963.78 Safari\\/535.11", "c": "US", "nk": 1,</span></span><br><span class="line"><span class="hljs-string">"tz": "America\\/New_York", "gr": "MA", "g": "A6qOVH", "h": "wfLQtf", "l":</span></span><br><span class="line"><span class="hljs-string">"orofrog", "al": "en-US,en;q=0.8", "hh": "1.usa.gov", "r":</span></span><br><span class="line"><span class="hljs-string">"http:\\/\\/www.facebook.com\\/l\\/7AQEFzjSi\\/1.usa.gov\\/wfLQtf", "u":</span></span><br><span class="line"><span class="hljs-string">"http:\\/\\/www.ncbi.nlm.nih.gov\\/pubmed\\/22415991", "t": 1331923247, "hc":</span></span><br><span class="line"><span class="hljs-string">1331822918, "cy": "Danvers", "ll": [ 42.576698, -70.954903 ] &#125;\n'</span></span><br></pre></td></tr></table></figure><p>Python有内置或第三方模块可以将JSON字符串转换成Python字典对象。这里，我将使用json模块及其loads函数逐行加载已经下载好的数据文件：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> json</span><br><span class="line">path = <span class="hljs-string">'datasets/bitly_usagov/example.txt'</span></span><br><span class="line">records = [json.loads(line) <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> open(path)]</span><br></pre></td></tr></table></figure><p>现在，records对象就成为一组Python字典了：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">18</span>]: records[<span class="hljs-number">0</span>]</span><br><span class="line">Out[<span class="hljs-number">18</span>]:</span><br><span class="line">&#123;<span class="hljs-string">'a'</span>: <span class="hljs-string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko)</span></span><br><span class="line"><span class="hljs-string">Chrome/17.0.963.78 Safari/535.11'</span>,</span><br><span class="line"> <span class="hljs-string">'al'</span>: <span class="hljs-string">'en-US,en;q=0.8'</span>,</span><br><span class="line"> <span class="hljs-string">'c'</span>: <span class="hljs-string">'US'</span>,</span><br><span class="line"> <span class="hljs-string">'cy'</span>: <span class="hljs-string">'Danvers'</span>,</span><br><span class="line"> <span class="hljs-string">'g'</span>: <span class="hljs-string">'A6qOVH'</span>,</span><br><span class="line"> <span class="hljs-string">'gr'</span>: <span class="hljs-string">'MA'</span>,</span><br><span class="line"> <span class="hljs-string">'h'</span>: <span class="hljs-string">'wfLQtf'</span>,</span><br><span class="line"> <span class="hljs-string">'hc'</span>: <span class="hljs-number">1331822918</span>,</span><br><span class="line"> <span class="hljs-string">'hh'</span>: <span class="hljs-string">'1.usa.gov'</span>,</span><br><span class="line"> <span class="hljs-string">'l'</span>: <span class="hljs-string">'orofrog'</span>,</span><br><span class="line"> <span class="hljs-string">'ll'</span>: [<span class="hljs-number">42.576698</span>, <span class="hljs-number">-70.954903</span>],</span><br><span class="line"> <span class="hljs-string">'nk'</span>: <span class="hljs-number">1</span>,</span><br><span class="line"> <span class="hljs-string">'r'</span>: <span class="hljs-string">'http://www.facebook.com/l/7AQEFzjSi/1.usa.gov/wfLQtf'</span>,</span><br><span class="line"> <span class="hljs-string">'t'</span>: <span class="hljs-number">1331923247</span>,</span><br><span class="line"> <span class="hljs-string">'tz'</span>: <span class="hljs-string">'America/New_York'</span>,</span><br><span class="line"> <span class="hljs-string">'u'</span>: <span class="hljs-string">'http://www.ncbi.nlm.nih.gov/pubmed/22415991'</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="用纯Python代码对时区进行计数"><a href="#用纯Python代码对时区进行计数" class="headerlink" title="用纯Python代码对时区进行计数"></a>用纯Python代码对时区进行计数</h2><p>假设我们想要知道该数据集中最常出现的是哪个时区（即tz字段），得到答案的办法有很多。首先，我们用列表推导式取出一组时区：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">12</span>]: time_zones = [rec[<span class="hljs-string">'tz'</span>] <span class="hljs-keyword">for</span> rec <span class="hljs-keyword">in</span> records]</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">KeyError                                  Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="hljs-number">-12</span>-db4fbd348da9&gt; <span class="hljs-keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 time_zones = [rec['tz'] for rec in records]</span><br><span class="line">&lt;ipython-input<span class="hljs-number">-12</span>-db4fbd348da9&gt; <span class="hljs-keyword">in</span> &lt;listcomp&gt;(<span class="hljs-number">.0</span>)</span><br><span class="line">----&gt; 1 time_zones = [rec['tz'] for rec in records]</span><br><span class="line">KeyError: <span class="hljs-string">'tz'</span></span><br></pre></td></tr></table></figure><p>晕！原来并不是所有记录都有时区字段。这个好办，只需在列表推导式末尾加上一个if ‘tz’in rec判断即可：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">13</span>]: time_zones = [rec[<span class="hljs-string">'tz'</span>] <span class="hljs-keyword">for</span> rec <span class="hljs-keyword">in</span> records <span class="hljs-keyword">if</span> <span class="hljs-string">'tz'</span> <span class="hljs-keyword">in</span> rec]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">14</span>]: time_zones[:<span class="hljs-number">10</span>]</span><br><span class="line">Out[<span class="hljs-number">14</span>]: </span><br><span class="line">[<span class="hljs-string">'America/New_York'</span>,</span><br><span class="line"> <span class="hljs-string">'America/Denver'</span>,</span><br><span class="line"> <span class="hljs-string">'America/New_York'</span>,</span><br><span class="line"> <span class="hljs-string">'America/Sao_Paulo'</span>,</span><br><span class="line"> <span class="hljs-string">'America/New_York'</span>,</span><br><span class="line"> <span class="hljs-string">'America/New_York'</span>,</span><br><span class="line"> <span class="hljs-string">'Europe/Warsaw'</span>,</span><br><span class="line"> <span class="hljs-string">''</span>,</span><br><span class="line"> <span class="hljs-string">''</span>,</span><br><span class="line"> <span class="hljs-string">''</span>]</span><br></pre></td></tr></table></figure><p>只看前10个时区，我们发现有些是未知的（即空的）。虽然可以将它们过滤掉，但现在暂时先留着。接下来，为了对时区进行计数，这里介绍两个办法：一个较难（只使用标准Python库），另一个较简单（使用pandas）。计数的办法之一是在遍历时区的过程中将计数值保存在字典中：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_counts</span><span class="hljs-params">(sequence)</span>:</span></span><br><span class="line">    counts = &#123;&#125;</span><br><span class="line">    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> sequence:</span><br><span class="line">        <span class="hljs-keyword">if</span> x <span class="hljs-keyword">in</span> counts:</span><br><span class="line">            counts[x] += <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            counts[x] = <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">return</span> counts</span><br></pre></td></tr></table></figure><p>如果使用Python标准库的更高级工具，那么你可能会将代码写得更简洁一些：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_counts2</span><span class="hljs-params">(sequence)</span>:</span></span><br><span class="line">    counts = defaultdict(int) <span class="hljs-comment"># values will initialize to 0</span></span><br><span class="line">    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> sequence:</span><br><span class="line">        counts[x] += <span class="hljs-number">1</span></span><br><span class="line">    <span class="hljs-keyword">return</span> counts</span><br></pre></td></tr></table></figure><p>我将逻辑写到函数中是为了获得更高的复用性。要用它对时区进行处理，只需将time_zones传入即可：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">17</span>]: counts = get_counts(time_zones)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">18</span>]: counts[<span class="hljs-string">'America/New_York'</span>]</span><br><span class="line">Out[<span class="hljs-number">18</span>]: <span class="hljs-number">1251</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">19</span>]: len(time_zones)</span><br><span class="line">Out[<span class="hljs-number">19</span>]: <span class="hljs-number">3440</span></span><br></pre></td></tr></table></figure><p>如果想要得到前10位的时区及其计数值，我们需要用到一些有关字典的处理技巧：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">top_counts</span><span class="hljs-params">(count_dict, n=<span class="hljs-number">10</span>)</span>:</span></span><br><span class="line">    value_key_pairs = [(count, tz) <span class="hljs-keyword">for</span> tz, count <span class="hljs-keyword">in</span> count_dict.items()]</span><br><span class="line">    value_key_pairs.sort()</span><br><span class="line">    <span class="hljs-keyword">return</span> value_key_pairs[-n:]</span><br></pre></td></tr></table></figure><p>然后有：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">21</span>]: top_counts(counts)</span><br><span class="line">Out[<span class="hljs-number">21</span>]: </span><br><span class="line">[(<span class="hljs-number">33</span>, <span class="hljs-string">'America/Sao_Paulo'</span>),</span><br><span class="line"> (<span class="hljs-number">35</span>, <span class="hljs-string">'Europe/Madrid'</span>),</span><br><span class="line">(<span class="hljs-number">36</span>, <span class="hljs-string">'Pacific/Honolulu'</span>),</span><br><span class="line"> (<span class="hljs-number">37</span>, <span class="hljs-string">'Asia/Tokyo'</span>),</span><br><span class="line"> (<span class="hljs-number">74</span>, <span class="hljs-string">'Europe/London'</span>),</span><br><span class="line"> (<span class="hljs-number">191</span>, <span class="hljs-string">'America/Denver'</span>),</span><br><span class="line"> (<span class="hljs-number">382</span>, <span class="hljs-string">'America/Los_Angeles'</span>),</span><br><span class="line"> (<span class="hljs-number">400</span>, <span class="hljs-string">'America/Chicago'</span>),</span><br><span class="line"> (<span class="hljs-number">521</span>, <span class="hljs-string">''</span>),</span><br><span class="line"> (<span class="hljs-number">1251</span>, <span class="hljs-string">'America/New_York'</span>)]</span><br></pre></td></tr></table></figure><p>如果你搜索Python的标准库，你能找到collections.Counter类，它可以使这项工作更简单：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">22</span>]: <span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">23</span>]: counts = Counter(time_zones)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">24</span>]: counts.most_common(<span class="hljs-number">10</span>)</span><br><span class="line">Out[<span class="hljs-number">24</span>]: </span><br><span class="line">[(<span class="hljs-string">'America/New_York'</span>, <span class="hljs-number">1251</span>),</span><br><span class="line"> (<span class="hljs-string">''</span>, <span class="hljs-number">521</span>),</span><br><span class="line"> (<span class="hljs-string">'America/Chicago'</span>, <span class="hljs-number">400</span>),</span><br><span class="line"> (<span class="hljs-string">'America/Los_Angeles'</span>, <span class="hljs-number">382</span>),</span><br><span class="line"> (<span class="hljs-string">'America/Denver'</span>, <span class="hljs-number">191</span>),</span><br><span class="line"> (<span class="hljs-string">'Europe/London'</span>, <span class="hljs-number">74</span>),</span><br><span class="line"> (<span class="hljs-string">'Asia/Tokyo'</span>, <span class="hljs-number">37</span>),</span><br><span class="line"> (<span class="hljs-string">'Pacific/Honolulu'</span>, <span class="hljs-number">36</span>),</span><br><span class="line"> (<span class="hljs-string">'Europe/Madrid'</span>, <span class="hljs-number">35</span>),</span><br><span class="line"> (<span class="hljs-string">'America/Sao_Paulo'</span>, <span class="hljs-number">33</span>)]</span><br></pre></td></tr></table></figure><h2 id="用pandas对时区进行计数"><a href="#用pandas对时区进行计数" class="headerlink" title="用pandas对时区进行计数"></a>用pandas对时区进行计数</h2><p>从原始记录的集合创建DateFrame，与将记录列表传递到pandas.DataFrame一样简单：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">25</span>]: <span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">26</span>]: frame = pd.DataFrame(records)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">27</span>]: frame.info()</span><br><span class="line">&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> '<span class="hljs-title">pandas</span>.<span class="hljs-title">core</span>.<span class="hljs-title">frame</span>.<span class="hljs-title">DataFrame</span>'&gt;</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-title">RangeIndex</span>:</span> <span class="hljs-number">3560</span> entries, <span class="hljs-number">0</span> to <span class="hljs-number">3559</span></span><br><span class="line">Data columns (total <span class="hljs-number">18</span> columns):</span><br><span class="line">_heartbeat_    <span class="hljs-number">120</span> non-null float64</span><br><span class="line">a              <span class="hljs-number">3440</span> non-null object</span><br><span class="line">al             <span class="hljs-number">3094</span> non-null object</span><br><span class="line">c              <span class="hljs-number">2919</span> non-null object</span><br><span class="line">cy             <span class="hljs-number">2919</span> non-null object</span><br><span class="line">g              <span class="hljs-number">3440</span> non-null object</span><br><span class="line">gr             <span class="hljs-number">2919</span> non-null object</span><br><span class="line">h              <span class="hljs-number">3440</span> non-null object</span><br><span class="line">hc             <span class="hljs-number">3440</span> non-null float64</span><br><span class="line">hh             <span class="hljs-number">3440</span> non-null object</span><br><span class="line">kw             <span class="hljs-number">93</span> non-null object</span><br><span class="line">l              <span class="hljs-number">3440</span> non-null object</span><br><span class="line">ll             <span class="hljs-number">2919</span> non-null object</span><br><span class="line">nk             <span class="hljs-number">3440</span> non-null float64</span><br><span class="line">r              <span class="hljs-number">3440</span> non-null object</span><br><span class="line">t              <span class="hljs-number">3440</span> non-null float64</span><br><span class="line">tz             <span class="hljs-number">3440</span> non-null object</span><br><span class="line">u              <span class="hljs-number">3440</span> non-null object</span><br><span class="line">dtypes: float64(<span class="hljs-number">4</span>), object(<span class="hljs-number">14</span>)</span><br><span class="line">memory usage: <span class="hljs-number">500.7</span>+ KB</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">28</span>]: frame[<span class="hljs-string">'tz'</span>][:<span class="hljs-number">10</span>]</span><br><span class="line">Out[<span class="hljs-number">28</span>]: </span><br><span class="line"><span class="hljs-number">0</span>     America/New_York</span><br><span class="line"><span class="hljs-number">1</span>       America/Denver</span><br><span class="line"><span class="hljs-number">2</span>     America/New_York</span><br><span class="line"><span class="hljs-number">3</span>    America/Sao_Paulo</span><br><span class="line"><span class="hljs-number">4</span>     America/New_York</span><br><span class="line"><span class="hljs-number">5</span>     America/New_York</span><br><span class="line"><span class="hljs-number">6</span>        Europe/Warsaw</span><br><span class="line"><span class="hljs-number">7</span>                     </span><br><span class="line"><span class="hljs-number">8</span>                     </span><br><span class="line"><span class="hljs-number">9</span>                     </span><br><span class="line">Name: tz, dtype: object</span><br></pre></td></tr></table></figure><p>这里frame的输出形式是摘要视图（summary view），主要用于较大的DataFrame对象。我们然后可以对Series使用value_counts方法：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">29</span>]: tz_counts = frame[<span class="hljs-string">'tz'</span>].value_counts()</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">30</span>]: tz_counts[:<span class="hljs-number">10</span>]</span><br><span class="line">Out[<span class="hljs-number">30</span>]: </span><br><span class="line">America/New_York       <span class="hljs-number">1251</span></span><br><span class="line">                        <span class="hljs-number">521</span></span><br><span class="line">America/Chicago         <span class="hljs-number">400</span></span><br><span class="line">America/Los_Angeles     <span class="hljs-number">382</span></span><br><span class="line">America/Denver          <span class="hljs-number">191</span></span><br><span class="line">Europe/London            <span class="hljs-number">74</span></span><br><span class="line">Asia/Tokyo               <span class="hljs-number">37</span></span><br><span class="line">Pacific/Honolulu         <span class="hljs-number">36</span></span><br><span class="line">Europe/Madrid            <span class="hljs-number">35</span></span><br><span class="line">America/Sao_Paulo        <span class="hljs-number">33</span></span><br><span class="line">Name: tz, dtype: int64</span><br></pre></td></tr></table></figure><p>我们可以用matplotlib可视化这个数据。为此，我们先给记录中未知或缺失的时区填上一个替代值。fillna函数可以替换缺失值（NA），而未知值（空字符串）则可以通过布尔型数组索引加以替换：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">31</span>]: clean_tz = frame[<span class="hljs-string">'tz'</span>].fillna(<span class="hljs-string">'Missing'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">32</span>]: clean_tz[clean_tz == <span class="hljs-string">''</span>] = <span class="hljs-string">'Unknown'</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">33</span>]: tz_counts = clean_tz.value_counts()</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">34</span>]: tz_counts[:<span class="hljs-number">10</span>]</span><br><span class="line">Out[<span class="hljs-number">34</span>]: </span><br><span class="line">America/New_York       <span class="hljs-number">1251</span></span><br><span class="line">Unknown                 <span class="hljs-number">521</span></span><br><span class="line">America/Chicago         <span class="hljs-number">400</span></span><br><span class="line">America/Los_Angeles     <span class="hljs-number">382</span></span><br><span class="line">America/Denver          <span class="hljs-number">191</span></span><br><span class="line">Missing                 <span class="hljs-number">120</span></span><br><span class="line">Europe/London            <span class="hljs-number">74</span></span><br><span class="line">Asia/Tokyo               <span class="hljs-number">37</span></span><br><span class="line">Pacific/Honolulu         <span class="hljs-number">36</span></span><br><span class="line">Europe/Madrid            <span class="hljs-number">35</span></span><br><span class="line">Name: tz, dtype: int64</span><br></pre></td></tr></table></figure><p>此时，我们可以用seaborn包创建水平柱状图（结果见图14-1）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">36</span>]: <span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">37</span>]: subset = tz_counts[:<span class="hljs-number">10</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">38</span>]: sns.barplot(y=subset.index, x=subset.values)</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-aa267c1d399a78f0.webp" alt="img"></p><p>图14-1 usa.gov示例数据中最常出现的时区</p><p>a字段含有执行URL短缩操作的浏览器、设备、应用程序的相关信息：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">39</span>]: frame[<span class="hljs-string">'a'</span>][<span class="hljs-number">1</span>]</span><br><span class="line">Out[<span class="hljs-number">39</span>]: <span class="hljs-string">'GoogleMaps/RochesterNY'</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">40</span>]: frame[<span class="hljs-string">'a'</span>][<span class="hljs-number">50</span>]</span><br><span class="line">Out[<span class="hljs-number">40</span>]: <span class="hljs-string">'Mozilla/5.0 (Windows NT 5.1; rv:10.0.2)</span></span><br><span class="line"><span class="hljs-string">Gecko/20100101 Firefox/10.0.2'</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">41</span>]: frame[<span class="hljs-string">'a'</span>][<span class="hljs-number">51</span>][:<span class="hljs-number">50</span>]  <span class="hljs-comment"># long line</span></span><br><span class="line">Out[<span class="hljs-number">41</span>]: <span class="hljs-string">'Mozilla/5.0 (Linux; U; Android 2.2.2; en-us; LG-P9'</span></span><br></pre></td></tr></table></figure><p>将这些”agent”字符串中的所有信息都解析出来是一件挺郁闷的工作。一种策略是将这种字符串的第一节（与浏览器大致对应）分离出来并得到另外一份用户行为摘要：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">42</span>]: results = pd.Series([x.split()[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> frame.a.dropna()])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">43</span>]: results[:<span class="hljs-number">5</span>]</span><br><span class="line">Out[<span class="hljs-number">43</span>]: </span><br><span class="line"><span class="hljs-number">0</span>               Mozilla/<span class="hljs-number">5.0</span></span><br><span class="line"><span class="hljs-number">1</span>    GoogleMaps/RochesterNY</span><br><span class="line"><span class="hljs-number">2</span>               Mozilla/<span class="hljs-number">4.0</span></span><br><span class="line"><span class="hljs-number">3</span>               Mozilla/<span class="hljs-number">5.0</span></span><br><span class="line"><span class="hljs-number">4</span>               Mozilla/<span class="hljs-number">5.0</span></span><br><span class="line">dtype: object</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">44</span>]: results.value_counts()[:<span class="hljs-number">8</span>]</span><br><span class="line">Out[<span class="hljs-number">44</span>]: </span><br><span class="line">Mozilla/<span class="hljs-number">5.0</span>                 <span class="hljs-number">2594</span></span><br><span class="line">Mozilla/<span class="hljs-number">4.0</span>                  <span class="hljs-number">601</span></span><br><span class="line">GoogleMaps/RochesterNY       <span class="hljs-number">121</span></span><br><span class="line">Opera/<span class="hljs-number">9.80</span>                    <span class="hljs-number">34</span></span><br><span class="line">TEST_INTERNET_AGENT           <span class="hljs-number">24</span></span><br><span class="line">GoogleProducer                <span class="hljs-number">21</span></span><br><span class="line">Mozilla/<span class="hljs-number">6.0</span>                    <span class="hljs-number">5</span></span><br><span class="line">BlackBerry8520/<span class="hljs-number">5.0</span><span class="hljs-number">.0</span><span class="hljs-number">.681</span>       <span class="hljs-number">4</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><p>现在，假设你想按Windows和非Windows用户对时区统计信息进行分解。为了简单起见，我们假定只要agent字符串中含有”Windows”就认为该用户为Windows用户。由于有的agent缺失，所以首先将它们从数据中移除：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">45</span>]: cframe = frame[frame.a.notnull()]</span><br></pre></td></tr></table></figure><p>然后计算出各行是否含有Windows的值：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">47</span>]: cframe[<span class="hljs-string">'os'</span>] = np.where(cframe[<span class="hljs-string">'a'</span>].str.contains(<span class="hljs-string">'Windows'</span>),</span><br><span class="line">   ....:                         <span class="hljs-string">'Windows'</span>, <span class="hljs-string">'Not Windows'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">48</span>]: cframe[<span class="hljs-string">'os'</span>][:<span class="hljs-number">5</span>]</span><br><span class="line">Out[<span class="hljs-number">48</span>]: </span><br><span class="line"><span class="hljs-number">0</span>        Windows</span><br><span class="line"><span class="hljs-number">1</span>    Not Windows</span><br><span class="line"><span class="hljs-number">2</span>        Windows</span><br><span class="line"><span class="hljs-number">3</span>    Not Windows</span><br><span class="line"><span class="hljs-number">4</span>        Windows</span><br><span class="line">Name: os, dtype: object</span><br></pre></td></tr></table></figure><p>接下来就可以根据时区和新得到的操作系统列表对数据进行分组了：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">49</span>]: by_tz_os = cframe.groupby([<span class="hljs-string">'tz'</span>, <span class="hljs-string">'os'</span>])</span><br></pre></td></tr></table></figure><p>分组计数，类似于value_counts函数，可以用size来计算。并利用unstack对计数结果进行重塑：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">50</span>]: agg_counts = by_tz_os.size().unstack().fillna(<span class="hljs-number">0</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">51</span>]: agg_counts[:<span class="hljs-number">10</span>]</span><br><span class="line">Out[<span class="hljs-number">51</span>]: </span><br><span class="line">os                              Not Windows  Windows</span><br><span class="line">tz                                                  </span><br><span class="line">                                      <span class="hljs-number">245.0</span>    <span class="hljs-number">276.0</span></span><br><span class="line">Africa/Cairo                            <span class="hljs-number">0.0</span>      <span class="hljs-number">3.0</span></span><br><span class="line">Africa/Casablanca                       <span class="hljs-number">0.0</span>      <span class="hljs-number">1.0</span></span><br><span class="line">Africa/Ceuta                            <span class="hljs-number">0.0</span>      <span class="hljs-number">2.0</span></span><br><span class="line">Africa/Johannesburg                     <span class="hljs-number">0.0</span>      <span class="hljs-number">1.0</span></span><br><span class="line">Africa/Lusaka                           <span class="hljs-number">0.0</span>      <span class="hljs-number">1.0</span></span><br><span class="line">America/Anchorage                       <span class="hljs-number">4.0</span>      <span class="hljs-number">1.0</span></span><br><span class="line">America/Argentina/Buenos_Aires          <span class="hljs-number">1.0</span>      <span class="hljs-number">0.0</span></span><br><span class="line">America/Argentina/Cordoba               <span class="hljs-number">0.0</span>      <span class="hljs-number">1.0</span></span><br><span class="line">America/Argentina/Mendoza               <span class="hljs-number">0.0</span>      <span class="hljs-number">1.0</span></span><br></pre></td></tr></table></figure><p>最后，我们来选取最常出现的时区。为了达到这个目的，我根据agg_counts中的行数构造了一个间接索引数组：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># Use to sort in ascending order</span></span><br><span class="line">In [<span class="hljs-number">52</span>]: indexer = agg_counts.sum(<span class="hljs-number">1</span>).argsort()</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">53</span>]: indexer[:<span class="hljs-number">10</span>]</span><br><span class="line">Out[<span class="hljs-number">53</span>]: </span><br><span class="line">tz</span><br><span class="line">                                  <span class="hljs-number">24</span></span><br><span class="line">Africa/Cairo                      <span class="hljs-number">20</span></span><br><span class="line">Africa/Casablanca                 <span class="hljs-number">21</span></span><br><span class="line">Africa/Ceuta                      <span class="hljs-number">92</span></span><br><span class="line">Africa/Johannesburg               <span class="hljs-number">87</span></span><br><span class="line">Africa/Lusaka                     <span class="hljs-number">53</span></span><br><span class="line">America/Anchorage                 <span class="hljs-number">54</span></span><br><span class="line">America/Argentina/Buenos_Aires    <span class="hljs-number">57</span></span><br><span class="line">America/Argentina/Cordoba         <span class="hljs-number">26</span></span><br><span class="line">America/Argentina/Mendoza         <span class="hljs-number">55</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><p>然后我通过take按照这个顺序截取了最后10行最大值：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">54</span>]: count_subset = agg_counts.take(indexer[<span class="hljs-number">-10</span>:])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">55</span>]: count_subset</span><br><span class="line">Out[<span class="hljs-number">55</span>]: </span><br><span class="line">os                   Not Windows  Windows</span><br><span class="line">tz                                       </span><br><span class="line">America/Sao_Paulo           <span class="hljs-number">13.0</span>     <span class="hljs-number">20.0</span></span><br><span class="line">Europe/Madrid               <span class="hljs-number">16.0</span>     <span class="hljs-number">19.0</span></span><br><span class="line">Pacific/Honolulu             <span class="hljs-number">0.0</span>     <span class="hljs-number">36.0</span></span><br><span class="line">Asia/Tokyo                   <span class="hljs-number">2.0</span>     <span class="hljs-number">35.0</span></span><br><span class="line">Europe/London               <span class="hljs-number">43.0</span>     <span class="hljs-number">31.0</span></span><br><span class="line">America/Denver             <span class="hljs-number">132.0</span>     <span class="hljs-number">59.0</span></span><br><span class="line">America/Los_Angeles        <span class="hljs-number">130.0</span>    <span class="hljs-number">252.0</span></span><br><span class="line">America/Chicago            <span class="hljs-number">115.0</span>    <span class="hljs-number">285.0</span></span><br><span class="line">                           <span class="hljs-number">245.0</span>    <span class="hljs-number">276.0</span></span><br><span class="line">America/New_York           <span class="hljs-number">339.0</span>    <span class="hljs-number">912.0</span></span><br></pre></td></tr></table></figure><p>pandas有一个简便方法nlargest，可以做同样的工作：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">56</span>]: agg_counts.sum(<span class="hljs-number">1</span>).nlargest(<span class="hljs-number">10</span>)</span><br><span class="line">Out[<span class="hljs-number">56</span>]: </span><br><span class="line">tz</span><br><span class="line">America/New_York       <span class="hljs-number">1251.0</span></span><br><span class="line">                        <span class="hljs-number">521.0</span></span><br><span class="line">America/Chicago         <span class="hljs-number">400.0</span></span><br><span class="line">America/Los_Angeles     <span class="hljs-number">382.0</span></span><br><span class="line">America/Denver          <span class="hljs-number">191.0</span></span><br><span class="line">Europe/London            <span class="hljs-number">74.0</span></span><br><span class="line">Asia/Tokyo               <span class="hljs-number">37.0</span></span><br><span class="line">Pacific/Honolulu         <span class="hljs-number">36.0</span></span><br><span class="line">Europe/Madrid            <span class="hljs-number">35.0</span></span><br><span class="line">America/Sao_Paulo        <span class="hljs-number">33.0</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><p>然后，如这段代码所示，可以用柱状图表示。我传递一个额外参数到seaborn的barpolt函数，来画一个堆积条形图（见图14-2）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># Rearrange the data for plotting</span></span><br><span class="line">In [<span class="hljs-number">58</span>]: count_subset = count_subset.stack()</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">59</span>]: count_subset.name = <span class="hljs-string">'total'</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">60</span>]: count_subset = count_subset.reset_index()</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">61</span>]: count_subset[:<span class="hljs-number">10</span>]</span><br><span class="line">Out[<span class="hljs-number">61</span>]: </span><br><span class="line">                  tz           os  total</span><br><span class="line"><span class="hljs-number">0</span>  America/Sao_Paulo  Not Windows   <span class="hljs-number">13.0</span></span><br><span class="line"><span class="hljs-number">1</span>  America/Sao_Paulo      Windows   <span class="hljs-number">20.0</span></span><br><span class="line"><span class="hljs-number">2</span>      Europe/Madrid  Not Windows   <span class="hljs-number">16.0</span></span><br><span class="line"><span class="hljs-number">3</span>      Europe/Madrid      Windows   <span class="hljs-number">19.0</span></span><br><span class="line"><span class="hljs-number">4</span>   Pacific/Honolulu  Not Windows    <span class="hljs-number">0.0</span></span><br><span class="line"><span class="hljs-number">5</span>   Pacific/Honolulu      Windows   <span class="hljs-number">36.0</span></span><br><span class="line"><span class="hljs-number">6</span>         Asia/Tokyo  Not Windows    <span class="hljs-number">2.0</span></span><br><span class="line"><span class="hljs-number">7</span>         Asia/Tokyo      Windows   <span class="hljs-number">35.0</span></span><br><span class="line"><span class="hljs-number">8</span>      Europe/London  Not Windows   <span class="hljs-number">43.0</span></span><br><span class="line"><span class="hljs-number">9</span>      Europe/London      Windows   <span class="hljs-number">31.0</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">62</span>]: sns.barplot(x=<span class="hljs-string">'total'</span>, y=<span class="hljs-string">'tz'</span>, hue=<span class="hljs-string">'os'</span>,  data=count_subset)</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-053612a5655b68d9.webp" alt="img"></p><p>图14-2 最常出现时区的Windows和非Windows用户</p><p>这张图不容易看出Windows用户在小分组中的相对比例，因此标准化分组百分比之和为1：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">norm_total</span><span class="hljs-params">(group)</span>:</span></span><br><span class="line">    group[<span class="hljs-string">'normed_total'</span>] = group.total / group.total.sum()</span><br><span class="line">    <span class="hljs-keyword">return</span> group</span><br><span class="line"></span><br><span class="line">results = count_subset.groupby(<span class="hljs-string">'tz'</span>).apply(norm_total)</span><br></pre></td></tr></table></figure><p>再次画图，见图14-3：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">65</span>]: sns.barplot(x=<span class="hljs-string">'normed_total'</span>, y=<span class="hljs-string">'tz'</span>, hue=<span class="hljs-string">'os'</span>,  data=results)</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-60ee355801daf412.webp" alt="img"></p><p>图14-3 最常出现时区的Windows和非Windows用户的百分比</p><p>我们还可以用groupby的transform方法，更高效的计算标准化的和：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">66</span>]: g = count_subset.groupby(<span class="hljs-string">'tz'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">67</span>]: results2 = count_subset.total / g.total.transform(<span class="hljs-string">'sum'</span>)</span><br></pre></td></tr></table></figure><h1 id="14-2-MovieLens-1M数据集"><a href="#14-2-MovieLens-1M数据集" class="headerlink" title="14.2 MovieLens 1M数据集"></a>14.2 MovieLens 1M数据集</h1><p>GroupLens Research（<a href="http://www.grouplens.org/node/73）采集了一组从20世纪90年末到21世纪初由MovieLens用户提供的电影评分数据。这些数据中包括电影评分、电影元数据（风格类型和年代）以及关于用户的人口统计学数据（年龄、邮编、性别和职业等）。基于机器学习算法的推荐系统一般都会对此类数据感兴趣。虽然我不会在本书中详细介绍机器学习技术，但我会告诉你如何对这种数据进行切片切块以满足实际需求。" target="_blank" rel="noopener">http://www.grouplens.org/node/73）采集了一组从20世纪90年末到21世纪初由MovieLens用户提供的电影评分数据。这些数据中包括电影评分、电影元数据（风格类型和年代）以及关于用户的人口统计学数据（年龄、邮编、性别和职业等）。基于机器学习算法的推荐系统一般都会对此类数据感兴趣。虽然我不会在本书中详细介绍机器学习技术，但我会告诉你如何对这种数据进行切片切块以满足实际需求。</a></p><p>MovieLens 1M数据集含有来自6000名用户对4000部电影的100万条评分数据。它分为三个表：评分、用户信息和电影信息。将该数据从zip文件中解压出来之后，可以通过pandas.read_table将各个表分别读到一个pandas DataFrame对象中：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Make display smaller</span></span><br><span class="line">pd.options.display.max_rows = <span class="hljs-number">10</span></span><br><span class="line"></span><br><span class="line">unames = [<span class="hljs-string">'user_id'</span>, <span class="hljs-string">'gender'</span>, <span class="hljs-string">'age'</span>, <span class="hljs-string">'occupation'</span>, <span class="hljs-string">'zip'</span>]</span><br><span class="line">users = pd.read_table(<span class="hljs-string">'datasets/movielens/users.dat'</span>, sep=<span class="hljs-string">'::'</span>,</span><br><span class="line">                      header=<span class="hljs-literal">None</span>, names=unames)</span><br><span class="line"></span><br><span class="line">rnames = [<span class="hljs-string">'user_id'</span>, <span class="hljs-string">'movie_id'</span>, <span class="hljs-string">'rating'</span>, <span class="hljs-string">'timestamp'</span>]</span><br><span class="line">ratings = pd.read_table(<span class="hljs-string">'datasets/movielens/ratings.dat'</span>, sep=<span class="hljs-string">'::'</span>,</span><br><span class="line">                        header=<span class="hljs-literal">None</span>, names=rnames)</span><br><span class="line">mnames = [<span class="hljs-string">'movie_id'</span>, <span class="hljs-string">'title'</span>, <span class="hljs-string">'genres'</span>]</span><br><span class="line">movies = pd.read_table(<span class="hljs-string">'datasets/movielens/movies.dat'</span>, sep=<span class="hljs-string">'::'</span>,</span><br><span class="line">                       header=<span class="hljs-literal">None</span>, names=mnames)</span><br></pre></td></tr></table></figure><p>利用Python的切片语法，通过查看每个DataFrame的前几行即可验证数据加载工作是否一切顺利：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">69</span>]: users[:<span class="hljs-number">5</span>]</span><br><span class="line">Out[<span class="hljs-number">69</span>]: </span><br><span class="line">   user_id gender  age  occupation    zip</span><br><span class="line"><span class="hljs-number">0</span>        <span class="hljs-number">1</span>      F    <span class="hljs-number">1</span>          <span class="hljs-number">10</span>  <span class="hljs-number">48067</span></span><br><span class="line"><span class="hljs-number">1</span>        <span class="hljs-number">2</span>      M   <span class="hljs-number">56</span>          <span class="hljs-number">16</span>  <span class="hljs-number">70072</span></span><br><span class="line"><span class="hljs-number">2</span>        <span class="hljs-number">3</span>      M   <span class="hljs-number">25</span>          <span class="hljs-number">15</span>  <span class="hljs-number">55117</span></span><br><span class="line"><span class="hljs-number">3</span>        <span class="hljs-number">4</span>      M   <span class="hljs-number">45</span>           <span class="hljs-number">7</span>  <span class="hljs-number">02460</span></span><br><span class="line"><span class="hljs-number">4</span>        <span class="hljs-number">5</span>      M   <span class="hljs-number">25</span>          <span class="hljs-number">20</span>  <span class="hljs-number">55455</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">70</span>]: ratings[:<span class="hljs-number">5</span>]</span><br><span class="line">Out[<span class="hljs-number">70</span>]: </span><br><span class="line">   user_id  movie_id  rating  timestamp</span><br><span class="line"><span class="hljs-number">0</span>        <span class="hljs-number">1</span>      <span class="hljs-number">1193</span>       <span class="hljs-number">5</span>  <span class="hljs-number">978300760</span></span><br><span class="line"><span class="hljs-number">1</span>        <span class="hljs-number">1</span>       <span class="hljs-number">661</span>       <span class="hljs-number">3</span>  <span class="hljs-number">978302109</span></span><br><span class="line"><span class="hljs-number">2</span>        <span class="hljs-number">1</span>       <span class="hljs-number">914</span>       <span class="hljs-number">3</span>  <span class="hljs-number">978301968</span></span><br><span class="line"><span class="hljs-number">3</span>        <span class="hljs-number">1</span>      <span class="hljs-number">3408</span>       <span class="hljs-number">4</span>  <span class="hljs-number">978300275</span></span><br><span class="line"><span class="hljs-number">4</span>        <span class="hljs-number">1</span>      <span class="hljs-number">2355</span>       <span class="hljs-number">5</span>  <span class="hljs-number">978824291</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">71</span>]: movies[:<span class="hljs-number">5</span>]</span><br><span class="line">Out[<span class="hljs-number">71</span>]: </span><br><span class="line">   movie_id                               title                        genres</span><br><span class="line"><span class="hljs-number">0</span>         <span class="hljs-number">1</span>                    Toy Story (<span class="hljs-number">1995</span>)   Animation|Children<span class="hljs-string">'s|Comedy</span></span><br><span class="line"><span class="hljs-string">1         2                      Jumanji (1995)  Adventure|Children'</span>s|Fantasy</span><br><span class="line"><span class="hljs-number">2</span>         <span class="hljs-number">3</span>             Grumpier Old Men (<span class="hljs-number">1995</span>)                Comedy|Romance</span><br><span class="line"><span class="hljs-number">3</span>         <span class="hljs-number">4</span>            Waiting to Exhale (<span class="hljs-number">1995</span>)                  Comedy|Drama</span><br><span class="line"><span class="hljs-number">4</span>         <span class="hljs-number">5</span>  Father of the Bride Part II (<span class="hljs-number">1995</span>)                        Comedy</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">72</span>]: ratings</span><br><span class="line">Out[<span class="hljs-number">72</span>]: </span><br><span class="line">         user_id  movie_id  rating  timestamp</span><br><span class="line"><span class="hljs-number">0</span>              <span class="hljs-number">1</span>      <span class="hljs-number">1193</span>       <span class="hljs-number">5</span>  <span class="hljs-number">978300760</span></span><br><span class="line"><span class="hljs-number">1</span>              <span class="hljs-number">1</span>       <span class="hljs-number">661</span>       <span class="hljs-number">3</span>  <span class="hljs-number">978302109</span></span><br><span class="line"><span class="hljs-number">2</span>              <span class="hljs-number">1</span>       <span class="hljs-number">914</span>       <span class="hljs-number">3</span>  <span class="hljs-number">978301968</span></span><br><span class="line"><span class="hljs-number">3</span>              <span class="hljs-number">1</span>      <span class="hljs-number">3408</span>       <span class="hljs-number">4</span>  <span class="hljs-number">978300275</span></span><br><span class="line"><span class="hljs-number">4</span>              <span class="hljs-number">1</span>      <span class="hljs-number">2355</span>       <span class="hljs-number">5</span>  <span class="hljs-number">978824291</span></span><br><span class="line"><span class="hljs-meta">... </span>         ...       ...     ...        ...</span><br><span class="line"><span class="hljs-number">1000204</span>     <span class="hljs-number">6040</span>      <span class="hljs-number">1091</span>       <span class="hljs-number">1</span>  <span class="hljs-number">956716541</span></span><br><span class="line"><span class="hljs-number">1000205</span>     <span class="hljs-number">6040</span>      <span class="hljs-number">1094</span>       <span class="hljs-number">5</span>  <span class="hljs-number">956704887</span></span><br><span class="line"><span class="hljs-number">1000206</span>     <span class="hljs-number">6040</span>       <span class="hljs-number">562</span>       <span class="hljs-number">5</span>  <span class="hljs-number">956704746</span></span><br><span class="line"><span class="hljs-number">1000207</span>     <span class="hljs-number">6040</span>      <span class="hljs-number">1096</span>       <span class="hljs-number">4</span>  <span class="hljs-number">956715648</span></span><br><span class="line"><span class="hljs-number">1000208</span>     <span class="hljs-number">6040</span>      <span class="hljs-number">1097</span>       <span class="hljs-number">4</span>  <span class="hljs-number">956715569</span></span><br><span class="line">[<span class="hljs-number">1000209</span> rows x <span class="hljs-number">4</span> columns]</span><br></pre></td></tr></table></figure><p>注意，其中的年龄和职业是以编码形式给出的，它们的具体含义请参考该数据集的README文件。分析散布在三个表中的数据可不是一件轻松的事情。假设我们想要根据性别和年龄计算某部电影的平均得分，如果将所有数据都合并到一个表中的话问题就简单多了。我们先用pandas的merge函数将ratings跟users合并到一起，然后再将movies也合并进去。pandas会根据列名的重叠情况推断出哪些列是合并（或连接）键：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">73</span>]: data = pd.merge(pd.merge(ratings, users), movies)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">74</span>]: data</span><br><span class="line">Out[<span class="hljs-number">74</span>]: </span><br><span class="line">         user_id  movie_id  rating  timestamp gender  age  occupation    zip  \</span><br><span class="line"><span class="hljs-number">0</span>              <span class="hljs-number">1</span>      <span class="hljs-number">1193</span>       <span class="hljs-number">5</span>  <span class="hljs-number">978300760</span>      F    <span class="hljs-number">1</span>          <span class="hljs-number">10</span>  <span class="hljs-number">48067</span>   </span><br><span class="line"><span class="hljs-number">1</span>              <span class="hljs-number">2</span>      <span class="hljs-number">1193</span>       <span class="hljs-number">5</span>  <span class="hljs-number">978298413</span>      M   <span class="hljs-number">56</span>          <span class="hljs-number">16</span>  <span class="hljs-number">70072</span>   </span><br><span class="line"><span class="hljs-number">2</span>             <span class="hljs-number">12</span>      <span class="hljs-number">1193</span>       <span class="hljs-number">4</span>  <span class="hljs-number">978220179</span>      M   <span class="hljs-number">25</span>          <span class="hljs-number">12</span>  <span class="hljs-number">32793</span>   </span><br><span class="line"><span class="hljs-number">3</span>             <span class="hljs-number">15</span>      <span class="hljs-number">1193</span>       <span class="hljs-number">4</span>  <span class="hljs-number">978199279</span>      M   <span class="hljs-number">25</span>           <span class="hljs-number">7</span>  <span class="hljs-number">22903</span>   </span><br><span class="line"><span class="hljs-number">4</span>             <span class="hljs-number">17</span>      <span class="hljs-number">1193</span>       <span class="hljs-number">5</span>  <span class="hljs-number">978158471</span>      M   <span class="hljs-number">50</span>           <span class="hljs-number">1</span>  <span class="hljs-number">95350</span>   </span><br><span class="line"><span class="hljs-meta">... </span>         ...       ...     ...        ...    ...  ...         ...    ...   </span><br><span class="line"><span class="hljs-number">1000204</span>     <span class="hljs-number">5949</span>      <span class="hljs-number">2198</span>       <span class="hljs-number">5</span>  <span class="hljs-number">958846401</span>      M   <span class="hljs-number">18</span>          <span class="hljs-number">17</span>  <span class="hljs-number">47901</span></span><br><span class="line"><span class="hljs-number">1000205</span>     <span class="hljs-number">5675</span>      <span class="hljs-number">2703</span>       <span class="hljs-number">3</span>  <span class="hljs-number">976029116</span>      M   <span class="hljs-number">35</span>          <span class="hljs-number">14</span>  <span class="hljs-number">30030</span>   </span><br><span class="line"><span class="hljs-number">1000206</span>     <span class="hljs-number">5780</span>      <span class="hljs-number">2845</span>       <span class="hljs-number">1</span>  <span class="hljs-number">958153068</span>      M   <span class="hljs-number">18</span>          <span class="hljs-number">17</span>  <span class="hljs-number">92886</span>   </span><br><span class="line"><span class="hljs-number">1000207</span>     <span class="hljs-number">5851</span>      <span class="hljs-number">3607</span>       <span class="hljs-number">5</span>  <span class="hljs-number">957756608</span>      F   <span class="hljs-number">18</span>          <span class="hljs-number">20</span>  <span class="hljs-number">55410</span>   </span><br><span class="line"><span class="hljs-number">1000208</span>     <span class="hljs-number">5938</span>      <span class="hljs-number">2909</span>       <span class="hljs-number">4</span>  <span class="hljs-number">957273353</span>      M   <span class="hljs-number">25</span>           <span class="hljs-number">1</span>  <span class="hljs-number">35401</span>   </span><br><span class="line">                                               title                genres  </span><br><span class="line"><span class="hljs-number">0</span>             One Flew Over the Cuckoo<span class="hljs-string">'s Nest (1975)                 Drama  </span></span><br><span class="line"><span class="hljs-string">1             One Flew Over the Cuckoo'</span>s Nest (<span class="hljs-number">1975</span>)                 Drama  </span><br><span class="line"><span class="hljs-number">2</span>             One Flew Over the Cuckoo<span class="hljs-string">'s Nest (1975)                 Drama  </span></span><br><span class="line"><span class="hljs-string">3             One Flew Over the Cuckoo'</span>s Nest (<span class="hljs-number">1975</span>)                 Drama  </span><br><span class="line"><span class="hljs-number">4</span>             One Flew Over the Cuckoo<span class="hljs-string">'s Nest (1975)                 Drama  </span></span><br><span class="line"><span class="hljs-string">...                                              ...                   ...  </span></span><br><span class="line"><span class="hljs-string">1000204                           Modulations (1998)           Documentary  </span></span><br><span class="line"><span class="hljs-string">1000205                        Broken Vessels (1998)                 Drama  </span></span><br><span class="line"><span class="hljs-string">1000206                            White Boys (1999)                 Drama  </span></span><br><span class="line"><span class="hljs-string">1000207                     One Little Indian (1973)  Comedy|Drama|Western  </span></span><br><span class="line"><span class="hljs-string">1000208  Five Wives, Three Secretaries and Me (1998)           Documentary  </span></span><br><span class="line"><span class="hljs-string">[1000209 rows x 10 columns]</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">In [75]: data.iloc[0]</span></span><br><span class="line"><span class="hljs-string">Out[75]: </span></span><br><span class="line"><span class="hljs-string">user_id                                            1</span></span><br><span class="line"><span class="hljs-string">movie_id                                        1193</span></span><br><span class="line"><span class="hljs-string">rating                                             5</span></span><br><span class="line"><span class="hljs-string">timestamp                                  978300760</span></span><br><span class="line"><span class="hljs-string">gender                                             F</span></span><br><span class="line"><span class="hljs-string">age                                                1</span></span><br><span class="line"><span class="hljs-string">occupation                                        10</span></span><br><span class="line"><span class="hljs-string">zip                                            48067</span></span><br><span class="line"><span class="hljs-string">title         One Flew Over the Cuckoo'</span>s Nest (<span class="hljs-number">1975</span>)</span><br><span class="line">genres                                         Drama</span><br><span class="line">Name: <span class="hljs-number">0</span>, dtype: object</span><br></pre></td></tr></table></figure><p>为了按性别计算每部电影的平均得分，我们可以使用pivot_table方法：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">76</span>]: mean_ratings = data.pivot_table(<span class="hljs-string">'rating'</span>, index=<span class="hljs-string">'title'</span>,</span><br><span class="line">   ....:                                 columns=<span class="hljs-string">'gender'</span>, aggfunc=<span class="hljs-string">'mean'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">77</span>]: mean_ratings[:<span class="hljs-number">5</span>]</span><br><span class="line">Out[<span class="hljs-number">77</span>]: </span><br><span class="line">gender                                F         M</span><br><span class="line">title                                            </span><br><span class="line">$<span class="hljs-number">1</span>,<span class="hljs-number">000</span>,<span class="hljs-number">000</span> Duck (<span class="hljs-number">1971</span>)         <span class="hljs-number">3.375000</span>  <span class="hljs-number">2.761905</span></span><br><span class="line"><span class="hljs-string">'Night Mother (1986)           3.388889  3.352941</span></span><br><span class="line"><span class="hljs-string">'</span>Til There Was You (<span class="hljs-number">1997</span>)      <span class="hljs-number">2.675676</span>  <span class="hljs-number">2.733333</span></span><br><span class="line"><span class="hljs-string">'burbs, The (1989)             2.793478  2.962085</span></span><br><span class="line"><span class="hljs-string">...And Justice for All (1979)  3.828571  3.689024</span></span><br></pre></td></tr></table></figure><p>该操作产生了另一个DataFrame，其内容为电影平均得分，行标为电影名称（索引），列标为性别。现在，我打算过滤掉评分数据不够250条的电影（随便选的一个数字）。为了达到这个目的，我先对title进行分组，然后利用size()得到一个含有各电影分组大小的Series对象：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">78</span>]: ratings_by_title = data.groupby(<span class="hljs-string">'title'</span>).size()</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">79</span>]: ratings_by_title[:<span class="hljs-number">10</span>]</span><br><span class="line">Out[<span class="hljs-number">79</span>]: </span><br><span class="line">title</span><br><span class="line">$<span class="hljs-number">1</span>,<span class="hljs-number">000</span>,<span class="hljs-number">000</span> Duck (<span class="hljs-number">1971</span>)                <span class="hljs-number">37</span></span><br><span class="line"><span class="hljs-string">'Night Mother (1986)                  70</span></span><br><span class="line"><span class="hljs-string">'</span>Til There Was You (<span class="hljs-number">1997</span>)             <span class="hljs-number">52</span></span><br><span class="line"><span class="hljs-string">'burbs, The (1989)                   303</span></span><br><span class="line"><span class="hljs-string">...And Justice for All (1979)        199</span></span><br><span class="line"><span class="hljs-string">1-900 (1994)                           2</span></span><br><span class="line"><span class="hljs-string">10 Things I Hate About You (1999)    700</span></span><br><span class="line"><span class="hljs-string">101 Dalmatians (1961)                565</span></span><br><span class="line"><span class="hljs-string">101 Dalmatians (1996)                364</span></span><br><span class="line"><span class="hljs-string">12 Angry Men (1957)                  616</span></span><br><span class="line"><span class="hljs-string">dtype: int64</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">In [80]: active_titles = ratings_by_title.index[ratings_by_title &gt;= 250]</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">In [81]: active_titles</span></span><br><span class="line"><span class="hljs-string">Out[81]: </span></span><br><span class="line"><span class="hljs-string">Index(['</span><span class="hljs-string">'burbs, The (1989)'</span>, <span class="hljs-string">'10 Things I Hate About You (1999)'</span>,</span><br><span class="line">       <span class="hljs-string">'101 Dalmatians (1961)'</span>, <span class="hljs-string">'101 Dalmatians (1996)'</span>, <span class="hljs-string">'12 Angry Men (1957)'</span>,</span><br><span class="line">       <span class="hljs-string">'13th Warrior, The (1999)'</span>, <span class="hljs-string">'2 Days in the Valley (1996)'</span>,</span><br><span class="line">       <span class="hljs-string">'20,000 Leagues Under the Sea (1954)'</span>, <span class="hljs-string">'2001: A Space Odyssey (1968)'</span>,</span><br><span class="line">       <span class="hljs-string">'2010 (1984)'</span>,</span><br><span class="line">       ...</span><br><span class="line"><span class="hljs-string">'X-Men (2000)'</span>, <span class="hljs-string">'Year of Living Dangerously (1982)'</span>,</span><br><span class="line">       <span class="hljs-string">'Yellow Submarine (1968)'</span>, <span class="hljs-string">'You'</span>ve Got Mail (<span class="hljs-number">1998</span>)<span class="hljs-string">',</span></span><br><span class="line"><span class="hljs-string">       '</span>Young Frankenstein (<span class="hljs-number">1974</span>)<span class="hljs-string">', '</span>Young Guns (<span class="hljs-number">1988</span>)<span class="hljs-string">',</span></span><br><span class="line"><span class="hljs-string">       '</span>Young Guns II (<span class="hljs-number">1990</span>)<span class="hljs-string">', '</span>Young Sherlock Holmes (<span class="hljs-number">1985</span>)<span class="hljs-string">',</span></span><br><span class="line"><span class="hljs-string">       '</span>Zero Effect (<span class="hljs-number">1998</span>)<span class="hljs-string">', '</span>eXistenZ (<span class="hljs-number">1999</span>)<span class="hljs-string">'],</span></span><br><span class="line"><span class="hljs-string">      dtype='</span>object<span class="hljs-string">', name='</span>title<span class="hljs-string">', length=1216)</span></span><br></pre></td></tr></table></figure><p>标题索引中含有评分数据大于250条的电影名称，然后我们就可以据此从前面的mean_ratings中选取所需的行了：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># Select rows on the index</span></span><br><span class="line">In [<span class="hljs-number">82</span>]: mean_ratings = mean_ratings.loc[active_titles]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">83</span>]: mean_ratings</span><br><span class="line">Out[<span class="hljs-number">83</span>]: </span><br><span class="line">gender                                    F         M</span><br><span class="line">title                                                </span><br><span class="line"><span class="hljs-string">'burbs, The (1989)                 2.793478  2.962085</span></span><br><span class="line"><span class="hljs-string">10 Things I Hate About You (1999)  3.646552  3.311966</span></span><br><span class="line"><span class="hljs-string">101 Dalmatians (1961)              3.791444  3.500000</span></span><br><span class="line"><span class="hljs-string">101 Dalmatians (1996)              3.240000  2.911215</span></span><br><span class="line"><span class="hljs-string">12 Angry Men (1957)                4.184397  4.328421</span></span><br><span class="line"><span class="hljs-string">...                                     ...       ...</span></span><br><span class="line"><span class="hljs-string">Young Guns (1988)                  3.371795  3.425620</span></span><br><span class="line"><span class="hljs-string">Young Guns II (1990)               2.934783  2.904025</span></span><br><span class="line"><span class="hljs-string">Young Sherlock Holmes (1985)       3.514706  3.363344</span></span><br><span class="line"><span class="hljs-string">Zero Effect (1998)                 3.864407  3.723140</span></span><br><span class="line"><span class="hljs-string">eXistenZ (1999)                    3.098592  3.289086</span></span><br><span class="line"><span class="hljs-string">[1216 rows x 2 columns]</span></span><br></pre></td></tr></table></figure><p>为了了解女性观众最喜欢的电影，我们可以对F列降序排列：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">85</span>]: top_female_ratings = mean_ratings.sort_values(by=<span class="hljs-string">'F'</span>, ascending=<span class="hljs-literal">False</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">86</span>]: top_female_ratings[:<span class="hljs-number">10</span>]</span><br><span class="line">Out[<span class="hljs-number">86</span>]: </span><br><span class="line">gender                                                     F         M</span><br><span class="line">title                                                                 </span><br><span class="line">Close Shave, A (<span class="hljs-number">1995</span>)                               <span class="hljs-number">4.644444</span>  <span class="hljs-number">4.473795</span></span><br><span class="line">Wrong Trousers, The (<span class="hljs-number">1993</span>)                          <span class="hljs-number">4.588235</span>  <span class="hljs-number">4.478261</span></span><br><span class="line">Sunset Blvd. (a.k.a. Sunset Boulevard) (<span class="hljs-number">1950</span>)       <span class="hljs-number">4.572650</span>  <span class="hljs-number">4.464589</span></span><br><span class="line">Wallace &amp; Gromit: The Best of Aardman Animation...  <span class="hljs-number">4.563107</span>  <span class="hljs-number">4.385075</span></span><br><span class="line">Schindle<span class="hljs-string">r's List (1993)                             4.562602  4.491415</span></span><br><span class="line"><span class="hljs-string">Shawshank Redemption, The (1994)                    4.539075  4.560625</span></span><br><span class="line"><span class="hljs-string">Grand Day Out, A (1992)                             4.537879  4.293255</span></span><br><span class="line"><span class="hljs-string">To Kill a Mockingbird (1962)                        4.536667  4.372611</span></span><br><span class="line"><span class="hljs-string">Creature Comforts (1990)                            4.513889  4.272277</span></span><br><span class="line"><span class="hljs-string">Usual Suspects, The (1995)                          4.513317  4.518248</span></span><br></pre></td></tr></table></figure><h2 id="计算评分分歧"><a href="#计算评分分歧" class="headerlink" title="计算评分分歧"></a>计算评分分歧</h2><p>假设我们想要找出男性和女性观众分歧最大的电影。一个办法是给mean_ratings加上一个用于存放平均得分之差的列，并对其进行排序：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">87</span>]: mean_ratings[<span class="hljs-string">'diff'</span>] = mean_ratings[<span class="hljs-string">'M'</span>] - mean_ratings[<span class="hljs-string">'F'</span>]</span><br></pre></td></tr></table></figure><p>按”diff”排序即可得到分歧最大且女性观众更喜欢的电影：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">88</span>]: sorted_by_diff = mean_ratings.sort_values(by=<span class="hljs-string">'diff'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">89</span>]: sorted_by_diff[:<span class="hljs-number">10</span>]</span><br><span class="line">Out[<span class="hljs-number">89</span>]: </span><br><span class="line">gender                                        F         M      diff</span><br><span class="line">title                                                              </span><br><span class="line">Dirty Dancing (<span class="hljs-number">1987</span>)                   <span class="hljs-number">3.790378</span>  <span class="hljs-number">2.959596</span> <span class="hljs-number">-0.830782</span></span><br><span class="line">Jumpin<span class="hljs-string">' Jack Flash (1986)              3.254717  2.578358 -0.676359</span></span><br><span class="line"><span class="hljs-string">Grease (1978)                          3.975265  3.367041 -0.608224</span></span><br><span class="line"><span class="hljs-string">Little Women (1994)                    3.870588  3.321739 -0.548849</span></span><br><span class="line"><span class="hljs-string">Steel Magnolias (1989)                 3.901734  3.365957 -0.535777</span></span><br><span class="line"><span class="hljs-string">Anastasia (1997)                       3.800000  3.281609 -0.518391</span></span><br><span class="line"><span class="hljs-string">Rocky Horror Picture Show, The (1975)  3.673016  3.160131 -0.512885</span></span><br><span class="line"><span class="hljs-string">Color Purple, The (1985)               4.158192  3.659341 -0.498851</span></span><br><span class="line"><span class="hljs-string">Age of Innocence, The (1993)           3.827068  3.339506 -0.487561</span></span><br><span class="line"><span class="hljs-string">Free Willy (1993)                      2.921348  2.438776 -0.482573</span></span><br></pre></td></tr></table></figure><p>对排序结果反序并取出前10行，得到的则是男性观众更喜欢的电影：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># Reverse order of rows, take first 10 rows</span></span><br><span class="line">In [<span class="hljs-number">90</span>]: sorted_by_diff[::<span class="hljs-number">-1</span>][:<span class="hljs-number">10</span>]</span><br><span class="line">Out[<span class="hljs-number">90</span>]: </span><br><span class="line">gender                                         F         M      diff</span><br><span class="line">title                                                               </span><br><span class="line">Good, The Bad <span class="hljs-keyword">and</span> The Ugly, The (<span class="hljs-number">1966</span>)  <span class="hljs-number">3.494949</span>  <span class="hljs-number">4.221300</span>  <span class="hljs-number">0.726351</span></span><br><span class="line">Kentucky Fried Movie, The (<span class="hljs-number">1977</span>)        <span class="hljs-number">2.878788</span>  <span class="hljs-number">3.555147</span>  <span class="hljs-number">0.676359</span></span><br><span class="line">Dumb &amp; Dumber (<span class="hljs-number">1994</span>)                    <span class="hljs-number">2.697987</span>  <span class="hljs-number">3.336595</span>  <span class="hljs-number">0.638608</span></span><br><span class="line">Longest Day, The (<span class="hljs-number">1962</span>)                 <span class="hljs-number">3.411765</span>  <span class="hljs-number">4.031447</span>  <span class="hljs-number">0.619682</span></span><br><span class="line">Cable Guy, The (<span class="hljs-number">1996</span>)                   <span class="hljs-number">2.250000</span>  <span class="hljs-number">2.863787</span>  <span class="hljs-number">0.613787</span></span><br><span class="line">Evil Dead II (Dead By Dawn) (<span class="hljs-number">1987</span>)      <span class="hljs-number">3.297297</span>  <span class="hljs-number">3.909283</span>  <span class="hljs-number">0.611985</span></span><br><span class="line">Hidden, The (<span class="hljs-number">1987</span>)                      <span class="hljs-number">3.137931</span>  <span class="hljs-number">3.745098</span>  <span class="hljs-number">0.607167</span></span><br><span class="line">Rocky III (<span class="hljs-number">1982</span>)                        <span class="hljs-number">2.361702</span>  <span class="hljs-number">2.943503</span>  <span class="hljs-number">0.581801</span></span><br><span class="line">Caddyshack (<span class="hljs-number">1980</span>)                       <span class="hljs-number">3.396135</span>  <span class="hljs-number">3.969737</span>  <span class="hljs-number">0.573602</span></span><br><span class="line">For a Few Dollars More (<span class="hljs-number">1965</span>)           <span class="hljs-number">3.409091</span>  <span class="hljs-number">3.953795</span>  <span class="hljs-number">0.544704</span></span><br></pre></td></tr></table></figure><p>如果只是想要找出分歧最大的电影（不考虑性别因素），则可以计算得分数据的方差或标准差：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># Standard deviation of rating grouped by title</span></span><br><span class="line">In [<span class="hljs-number">91</span>]: rating_std_by_title = data.groupby(<span class="hljs-string">'title'</span>)[<span class="hljs-string">'rating'</span>].std()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Filter down to active_titles</span></span><br><span class="line">In [<span class="hljs-number">92</span>]: rating_std_by_title = rating_std_by_title.loc[active_titles]</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Order Series by value in descending order</span></span><br><span class="line">In [<span class="hljs-number">93</span>]: rating_std_by_title.sort_values(ascending=<span class="hljs-literal">False</span>)[:<span class="hljs-number">10</span>]</span><br><span class="line">Out[<span class="hljs-number">93</span>]: </span><br><span class="line">title</span><br><span class="line">Dumb &amp; Dumber (<span class="hljs-number">1994</span>)                     <span class="hljs-number">1.321333</span></span><br><span class="line">Blair Witch Project, The (<span class="hljs-number">1999</span>)          <span class="hljs-number">1.316368</span></span><br><span class="line">Natural Born Killers (<span class="hljs-number">1994</span>)              <span class="hljs-number">1.307198</span></span><br><span class="line">Tank Girl (<span class="hljs-number">1995</span>)                         <span class="hljs-number">1.277695</span></span><br><span class="line">Rocky Horror Picture Show, The (<span class="hljs-number">1975</span>)    <span class="hljs-number">1.260177</span></span><br><span class="line">Eyes Wide Shut (<span class="hljs-number">1999</span>)                    <span class="hljs-number">1.259624</span></span><br><span class="line">Evita (<span class="hljs-number">1996</span>)                             <span class="hljs-number">1.253631</span></span><br><span class="line">Billy Madison (<span class="hljs-number">1995</span>)                     <span class="hljs-number">1.249970</span></span><br><span class="line">Fear <span class="hljs-keyword">and</span> Loathing <span class="hljs-keyword">in</span> Las Vegas (<span class="hljs-number">1998</span>)    <span class="hljs-number">1.246408</span></span><br><span class="line">Bicentennial Man (<span class="hljs-number">1999</span>)                  <span class="hljs-number">1.245533</span></span><br><span class="line">Name: rating, dtype: float64</span><br></pre></td></tr></table></figure><p>可能你已经注意到了，电影分类是以竖线（|）分隔的字符串形式给出的。如果想对电影分类进行分析的话，就需要先将其转换成更有用的形式才行。</p><h1 id="14-3-1880-2010年间全美婴儿姓名"><a href="#14-3-1880-2010年间全美婴儿姓名" class="headerlink" title="14.3 1880-2010年间全美婴儿姓名"></a>14.3 1880-2010年间全美婴儿姓名</h1><p>美国社会保障总署（SSA）提供了一份从1880年到现在的婴儿名字频率数据。Hadley Wickham（许多流行R包的作者）经常用这份数据来演示R的数据处理功能。</p><p>我们要做一些数据规整才能加载这个数据集，这么做就会产生一个如下的DataFrame：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">4</span>]: names.head(<span class="hljs-number">10</span>)</span><br><span class="line">Out[<span class="hljs-number">4</span>]:</span><br><span class="line">        name sex  births  year</span><br><span class="line"><span class="hljs-number">0</span>       Mary   F    <span class="hljs-number">7065</span>  <span class="hljs-number">1880</span></span><br><span class="line"><span class="hljs-number">1</span>       Anna   F    <span class="hljs-number">2604</span>  <span class="hljs-number">1880</span></span><br><span class="line"><span class="hljs-number">2</span>       Emma   F    <span class="hljs-number">2003</span>  <span class="hljs-number">1880</span></span><br><span class="line"><span class="hljs-number">3</span>  Elizabeth   F    <span class="hljs-number">1939</span>  <span class="hljs-number">1880</span></span><br><span class="line"><span class="hljs-number">4</span>     Minnie   F    <span class="hljs-number">1746</span>  <span class="hljs-number">1880</span></span><br><span class="line"><span class="hljs-number">5</span>   Margaret   F    <span class="hljs-number">1578</span>  <span class="hljs-number">1880</span></span><br><span class="line"><span class="hljs-number">6</span>        Ida   F    <span class="hljs-number">1472</span>  <span class="hljs-number">1880</span></span><br><span class="line"><span class="hljs-number">7</span>      Alice   F    <span class="hljs-number">1414</span>  <span class="hljs-number">1880</span></span><br><span class="line"><span class="hljs-number">8</span>     Bertha   F    <span class="hljs-number">1320</span>  <span class="hljs-number">1880</span></span><br><span class="line"><span class="hljs-number">9</span>      Sarah   F    <span class="hljs-number">1288</span>  <span class="hljs-number">1880</span></span><br></pre></td></tr></table></figure><p>你可以用这个数据集做很多事，例如：</p><ul><li>计算指定名字（可以是你自己的，也可以是别人的）的年度比例。</li><li>计算某个名字的相对排名。</li><li>计算各年度最流行的名字，以及增长或减少最快的名字。</li><li>分析名字趋势：元音、辅音、长度、总体多样性、拼写变化、首尾字母等。</li><li>分析外源性趋势：圣经中的名字、名人、人口结构变化等。</li></ul><p>利用前面介绍过的那些工具，这些分析工作都能很轻松地完成，我会讲解其中的一些。</p><p>到编写本书时为止，美国社会保障总署将该数据库按年度制成了多个数据文件，其中给出了每个性别/名字组合的出生总数。这些文件的原始档案可以在这里获取：<a href="http://www.ssa.gov/oact/babynames/limits.html。" target="_blank" rel="noopener">http://www.ssa.gov/oact/babynames/limits.html。</a></p><p>如果你在阅读本书的时候这个页面已经不见了，也可以用搜索引擎找找。</p><p>下载”National data”文件names.zip，解压后的目录中含有一组文件（如yob1880.txt）。我用UNIX的head命令查看了其中一个文件的前10行（在Windows上，你可以用more命令，或直接在文本编辑器中打开）：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [94]: !head -n 10 datasets/babynames/yob1880.txt</span><br><span class="line">Mary,F,7065</span><br><span class="line">Anna,F,2604</span><br><span class="line">Emma,F,2003</span><br><span class="line">Elizabeth,F,1939</span><br><span class="line">Minnie,F,1746</span><br><span class="line">Margaret,F,1578</span><br><span class="line">Ida,F,1472</span><br><span class="line">Alice,F,1414</span><br><span class="line">Bertha,F,1320</span><br><span class="line">Sarah,F,1288</span><br></pre></td></tr></table></figure><p>由于这是一个非常标准的以逗号隔开的格式，所以可以用pandas.read_csv将其加载到DataFrame中：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">95</span>]: <span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">96</span>]: names1880 =</span><br><span class="line">pd.read_csv(<span class="hljs-string">'datasets/babynames/yob1880.txt'</span>,</span><br><span class="line">   ....:                         names=[<span class="hljs-string">'name'</span>, <span class="hljs-string">'sex'</span>, <span class="hljs-string">'births'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">97</span>]: names1880</span><br><span class="line">Out[<span class="hljs-number">97</span>]: </span><br><span class="line">           name sex  births</span><br><span class="line"><span class="hljs-number">0</span>          Mary   F    <span class="hljs-number">7065</span></span><br><span class="line"><span class="hljs-number">1</span>          Anna   F    <span class="hljs-number">2604</span></span><br><span class="line"><span class="hljs-number">2</span>          Emma   F    <span class="hljs-number">2003</span></span><br><span class="line"><span class="hljs-number">3</span>     Elizabeth   F    <span class="hljs-number">1939</span></span><br><span class="line"><span class="hljs-number">4</span>        Minnie   F    <span class="hljs-number">1746</span></span><br><span class="line"><span class="hljs-meta">... </span>        ...  ..     ...</span><br><span class="line"><span class="hljs-number">1995</span>     Woodie   M       <span class="hljs-number">5</span></span><br><span class="line"><span class="hljs-number">1996</span>     Worthy   M       <span class="hljs-number">5</span></span><br><span class="line"><span class="hljs-number">1997</span>     Wright   M       <span class="hljs-number">5</span></span><br><span class="line"><span class="hljs-number">1998</span>       York   M       <span class="hljs-number">5</span></span><br><span class="line"><span class="hljs-number">1999</span>  Zachariah   M       <span class="hljs-number">5</span></span><br><span class="line">[<span class="hljs-number">2000</span> rows x <span class="hljs-number">3</span> columns]</span><br></pre></td></tr></table></figure><p>这些文件中仅含有当年出现超过5次的名字。为了简单起见，我们可以用births列的sex分组小计表示该年度的births总计：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">98</span>]: names1880.groupby(<span class="hljs-string">'sex'</span>).births.sum()</span><br><span class="line">Out[<span class="hljs-number">98</span>]: </span><br><span class="line">sex</span><br><span class="line">F     <span class="hljs-number">90993</span></span><br><span class="line">M    <span class="hljs-number">110493</span></span><br><span class="line">Name: births, dtype: int64</span><br></pre></td></tr></table></figure><p>由于该数据集按年度被分隔成了多个文件，所以第一件事情就是要将所有数据都组装到一个DataFrame里面，并加上一个year字段。使用pandas.concat即可达到这个目的：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">years = range(<span class="hljs-number">1880</span>, <span class="hljs-number">2011</span>)</span><br><span class="line"></span><br><span class="line">pieces = []</span><br><span class="line">columns = [<span class="hljs-string">'name'</span>, <span class="hljs-string">'sex'</span>, <span class="hljs-string">'births'</span>]</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> year <span class="hljs-keyword">in</span> years:</span><br><span class="line">    path = <span class="hljs-string">'datasets/babynames/yob%d.txt'</span> % year</span><br><span class="line">    frame = pd.read_csv(path, names=columns)</span><br><span class="line"></span><br><span class="line">    frame[<span class="hljs-string">'year'</span>] = year</span><br><span class="line">    pieces.append(frame)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Concatenate everything into a single DataFrame</span></span><br><span class="line">names = pd.concat(pieces, ignore_index=<span class="hljs-literal">True</span>)</span><br></pre></td></tr></table></figure><p>这里需要注意几件事情。第一，concat默认是按行将多个DataFrame组合到一起的；第二，必须指定ignore_index=True，因为我们不希望保留read_csv所返回的原始行号。现在我们得到了一个非常大的DataFrame，它含有全部的名字数据：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">100</span>]: names</span><br><span class="line">Out[<span class="hljs-number">100</span>]: </span><br><span class="line">              name sex  births  year</span><br><span class="line"><span class="hljs-number">0</span>             Mary   F    <span class="hljs-number">7065</span>  <span class="hljs-number">1880</span></span><br><span class="line"><span class="hljs-number">1</span>             Anna   F    <span class="hljs-number">2604</span>  <span class="hljs-number">1880</span></span><br><span class="line"><span class="hljs-number">2</span>             Emma   F    <span class="hljs-number">2003</span>  <span class="hljs-number">1880</span></span><br><span class="line"><span class="hljs-number">3</span>        Elizabeth   F    <span class="hljs-number">1939</span>  <span class="hljs-number">1880</span></span><br><span class="line"><span class="hljs-number">4</span>           Minnie   F    <span class="hljs-number">1746</span>  <span class="hljs-number">1880</span></span><br><span class="line"><span class="hljs-meta">... </span>           ...  ..     ...   ...</span><br><span class="line"><span class="hljs-number">1690779</span>    Zymaire   M       <span class="hljs-number">5</span>  <span class="hljs-number">2010</span></span><br><span class="line"><span class="hljs-number">1690780</span>     Zyonne   M       <span class="hljs-number">5</span>  <span class="hljs-number">2010</span></span><br><span class="line"><span class="hljs-number">1690781</span>  Zyquarius   M       <span class="hljs-number">5</span>  <span class="hljs-number">2010</span></span><br><span class="line"><span class="hljs-number">1690782</span>      Zyran   M       <span class="hljs-number">5</span>  <span class="hljs-number">2010</span></span><br><span class="line"><span class="hljs-number">1690783</span>      Zzyzx   M       <span class="hljs-number">5</span>  <span class="hljs-number">2010</span></span><br><span class="line">[<span class="hljs-number">1690784</span> rows x <span class="hljs-number">4</span> columns]</span><br></pre></td></tr></table></figure><p>有了这些数据之后，我们就可以利用groupby或pivot_table在year和sex级别上对其进行聚合了，如图14-4所示：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">101</span>]: total_births = names.pivot_table(<span class="hljs-string">'births'</span>, index=<span class="hljs-string">'year'</span>,</span><br><span class="line">   .....:                                  columns=<span class="hljs-string">'sex'</span>, aggfunc=sum)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">102</span>]: total_births.tail()</span><br><span class="line">Out[<span class="hljs-number">102</span>]: </span><br><span class="line">sex         F        M</span><br><span class="line">year                  </span><br><span class="line"><span class="hljs-number">2006</span>  <span class="hljs-number">1896468</span>  <span class="hljs-number">2050234</span></span><br><span class="line"><span class="hljs-number">2007</span>  <span class="hljs-number">1916888</span>  <span class="hljs-number">2069242</span></span><br><span class="line"><span class="hljs-number">2008</span>  <span class="hljs-number">1883645</span>  <span class="hljs-number">2032310</span></span><br><span class="line"><span class="hljs-number">2009</span>  <span class="hljs-number">1827643</span>  <span class="hljs-number">1973359</span></span><br><span class="line"><span class="hljs-number">2010</span>  <span class="hljs-number">1759010</span>  <span class="hljs-number">1898382</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">103</span>]: total_births.plot(title=<span class="hljs-string">'Total births by sex and year'</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-7643b150d88aae11.webp" alt="img"></p><p>图14-4 按性别和年度统计的总出生数</p><p>下面我们来插入一个prop列，用于存放指定名字的婴儿数相对于总出生数的比例。prop值为0.02表示每100名婴儿中有2名取了当前这个名字。因此，我们先按year和sex分组，然后再将新列加到各个分组上：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_prop</span><span class="hljs-params">(group)</span>:</span></span><br><span class="line">    group[<span class="hljs-string">'prop'</span>] = group.births / group.births.sum()</span><br><span class="line">    <span class="hljs-keyword">return</span> group</span><br><span class="line">names = names.groupby([<span class="hljs-string">'year'</span>, <span class="hljs-string">'sex'</span>]).apply(add_prop)</span><br></pre></td></tr></table></figure><p>现在，完整的数据集就有了下面这些列：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">105</span>]: names</span><br><span class="line">Out[<span class="hljs-number">105</span>]: </span><br><span class="line">              name sex  births  year      prop</span><br><span class="line"><span class="hljs-number">0</span>             Mary   F    <span class="hljs-number">7065</span>  <span class="hljs-number">1880</span>  <span class="hljs-number">0.077643</span></span><br><span class="line"><span class="hljs-number">1</span>             Anna   F    <span class="hljs-number">2604</span>  <span class="hljs-number">1880</span>  <span class="hljs-number">0.028618</span></span><br><span class="line"><span class="hljs-number">2</span>             Emma   F    <span class="hljs-number">2003</span>  <span class="hljs-number">1880</span>  <span class="hljs-number">0.022013</span></span><br><span class="line"><span class="hljs-number">3</span>        Elizabeth   F    <span class="hljs-number">1939</span>  <span class="hljs-number">1880</span>  <span class="hljs-number">0.021309</span></span><br><span class="line"><span class="hljs-number">4</span>           Minnie   F    <span class="hljs-number">1746</span>  <span class="hljs-number">1880</span>  <span class="hljs-number">0.019188</span></span><br><span class="line"><span class="hljs-meta">... </span>           ...  ..     ...   ...       ...</span><br><span class="line"><span class="hljs-number">1690779</span>    Zymaire   M       <span class="hljs-number">5</span>  <span class="hljs-number">2010</span>  <span class="hljs-number">0.000003</span></span><br><span class="line"><span class="hljs-number">1690780</span>     Zyonne   M       <span class="hljs-number">5</span>  <span class="hljs-number">2010</span>  <span class="hljs-number">0.000003</span></span><br><span class="line"><span class="hljs-number">1690781</span>  Zyquarius   M       <span class="hljs-number">5</span>  <span class="hljs-number">2010</span>  <span class="hljs-number">0.000003</span></span><br><span class="line"><span class="hljs-number">1690782</span>      Zyran   M       <span class="hljs-number">5</span>  <span class="hljs-number">2010</span>  <span class="hljs-number">0.000003</span></span><br><span class="line"><span class="hljs-number">1690783</span>      Zzyzx   M       <span class="hljs-number">5</span>  <span class="hljs-number">2010</span>  <span class="hljs-number">0.000003</span></span><br><span class="line">[<span class="hljs-number">1690784</span> rows x <span class="hljs-number">5</span> columns]</span><br></pre></td></tr></table></figure><p>在执行这样的分组处理时，一般都应该做一些有效性检查，比如验证所有分组的prop的总和是否为1：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">106</span>]: names.groupby([<span class="hljs-string">'year'</span>, <span class="hljs-string">'sex'</span>]).prop.sum()</span><br><span class="line">Out[<span class="hljs-number">106</span>]: </span><br><span class="line">year  sex</span><br><span class="line"><span class="hljs-number">1880</span>  F      <span class="hljs-number">1.0</span></span><br><span class="line">      M      <span class="hljs-number">1.0</span></span><br><span class="line"><span class="hljs-number">1881</span>  F      <span class="hljs-number">1.0</span></span><br><span class="line">      M      <span class="hljs-number">1.0</span></span><br><span class="line"><span class="hljs-number">1882</span>  F      <span class="hljs-number">1.0</span></span><br><span class="line">            ... </span><br><span class="line"><span class="hljs-number">2008</span>  M      <span class="hljs-number">1.0</span></span><br><span class="line"><span class="hljs-number">2009</span>  F      <span class="hljs-number">1.0</span></span><br><span class="line">      M      <span class="hljs-number">1.0</span></span><br><span class="line"><span class="hljs-number">2010</span>  F      <span class="hljs-number">1.0</span></span><br><span class="line">      M      <span class="hljs-number">1.0</span></span><br><span class="line">Name: prop, Length: <span class="hljs-number">262</span>, dtype: float64</span><br></pre></td></tr></table></figure><p>工作完成。为了便于实现更进一步的分析，我需要取出该数据的一个子集：每对sex/year组合的前1000个名字。这又是一个分组操作：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_top1000</span><span class="hljs-params">(group)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">return</span> group.sort_values(by=<span class="hljs-string">'births'</span>, ascending=<span class="hljs-literal">False</span>)[:<span class="hljs-number">1000</span>]</span><br><span class="line">grouped = names.groupby([<span class="hljs-string">'year'</span>, <span class="hljs-string">'sex'</span>])</span><br><span class="line">top1000 = grouped.apply(get_top1000)</span><br><span class="line"><span class="hljs-comment"># Drop the group index, not needed</span></span><br><span class="line">top1000.reset_index(inplace=<span class="hljs-literal">True</span>, drop=<span class="hljs-literal">True</span>)</span><br></pre></td></tr></table></figure><p>如果你喜欢DIY的话，也可以这样：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pieces = []</span><br><span class="line"><span class="hljs-keyword">for</span> year, group <span class="hljs-keyword">in</span> names.groupby([<span class="hljs-string">'year'</span>, <span class="hljs-string">'sex'</span>]):</span><br><span class="line">    pieces.append(group.sort_values(by=<span class="hljs-string">'births'</span>, ascending=<span class="hljs-literal">False</span>)[:<span class="hljs-number">1000</span>])</span><br><span class="line">top1000 = pd.concat(pieces, ignore_index=<span class="hljs-literal">True</span>)</span><br></pre></td></tr></table></figure><p>现在的结果数据集就小多了：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">108</span>]: top1000</span><br><span class="line">Out[<span class="hljs-number">108</span>]: </span><br><span class="line">             name sex  births  year      prop</span><br><span class="line"><span class="hljs-number">0</span>            Mary   F    <span class="hljs-number">7065</span>  <span class="hljs-number">1880</span>  <span class="hljs-number">0.077643</span></span><br><span class="line"><span class="hljs-number">1</span>            Anna   F    <span class="hljs-number">2604</span>  <span class="hljs-number">1880</span>  <span class="hljs-number">0.028618</span></span><br><span class="line"><span class="hljs-number">2</span>            Emma   F    <span class="hljs-number">2003</span>  <span class="hljs-number">1880</span>  <span class="hljs-number">0.022013</span></span><br><span class="line"><span class="hljs-number">3</span>       Elizabeth   F    <span class="hljs-number">1939</span>  <span class="hljs-number">1880</span>  <span class="hljs-number">0.021309</span></span><br><span class="line"><span class="hljs-number">4</span>          Minnie   F    <span class="hljs-number">1746</span>  <span class="hljs-number">1880</span>  <span class="hljs-number">0.019188</span></span><br><span class="line"><span class="hljs-meta">... </span>          ...  ..     ...   ...       ...</span><br><span class="line"><span class="hljs-number">261872</span>     Camilo   M     <span class="hljs-number">194</span>  <span class="hljs-number">2010</span>  <span class="hljs-number">0.000102</span></span><br><span class="line"><span class="hljs-number">261873</span>     Destin   M     <span class="hljs-number">194</span>  <span class="hljs-number">2010</span>  <span class="hljs-number">0.000102</span></span><br><span class="line"><span class="hljs-number">261874</span>     Jaquan   M     <span class="hljs-number">194</span>  <span class="hljs-number">2010</span>  <span class="hljs-number">0.000102</span></span><br><span class="line"><span class="hljs-number">261875</span>     Jaydan   M     <span class="hljs-number">194</span>  <span class="hljs-number">2010</span>  <span class="hljs-number">0.000102</span></span><br><span class="line"><span class="hljs-number">261876</span>     Maxton   M     <span class="hljs-number">193</span>  <span class="hljs-number">2010</span>  <span class="hljs-number">0.000102</span></span><br><span class="line">[<span class="hljs-number">261877</span> rows x <span class="hljs-number">5</span> columns]</span><br></pre></td></tr></table></figure><p>接下来的数据分析工作就针对这个top1000数据集了。</p><h2 id="分析命名趋势"><a href="#分析命名趋势" class="headerlink" title="分析命名趋势"></a>分析命名趋势</h2><p>有了完整的数据集和刚才生成的top1000数据集，我们就可以开始分析各种命名趋势了。首先将前1000个名字分为男女两个部分：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">109</span>]: boys = top1000[top1000.sex == <span class="hljs-string">'M'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">110</span>]: girls = top1000[top1000.sex == <span class="hljs-string">'F'</span>]</span><br></pre></td></tr></table></figure><p>这是两个简单的时间序列，只需稍作整理即可绘制出相应的图表（比如每年叫做John和Mary的婴儿数）。我们先生成一张按year和name统计的总出生数透视表：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">111</span>]: total_births = top1000.pivot_table(<span class="hljs-string">'births'</span>, index=<span class="hljs-string">'year'</span>,</span><br><span class="line">   .....:                                    columns=<span class="hljs-string">'name'</span>,</span><br><span class="line">   .....:                                    aggfunc=sum)</span><br></pre></td></tr></table></figure><p>现在，我们用DataFrame的plot方法绘制几个名字的曲线图（见图14-5）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">112</span>]: total_births.info()</span><br><span class="line">&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> '<span class="hljs-title">pandas</span>.<span class="hljs-title">core</span>.<span class="hljs-title">frame</span>.<span class="hljs-title">DataFrame</span>'&gt;</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-title">Int64Index</span>:</span> <span class="hljs-number">131</span> entries, <span class="hljs-number">1880</span> to <span class="hljs-number">2010</span></span><br><span class="line">Columns: <span class="hljs-number">6868</span> entries, Aaden to Zuri</span><br><span class="line">dtypes: float64(<span class="hljs-number">6868</span>)</span><br><span class="line">memory usage: <span class="hljs-number">6.9</span> MB</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">113</span>]: subset = total_births[[<span class="hljs-string">'John'</span>, <span class="hljs-string">'Harry'</span>, <span class="hljs-string">'Mary'</span>, <span class="hljs-string">'Marilyn'</span>]]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">114</span>]: subset.plot(subplots=<span class="hljs-literal">True</span>, figsize=(<span class="hljs-number">12</span>, <span class="hljs-number">10</span>), grid=<span class="hljs-literal">False</span>,</span><br><span class="line">   .....:             title=<span class="hljs-string">"Number of births per year"</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-33f0f97656367a53.webp" alt="img"></p><p>图14-5 几个男孩和女孩名字随时间变化的使用数量</p><p>从图中可以看出，这几个名字在美国人民的心目中已经风光不再了。但事实并非如此简单，我们在下一节中就能知道是怎么一回事了。</p><h2 id="评估命名多样性的增长"><a href="#评估命名多样性的增长" class="headerlink" title="评估命名多样性的增长"></a>评估命名多样性的增长</h2><p>一种解释是父母愿意给小孩起常见的名字越来越少。这个假设可以从数据中得到验证。一个办法是计算最流行的1000个名字所占的比例，我按year和sex进行聚合并绘图（见图14-6）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">116</span>]: table = top1000.pivot_table(<span class="hljs-string">'prop'</span>, index=<span class="hljs-string">'year'</span>,</span><br><span class="line">   .....:                             columns=<span class="hljs-string">'sex'</span>, aggfunc=sum)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">117</span>]: table.plot(title=<span class="hljs-string">'Sum of table1000.prop by year and sex'</span>,</span><br><span class="line">   .....:            yticks=np.linspace(<span class="hljs-number">0</span>, <span class="hljs-number">1.2</span>, <span class="hljs-number">13</span>), xticks=range(<span class="hljs-number">1880</span>, <span class="hljs-number">2020</span>, <span class="hljs-number">10</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-63e1ddc326a033b9.webp" alt="img"></p><p>图14-6 分性别统计的前1000个名字在总出生人数中的比例</p><p>从图中可以看出，名字的多样性确实出现了增长（前1000项的比例降低）。另一个办法是计算占总出生人数前50%的不同名字的数量，这个数字不太好计算。我们只考虑2010年男孩的名字：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">118</span>]: df = boys[boys.year == <span class="hljs-number">2010</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">119</span>]: df</span><br><span class="line">Out[<span class="hljs-number">119</span>]: </span><br><span class="line">           name sex  births  year      prop</span><br><span class="line"><span class="hljs-number">260877</span>    Jacob   M   <span class="hljs-number">21875</span>  <span class="hljs-number">2010</span>  <span class="hljs-number">0.011523</span></span><br><span class="line"><span class="hljs-number">260878</span>    Ethan   M   <span class="hljs-number">17866</span>  <span class="hljs-number">2010</span>  <span class="hljs-number">0.009411</span></span><br><span class="line"><span class="hljs-number">260879</span>  Michael   M   <span class="hljs-number">17133</span>  <span class="hljs-number">2010</span>  <span class="hljs-number">0.009025</span></span><br><span class="line"><span class="hljs-number">260880</span>   Jayden   M   <span class="hljs-number">17030</span>  <span class="hljs-number">2010</span>  <span class="hljs-number">0.008971</span></span><br><span class="line"><span class="hljs-number">260881</span>  William   M   <span class="hljs-number">16870</span>  <span class="hljs-number">2010</span>  <span class="hljs-number">0.008887</span></span><br><span class="line"><span class="hljs-meta">... </span>        ...  ..     ...   ...       ...</span><br><span class="line"><span class="hljs-number">261872</span>   Camilo   M     <span class="hljs-number">194</span>  <span class="hljs-number">2010</span>  <span class="hljs-number">0.000102</span></span><br><span class="line"><span class="hljs-number">261873</span>   Destin   M     <span class="hljs-number">194</span>  <span class="hljs-number">2010</span>  <span class="hljs-number">0.000102</span></span><br><span class="line"><span class="hljs-number">261874</span>   Jaquan   M     <span class="hljs-number">194</span>  <span class="hljs-number">2010</span>  <span class="hljs-number">0.000102</span></span><br><span class="line"><span class="hljs-number">261875</span>   Jaydan   M     <span class="hljs-number">194</span>  <span class="hljs-number">2010</span>  <span class="hljs-number">0.000102</span></span><br><span class="line"><span class="hljs-number">261876</span>   Maxton   M     <span class="hljs-number">193</span>  <span class="hljs-number">2010</span>  <span class="hljs-number">0.000102</span></span><br><span class="line">[<span class="hljs-number">1000</span> rows x <span class="hljs-number">5</span> columns]</span><br></pre></td></tr></table></figure><p>在对prop降序排列之后，我们想知道前面多少个名字的人数加起来才够50%。虽然编写一个for循环确实也能达到目的，但NumPy有一种更聪明的矢量方式。先计算prop的累计和cumsum，然后再通过searchsorted方法找出0.5应该被插入在哪个位置才能保证不破坏顺序：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">120</span>]: prop_cumsum = df.sort_values(by=<span class="hljs-string">'prop'</span>, ascending=<span class="hljs-literal">False</span>).prop.cumsum()</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">121</span>]: prop_cumsum[:<span class="hljs-number">10</span>]</span><br><span class="line">Out[<span class="hljs-number">121</span>]: </span><br><span class="line"><span class="hljs-number">260877</span>    <span class="hljs-number">0.011523</span></span><br><span class="line"><span class="hljs-number">260878</span>    <span class="hljs-number">0.020934</span></span><br><span class="line"><span class="hljs-number">260879</span>    <span class="hljs-number">0.029959</span></span><br><span class="line"><span class="hljs-number">260880</span>    <span class="hljs-number">0.038930</span></span><br><span class="line"><span class="hljs-number">260881</span>    <span class="hljs-number">0.047817</span></span><br><span class="line"><span class="hljs-number">260882</span>    <span class="hljs-number">0.056579</span></span><br><span class="line"><span class="hljs-number">260883</span>    <span class="hljs-number">0.065155</span></span><br><span class="line"><span class="hljs-number">260884</span>    <span class="hljs-number">0.073414</span></span><br><span class="line"><span class="hljs-number">260885</span>    <span class="hljs-number">0.081528</span></span><br><span class="line"><span class="hljs-number">260886</span>    <span class="hljs-number">0.089621</span></span><br><span class="line">Name: prop, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">122</span>]: prop_cumsum.values.searchsorted(<span class="hljs-number">0.5</span>)</span><br><span class="line">Out[<span class="hljs-number">122</span>]: <span class="hljs-number">116</span></span><br></pre></td></tr></table></figure><p>由于数组索引是从0开始的，因此我们要给这个结果加1，即最终结果为117。拿1900年的数据来做个比较，这个数字要小得多：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">123</span>]: df = boys[boys.year == <span class="hljs-number">1900</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">124</span>]: in1900 = df.sort_values(by=<span class="hljs-string">'prop'</span>, ascending=<span class="hljs-literal">False</span>).prop.cumsum()</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">125</span>]: in1900.values.searchsorted(<span class="hljs-number">0.5</span>) + <span class="hljs-number">1</span></span><br><span class="line">Out[<span class="hljs-number">125</span>]: <span class="hljs-number">25</span></span><br></pre></td></tr></table></figure><p>现在就可以对所有year/sex组合执行这个计算了。按这两个字段进行groupby处理，然后用一个函数计算各分组的这个值：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_quantile_count</span><span class="hljs-params">(group, q=<span class="hljs-number">0.5</span>)</span>:</span></span><br><span class="line">    group = group.sort_values(by=<span class="hljs-string">'prop'</span>, ascending=<span class="hljs-literal">False</span>)</span><br><span class="line">    <span class="hljs-keyword">return</span> group.prop.cumsum().values.searchsorted(q) + <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">diversity = top1000.groupby([<span class="hljs-string">'year'</span>, <span class="hljs-string">'sex'</span>]).apply(get_quantile_count)</span><br><span class="line">diversity = diversity.unstack(<span class="hljs-string">'sex'</span>)</span><br></pre></td></tr></table></figure><p>现在，diversity这个DataFrame拥有两个时间序列（每个性别各一个，按年度索引）。通过IPython，你可以查看其内容，还可以像之前那样绘制图表（如图14-7所示）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">128</span>]: diversity.head()</span><br><span class="line">Out[<span class="hljs-number">128</span>]: </span><br><span class="line">sex    F   M</span><br><span class="line">year        </span><br><span class="line"><span class="hljs-number">1880</span>  <span class="hljs-number">38</span>  <span class="hljs-number">14</span></span><br><span class="line"><span class="hljs-number">1881</span>  <span class="hljs-number">38</span>  <span class="hljs-number">14</span></span><br><span class="line"><span class="hljs-number">1882</span>  <span class="hljs-number">38</span>  <span class="hljs-number">15</span></span><br><span class="line"><span class="hljs-number">1883</span>  <span class="hljs-number">39</span>  <span class="hljs-number">15</span></span><br><span class="line"><span class="hljs-number">1884</span>  <span class="hljs-number">39</span>  <span class="hljs-number">16</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">129</span>]: diversity.plot(title=<span class="hljs-string">"Number of popular names in top 50%"</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-574b53a383cad681.webp" alt="img"></p><p>图14-7 按年度统计的密度表</p><p>从图中可以看出，女孩名字的多样性总是比男孩的高，而且还在变得越来越高。读者们可以自己分析一下具体是什么在驱动这个多样性（比如拼写形式的变化）。</p><h2 id="“最后一个字母”的变革"><a href="#“最后一个字母”的变革" class="headerlink" title="“最后一个字母”的变革"></a>“最后一个字母”的变革</h2><p>2007年，一名婴儿姓名研究人员Laura Wattenberg在她自己的网站上指出（<a href="http://www.babynamewizard.com/" target="_blank" rel="noopener">http://www.babynamewizard.com</a>）：近百年来，男孩名字在最后一个字母上的分布发生了显著的变化。为了了解具体的情况，我首先将全部出生数据在年度、性别以及末字母上进行了聚合：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># extract last letter from name column</span></span><br><span class="line">get_last_letter = <span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">-1</span>]</span><br><span class="line">last_letters = names.name.map(get_last_letter)</span><br><span class="line">last_letters.name = <span class="hljs-string">'last_letter'</span></span><br><span class="line"></span><br><span class="line">table = names.pivot_table(<span class="hljs-string">'births'</span>, index=last_letters,</span><br><span class="line">                          columns=[<span class="hljs-string">'sex'</span>, <span class="hljs-string">'year'</span>], aggfunc=sum)</span><br></pre></td></tr></table></figure><p>然后，我选出具有一定代表性的三年，并输出前面几行：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">131</span>]: subtable = table.reindex(columns=[<span class="hljs-number">1910</span>, <span class="hljs-number">1960</span>, <span class="hljs-number">2010</span>], level=<span class="hljs-string">'year'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">132</span>]: subtable.head()</span><br><span class="line">Out[<span class="hljs-number">132</span>]: </span><br><span class="line">sex                 F                            M                    </span><br><span class="line">year             <span class="hljs-number">1910</span>      <span class="hljs-number">1960</span>      <span class="hljs-number">2010</span>     <span class="hljs-number">1910</span>      <span class="hljs-number">1960</span>      <span class="hljs-number">2010</span></span><br><span class="line">last_letter                                                           </span><br><span class="line">a            <span class="hljs-number">108376.0</span>  <span class="hljs-number">691247.0</span>  <span class="hljs-number">670605.0</span>    <span class="hljs-number">977.0</span>    <span class="hljs-number">5204.0</span>   <span class="hljs-number">28438.0</span></span><br><span class="line">b                 NaN     <span class="hljs-number">694.0</span>     <span class="hljs-number">450.0</span>    <span class="hljs-number">411.0</span>    <span class="hljs-number">3912.0</span>   <span class="hljs-number">38859.0</span></span><br><span class="line">c                 <span class="hljs-number">5.0</span>      <span class="hljs-number">49.0</span>     <span class="hljs-number">946.0</span>    <span class="hljs-number">482.0</span>   <span class="hljs-number">15476.0</span>   <span class="hljs-number">23125.0</span></span><br><span class="line">d              <span class="hljs-number">6750.0</span>    <span class="hljs-number">3729.0</span>    <span class="hljs-number">2607.0</span>  <span class="hljs-number">22111.0</span>  <span class="hljs-number">262112.0</span>   <span class="hljs-number">44398.0</span></span><br><span class="line">e            <span class="hljs-number">133569.0</span>  <span class="hljs-number">435013.0</span>  <span class="hljs-number">313833.0</span>  <span class="hljs-number">28655.0</span>  <span class="hljs-number">178823.0</span>  <span class="hljs-number">129012.0</span></span><br></pre></td></tr></table></figure><p>接下来我们需要按总出生数对该表进行规范化处理，以便计算出各性别各末字母占总出生人数的比例：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">133</span>]: subtable.sum()</span><br><span class="line">Out[<span class="hljs-number">133</span>]: </span><br><span class="line">sex  year</span><br><span class="line">F    <span class="hljs-number">1910</span>     <span class="hljs-number">396416.0</span></span><br><span class="line">     <span class="hljs-number">1960</span>    <span class="hljs-number">2022062.0</span></span><br><span class="line">     <span class="hljs-number">2010</span>    <span class="hljs-number">1759010.0</span></span><br><span class="line">M    <span class="hljs-number">1910</span>     <span class="hljs-number">194198.0</span></span><br><span class="line">     <span class="hljs-number">1960</span>    <span class="hljs-number">2132588.0</span></span><br><span class="line"><span class="hljs-number">2010</span>    <span class="hljs-number">1898382.0</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">134</span>]: letter_prop = subtable / subtable.sum()</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">135</span>]: letter_prop</span><br><span class="line">Out[<span class="hljs-number">135</span>]: </span><br><span class="line">sex                 F                             M                    </span><br><span class="line">year             <span class="hljs-number">1910</span>      <span class="hljs-number">1960</span>      <span class="hljs-number">2010</span>      <span class="hljs-number">1910</span>      <span class="hljs-number">1960</span>      <span class="hljs-number">2010</span></span><br><span class="line">last_letter                                                            </span><br><span class="line">a            <span class="hljs-number">0.273390</span>  <span class="hljs-number">0.341853</span>  <span class="hljs-number">0.381240</span>  <span class="hljs-number">0.005031</span>  <span class="hljs-number">0.002440</span>  <span class="hljs-number">0.014980</span></span><br><span class="line">b                 NaN  <span class="hljs-number">0.000343</span>  <span class="hljs-number">0.000256</span>  <span class="hljs-number">0.002116</span>  <span class="hljs-number">0.001834</span>  <span class="hljs-number">0.020470</span></span><br><span class="line">c            <span class="hljs-number">0.000013</span>  <span class="hljs-number">0.000024</span>  <span class="hljs-number">0.000538</span>  <span class="hljs-number">0.002482</span>  <span class="hljs-number">0.007257</span>  <span class="hljs-number">0.012181</span></span><br><span class="line">d            <span class="hljs-number">0.017028</span>  <span class="hljs-number">0.001844</span>  <span class="hljs-number">0.001482</span>  <span class="hljs-number">0.113858</span>  <span class="hljs-number">0.122908</span>  <span class="hljs-number">0.023387</span></span><br><span class="line">e            <span class="hljs-number">0.336941</span>  <span class="hljs-number">0.215133</span>  <span class="hljs-number">0.178415</span>  <span class="hljs-number">0.147556</span>  <span class="hljs-number">0.083853</span>  <span class="hljs-number">0.067959</span></span><br><span class="line"><span class="hljs-meta">... </span>              ...       ...       ...       ...       ...       ...</span><br><span class="line">v                 NaN  <span class="hljs-number">0.000060</span>  <span class="hljs-number">0.000117</span>  <span class="hljs-number">0.000113</span></span><br><span class="line"><span class="hljs-number">0.000037</span>  <span class="hljs-number">0.001434</span></span><br><span class="line">w            <span class="hljs-number">0.000020</span>  <span class="hljs-number">0.000031</span>  <span class="hljs-number">0.001182</span>  <span class="hljs-number">0.006329</span>  <span class="hljs-number">0.007711</span>  <span class="hljs-number">0.016148</span></span><br><span class="line">x            <span class="hljs-number">0.000015</span>  <span class="hljs-number">0.000037</span>  <span class="hljs-number">0.000727</span>  <span class="hljs-number">0.003965</span>  <span class="hljs-number">0.001851</span>  <span class="hljs-number">0.008614</span></span><br><span class="line">y            <span class="hljs-number">0.110972</span>  <span class="hljs-number">0.152569</span>  <span class="hljs-number">0.116828</span>  <span class="hljs-number">0.077349</span>  <span class="hljs-number">0.160987</span>  <span class="hljs-number">0.058168</span></span><br><span class="line">z            <span class="hljs-number">0.002439</span>  <span class="hljs-number">0.000659</span>  <span class="hljs-number">0.000704</span>  <span class="hljs-number">0.000170</span>  <span class="hljs-number">0.000184</span>  <span class="hljs-number">0.001831</span></span><br><span class="line">[<span class="hljs-number">26</span> rows x <span class="hljs-number">6</span> columns]</span><br></pre></td></tr></table></figure><p>有了这个字母比例数据之后，就可以生成一张各年度各性别的条形图了，如图14-8所示：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">fig, axes = plt.subplots(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, figsize=(<span class="hljs-number">10</span>, <span class="hljs-number">8</span>))</span><br><span class="line">letter_prop[<span class="hljs-string">'M'</span>].plot(kind=<span class="hljs-string">'bar'</span>, rot=<span class="hljs-number">0</span>, ax=axes[<span class="hljs-number">0</span>], title=<span class="hljs-string">'Male'</span>)</span><br><span class="line">letter_prop[<span class="hljs-string">'F'</span>].plot(kind=<span class="hljs-string">'bar'</span>, rot=<span class="hljs-number">0</span>, ax=axes[<span class="hljs-number">1</span>], title=<span class="hljs-string">'Female'</span>,</span><br><span class="line">                      legend=<span class="hljs-literal">False</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-67686f38e66ef5f1.webp" alt="img"></p><p>图14-8 男孩女孩名字中各个末字母的比例</p><p>可以看出，从20世纪60年代开始，以字母”n”结尾的男孩名字出现了显著的增长。回到之前创建的那个完整表，按年度和性别对其进行规范化处理，并在男孩名字中选取几个字母，最后进行转置以便将各个列做成一个时间序列：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">138</span>]: letter_prop = table / table.sum()</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">139</span>]: dny_ts = letter_prop.loc[[<span class="hljs-string">'d'</span>, <span class="hljs-string">'n'</span>, <span class="hljs-string">'y'</span>], <span class="hljs-string">'M'</span>].T</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">140</span>]: dny_ts.head()</span><br><span class="line">Out[<span class="hljs-number">140</span>]: </span><br><span class="line">last_letter         d         n         y</span><br><span class="line">year                                     </span><br><span class="line"><span class="hljs-number">1880</span>         <span class="hljs-number">0.083055</span>  <span class="hljs-number">0.153213</span>  <span class="hljs-number">0.075760</span></span><br><span class="line"><span class="hljs-number">1881</span>         <span class="hljs-number">0.083247</span>  <span class="hljs-number">0.153214</span>  <span class="hljs-number">0.077451</span></span><br><span class="line"><span class="hljs-number">1882</span>         <span class="hljs-number">0.085340</span>  <span class="hljs-number">0.149560</span>  <span class="hljs-number">0.077537</span></span><br><span class="line"><span class="hljs-number">1883</span>         <span class="hljs-number">0.084066</span>  <span class="hljs-number">0.151646</span>  <span class="hljs-number">0.079144</span></span><br><span class="line"><span class="hljs-number">1884</span>         <span class="hljs-number">0.086120</span>  <span class="hljs-number">0.149915</span>  <span class="hljs-number">0.080405</span></span><br></pre></td></tr></table></figure><p>有了这个时间序列的DataFrame之后，就可以通过其plot方法绘制出一张趋势图了（如图14-9所示）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">143</span>]: dny_ts.plot()</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-51c431b2490424c2.webp" alt="img"></p><p>图14-9 各年出生的男孩中名字以d/n/y结尾的人数比例</p><h2 id="变成女孩名字的男孩名字（以及相反的情况）"><a href="#变成女孩名字的男孩名字（以及相反的情况）" class="headerlink" title="变成女孩名字的男孩名字（以及相反的情况）"></a>变成女孩名字的男孩名字（以及相反的情况）</h2><p>另一个有趣的趋势是，早年流行于男孩的名字近年来“变性了”，例如Lesley或Leslie。回到top1000数据集，找出其中以”lesl”开头的一组名字：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">144</span>]: all_names = pd.Series(top1000.name.unique())</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">145</span>]: lesley_like = all_names[all_names.str.lower().str.contains(<span class="hljs-string">'lesl'</span>)]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">146</span>]: lesley_like</span><br><span class="line">Out[<span class="hljs-number">146</span>]: </span><br><span class="line"><span class="hljs-number">632</span>     Leslie</span><br><span class="line"><span class="hljs-number">2294</span>    Lesley</span><br><span class="line"><span class="hljs-number">4262</span>    Leslee</span><br><span class="line"><span class="hljs-number">4728</span>     Lesli</span><br><span class="line"><span class="hljs-number">6103</span>     Lesly</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><p>然后利用这个结果过滤其他的名字，并按名字分组计算出生数以查看相对频率：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">147</span>]: filtered = top1000[top1000.name.isin(lesley_like)]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">148</span>]: filtered.groupby(<span class="hljs-string">'name'</span>).births.sum()</span><br><span class="line">Out[<span class="hljs-number">148</span>]: </span><br><span class="line">name</span><br><span class="line">Leslee      <span class="hljs-number">1082</span></span><br><span class="line">Lesley     <span class="hljs-number">35022</span></span><br><span class="line">Lesli        <span class="hljs-number">929</span></span><br><span class="line">Leslie    <span class="hljs-number">370429</span></span><br><span class="line">Lesly      <span class="hljs-number">10067</span></span><br><span class="line">Name: births, dtype: int64</span><br></pre></td></tr></table></figure><p>接下来，我们按性别和年度进行聚合，并按年度进行规范化处理：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">149</span>]: table = filtered.pivot_table(<span class="hljs-string">'births'</span>, index=<span class="hljs-string">'year'</span>,</span><br><span class="line">   .....:                              columns=<span class="hljs-string">'sex'</span>, aggfunc=<span class="hljs-string">'sum'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">150</span>]: table = table.div(table.sum(<span class="hljs-number">1</span>), axis=<span class="hljs-number">0</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">151</span>]: table.tail()</span><br><span class="line">Out[<span class="hljs-number">151</span>]: </span><br><span class="line">sex     F   M</span><br><span class="line">year         </span><br><span class="line"><span class="hljs-number">2006</span>  <span class="hljs-number">1.0</span> NaN</span><br><span class="line"><span class="hljs-number">2007</span>  <span class="hljs-number">1.0</span> NaN</span><br><span class="line"><span class="hljs-number">2008</span>  <span class="hljs-number">1.0</span> NaN</span><br><span class="line"><span class="hljs-number">2009</span>  <span class="hljs-number">1.0</span> NaN</span><br><span class="line"><span class="hljs-number">2010</span>  <span class="hljs-number">1.0</span> NaN</span><br></pre></td></tr></table></figure><p>最后，就可以轻松绘制一张分性别的年度曲线图了（如图2-10所示）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">153</span>]: table.plot(style=&#123;<span class="hljs-string">'M'</span>: <span class="hljs-string">'k-'</span>, <span class="hljs-string">'F'</span>: <span class="hljs-string">'k--'</span>&#125;)</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-b99d98f8bb5fc695.webp" alt="img"></p><p>图14-10 各年度使用“Lesley型”名字的男女比例</p><h1 id="14-4-USDA食品数据库"><a href="#14-4-USDA食品数据库" class="headerlink" title="14.4 USDA食品数据库"></a>14.4 USDA食品数据库</h1><p>美国农业部（USDA）制作了一份有关食物营养信息的数据库。Ashley Williams制作了该数据的JSON版（<a href="http://ashleyw.co.uk/project/food-nutrient-database）。其中的记录如下所示：" target="_blank" rel="noopener">http://ashleyw.co.uk/project/food-nutrient-database）。其中的记录如下所示：</a></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="hljs-string">"id"</span>: <span class="hljs-number">21441</span>,</span><br><span class="line">  <span class="hljs-string">"description"</span>: <span class="hljs-string">"KENTUCKY FRIED CHICKEN, Fried Chicken, EXTRA CRISPY,</span></span><br><span class="line"><span class="hljs-string">Wing, meat and skin with breading"</span>,</span><br><span class="line">  <span class="hljs-string">"tags"</span>: [<span class="hljs-string">"KFC"</span>],</span><br><span class="line">  <span class="hljs-string">"manufacturer"</span>: <span class="hljs-string">"Kentucky Fried Chicken"</span>,</span><br><span class="line"><span class="hljs-string">"group"</span>: <span class="hljs-string">"Fast Foods"</span>,</span><br><span class="line">  <span class="hljs-string">"portions"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="hljs-string">"amount"</span>: <span class="hljs-number">1</span>,</span><br><span class="line">      <span class="hljs-string">"unit"</span>: <span class="hljs-string">"wing, with skin"</span>,</span><br><span class="line">      <span class="hljs-string">"grams"</span>: <span class="hljs-number">68.0</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">  ],</span><br><span class="line">  <span class="hljs-string">"nutrients"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="hljs-string">"value"</span>: <span class="hljs-number">20.8</span>,</span><br><span class="line">      <span class="hljs-string">"units"</span>: <span class="hljs-string">"g"</span>,</span><br><span class="line">      <span class="hljs-string">"description"</span>: <span class="hljs-string">"Protein"</span>,</span><br><span class="line">      <span class="hljs-string">"group"</span>: <span class="hljs-string">"Composition"</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每种食物都带有若干标识性属性以及两个有关营养成分和分量的列表。这种形式的数据不是很适合分析工作，因此我们需要做一些规整化以使其具有更好用的形式。</p><p>从上面列举的那个网址下载并解压数据之后，你可以用任何喜欢的JSON库将其加载到Python中。我用的是Python内置的json模块：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">154</span>]: <span class="hljs-keyword">import</span> json</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">155</span>]: db = json.load(open(<span class="hljs-string">'datasets/usda_food/database.json'</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">156</span>]: len(db)</span><br><span class="line">Out[<span class="hljs-number">156</span>]: <span class="hljs-number">6636</span></span><br></pre></td></tr></table></figure><p>db中的每个条目都是一个含有某种食物全部数据的字典。nutrients字段是一个字典列表，其中的每个字典对应一种营养成分：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">157</span>]: db[<span class="hljs-number">0</span>].keys()</span><br><span class="line">Out[<span class="hljs-number">157</span>]: dict_keys([<span class="hljs-string">'id'</span>, <span class="hljs-string">'description'</span>, <span class="hljs-string">'tags'</span>, <span class="hljs-string">'manufacturer'</span>, <span class="hljs-string">'group'</span>, <span class="hljs-string">'porti</span></span><br><span class="line"><span class="hljs-string">ons'</span>, <span class="hljs-string">'nutrients'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">158</span>]: db[<span class="hljs-number">0</span>][<span class="hljs-string">'nutrients'</span>][<span class="hljs-number">0</span>]</span><br><span class="line">Out[<span class="hljs-number">158</span>]: </span><br><span class="line">&#123;<span class="hljs-string">'description'</span>: <span class="hljs-string">'Protein'</span>,</span><br><span class="line"> <span class="hljs-string">'group'</span>: <span class="hljs-string">'Composition'</span>,</span><br><span class="line"> <span class="hljs-string">'units'</span>: <span class="hljs-string">'g'</span>,</span><br><span class="line"> <span class="hljs-string">'value'</span>: <span class="hljs-number">25.18</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">159</span>]: nutrients = pd.DataFrame(db[<span class="hljs-number">0</span>][<span class="hljs-string">'nutrients'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">160</span>]: nutrients[:<span class="hljs-number">7</span>]</span><br><span class="line">Out[<span class="hljs-number">160</span>]: </span><br><span class="line">                   description        group units    value</span><br><span class="line"><span class="hljs-number">0</span>                      Protein  Composition     g    <span class="hljs-number">25.18</span></span><br><span class="line"><span class="hljs-number">1</span>            Total lipid (fat)  Composition     g    <span class="hljs-number">29.20</span></span><br><span class="line"><span class="hljs-number">2</span>  Carbohydrate, by difference  Composition     g     <span class="hljs-number">3.06</span></span><br><span class="line"><span class="hljs-number">3</span>                          Ash        Other     g     <span class="hljs-number">3.28</span></span><br><span class="line"><span class="hljs-number">4</span>                       Energy       Energy  kcal   <span class="hljs-number">376.00</span></span><br><span class="line"><span class="hljs-number">5</span>                        Water  Composition     g    <span class="hljs-number">39.28</span></span><br><span class="line"><span class="hljs-number">6</span>                       Energy       Energy    kJ  <span class="hljs-number">1573.00</span></span><br></pre></td></tr></table></figure><p>在将字典列表转换为DataFrame时，可以只抽取其中的一部分字段。这里，我们将取出食物的名称、分类、编号以及制造商等信息：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">161</span>]: info_keys = [<span class="hljs-string">'description'</span>, <span class="hljs-string">'group'</span>, <span class="hljs-string">'id'</span>, <span class="hljs-string">'manufacturer'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">162</span>]: info = pd.DataFrame(db, columns=info_keys)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">163</span>]: info[:<span class="hljs-number">5</span>]</span><br><span class="line">Out[<span class="hljs-number">163</span>]: </span><br><span class="line">                          description                   group    id  \</span><br><span class="line"><span class="hljs-number">0</span>                     Cheese, caraway  Dairy <span class="hljs-keyword">and</span> Egg Products  <span class="hljs-number">1008</span>   </span><br><span class="line"><span class="hljs-number">1</span>                     Cheese, cheddar  Dairy <span class="hljs-keyword">and</span> Egg Products  <span class="hljs-number">1009</span></span><br><span class="line"><span class="hljs-number">2</span>                        Cheese, edam  Dairy <span class="hljs-keyword">and</span> Egg Products  <span class="hljs-number">1018</span>   </span><br><span class="line"><span class="hljs-number">3</span>                        Cheese, feta  Dairy <span class="hljs-keyword">and</span> Egg Products  <span class="hljs-number">1019</span>   </span><br><span class="line"><span class="hljs-number">4</span>  Cheese, mozzarella, part skim milk  Dairy <span class="hljs-keyword">and</span> Egg Products  <span class="hljs-number">1028</span>   </span><br><span class="line">  manufacturer  </span><br><span class="line"><span class="hljs-number">0</span>               </span><br><span class="line"><span class="hljs-number">1</span>               </span><br><span class="line"><span class="hljs-number">2</span>               </span><br><span class="line"><span class="hljs-number">3</span>               </span><br><span class="line"><span class="hljs-number">4</span>               </span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">164</span>]: info.info()</span><br><span class="line">&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> '<span class="hljs-title">pandas</span>.<span class="hljs-title">core</span>.<span class="hljs-title">frame</span>.<span class="hljs-title">DataFrame</span>'&gt;</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-title">RangeIndex</span>:</span> <span class="hljs-number">6636</span> entries, <span class="hljs-number">0</span> to <span class="hljs-number">6635</span></span><br><span class="line">Data columns (total <span class="hljs-number">4</span> columns):</span><br><span class="line">description     <span class="hljs-number">6636</span> non-null object</span><br><span class="line">group           <span class="hljs-number">6636</span> non-null object</span><br><span class="line">id              <span class="hljs-number">6636</span> non-null int64</span><br><span class="line">manufacturer    <span class="hljs-number">5195</span> non-null object</span><br><span class="line">dtypes: int64(<span class="hljs-number">1</span>), object(<span class="hljs-number">3</span>)</span><br><span class="line">memory usage: <span class="hljs-number">207.5</span>+ KB</span><br></pre></td></tr></table></figure><p>通过value_counts，你可以查看食物类别的分布情况：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">165</span>]: pd.value_counts(info.group)[:<span class="hljs-number">10</span>]</span><br><span class="line">Out[<span class="hljs-number">165</span>]: </span><br><span class="line">Vegetables <span class="hljs-keyword">and</span> Vegetable Products    <span class="hljs-number">812</span></span><br><span class="line">Beef Products                        <span class="hljs-number">618</span></span><br><span class="line">Baked Products                       <span class="hljs-number">496</span></span><br><span class="line">Breakfast Cereals                    <span class="hljs-number">403</span></span><br><span class="line">Fast Foods                           <span class="hljs-number">365</span></span><br><span class="line">Legumes <span class="hljs-keyword">and</span> Legume Products          <span class="hljs-number">365</span></span><br><span class="line">Lamb, Veal, <span class="hljs-keyword">and</span> Game Products        <span class="hljs-number">345</span></span><br><span class="line">Sweets                               <span class="hljs-number">341</span></span><br><span class="line">Pork Products                        <span class="hljs-number">328</span></span><br><span class="line">Fruits <span class="hljs-keyword">and</span> Fruit Juices              <span class="hljs-number">328</span></span><br><span class="line">Name: group, dtype: int64</span><br></pre></td></tr></table></figure><p>现在，为了对全部营养数据做一些分析，最简单的办法是将所有食物的营养成分整合到一个大表中。我们分几个步骤来实现该目的。首先，将各食物的营养成分列表转换为一个DataFrame，并添加一个表示编号的列，然后将该DataFrame添加到一个列表中。最后通过concat将这些东西连接起来就可以了：</p><p>顺利的话，nutrients的结果是：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">167</span>]: nutrients</span><br><span class="line">Out[<span class="hljs-number">167</span>]: </span><br><span class="line">                               description        group units    value     id</span><br><span class="line"><span class="hljs-number">0</span>                                  Protein  Composition     g   <span class="hljs-number">25.180</span>   <span class="hljs-number">1008</span></span><br><span class="line"><span class="hljs-number">1</span>                        Total lipid (fat)  Composition     g   <span class="hljs-number">29.200</span>   <span class="hljs-number">1008</span></span><br><span class="line"><span class="hljs-number">2</span>              Carbohydrate, by difference  Composition     g    <span class="hljs-number">3.060</span>   <span class="hljs-number">1008</span></span><br><span class="line"><span class="hljs-number">3</span>                                      Ash        Other     g    <span class="hljs-number">3.280</span>   <span class="hljs-number">1008</span></span><br><span class="line"><span class="hljs-number">4</span>                                   Energy       Energy  kcal  <span class="hljs-number">376.000</span>   <span class="hljs-number">1008</span></span><br><span class="line"><span class="hljs-meta">... </span>                                   ...          ...</span><br><span class="line"><span class="hljs-meta">... </span>     ...    ...</span><br><span class="line"><span class="hljs-number">389350</span>                 Vitamin B<span class="hljs-number">-12</span>, added     Vitamins   mcg    <span class="hljs-number">0.000</span>  <span class="hljs-number">43546</span></span><br><span class="line"><span class="hljs-number">389351</span>                         Cholesterol        Other    mg    <span class="hljs-number">0.000</span>  <span class="hljs-number">43546</span></span><br><span class="line"><span class="hljs-number">389352</span>        Fatty acids, total saturated        Other     g    <span class="hljs-number">0.072</span>  <span class="hljs-number">43546</span></span><br><span class="line"><span class="hljs-number">389353</span>  Fatty acids, total monounsaturated        Other     g    <span class="hljs-number">0.028</span>  <span class="hljs-number">43546</span></span><br><span class="line"><span class="hljs-number">389354</span>  Fatty acids, total polyunsaturated        Other     g    <span class="hljs-number">0.041</span>  <span class="hljs-number">43546</span></span><br><span class="line">[<span class="hljs-number">389355</span> rows x <span class="hljs-number">5</span> columns]</span><br></pre></td></tr></table></figure><p>我发现这个DataFrame中无论如何都会有一些重复项，所以直接丢弃就可以了：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">168</span>]: nutrients.duplicated().sum()  <span class="hljs-comment"># number of duplicates</span></span><br><span class="line">Out[<span class="hljs-number">168</span>]: <span class="hljs-number">14179</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">169</span>]: nutrients = nutrients.drop_duplicates()</span><br></pre></td></tr></table></figure><p>由于两个DataFrame对象中都有”group”和”description”，所以为了明确到底谁是谁，我们需要对它们进行重命名：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">170</span>]: col_mapping = &#123;<span class="hljs-string">'description'</span> : <span class="hljs-string">'food'</span>,</span><br><span class="line">   .....:                <span class="hljs-string">'group'</span>       : <span class="hljs-string">'fgroup'</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">171</span>]: info = info.rename(columns=col_mapping, copy=<span class="hljs-literal">False</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">172</span>]: info.info()</span><br><span class="line">&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> '<span class="hljs-title">pandas</span>.<span class="hljs-title">core</span>.<span class="hljs-title">frame</span>.<span class="hljs-title">DataFrame</span>'&gt;</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-title">RangeIndex</span>:</span> <span class="hljs-number">6636</span> entries, <span class="hljs-number">0</span> to <span class="hljs-number">6635</span></span><br><span class="line">Data columns (total <span class="hljs-number">4</span> columns):</span><br><span class="line">food            <span class="hljs-number">6636</span> non-null object</span><br><span class="line">fgroup          <span class="hljs-number">6636</span> non-null object</span><br><span class="line">id              <span class="hljs-number">6636</span> non-null int64</span><br><span class="line">manufacturer    <span class="hljs-number">5195</span> non-null object</span><br><span class="line">dtypes: int64(<span class="hljs-number">1</span>), object(<span class="hljs-number">3</span>)</span><br><span class="line">memory usage: <span class="hljs-number">207.5</span>+ KB</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">173</span>]: col_mapping = &#123;<span class="hljs-string">'description'</span> : <span class="hljs-string">'nutrient'</span>,</span><br><span class="line">   .....:                <span class="hljs-string">'group'</span> : <span class="hljs-string">'nutgroup'</span>&#125;</span><br><span class="line">In [<span class="hljs-number">174</span>]: nutrients = nutrients.rename(columns=col_mapping, copy=<span class="hljs-literal">False</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">175</span>]: nutrients</span><br><span class="line">Out[<span class="hljs-number">175</span>]: </span><br><span class="line">                                  nutrient     nutgroup units    value     id</span><br><span class="line"><span class="hljs-number">0</span>                                  Protein  Composition     g   <span class="hljs-number">25.180</span>   <span class="hljs-number">1008</span></span><br><span class="line"><span class="hljs-number">1</span>                        Total lipid (fat)  Composition     g   <span class="hljs-number">29.200</span>   <span class="hljs-number">1008</span></span><br><span class="line"><span class="hljs-number">2</span>              Carbohydrate, by difference  Composition     g    <span class="hljs-number">3.060</span>   <span class="hljs-number">1008</span></span><br><span class="line"><span class="hljs-number">3</span>                                      Ash        Other     g    <span class="hljs-number">3.280</span>   <span class="hljs-number">1008</span></span><br><span class="line"><span class="hljs-number">4</span>                                   Energy       Energy  kcal  <span class="hljs-number">376.000</span>   <span class="hljs-number">1008</span></span><br><span class="line"><span class="hljs-meta">... </span>                                   ...          ...   ...      ...    ...</span><br><span class="line"><span class="hljs-number">389350</span>                 Vitamin B<span class="hljs-number">-12</span>, added     Vitamins   mcg    <span class="hljs-number">0.000</span>  <span class="hljs-number">43546</span></span><br><span class="line"><span class="hljs-number">389351</span>                         Cholesterol        Other    mg    <span class="hljs-number">0.000</span>  <span class="hljs-number">43546</span></span><br><span class="line"><span class="hljs-number">389352</span>        Fatty acids, total saturated        Other     g    <span class="hljs-number">0.072</span>  <span class="hljs-number">43546</span></span><br><span class="line"><span class="hljs-number">389353</span>  Fatty acids, total monounsaturated        Other     g    <span class="hljs-number">0.028</span>  <span class="hljs-number">43546</span></span><br><span class="line"><span class="hljs-number">389354</span>  Fatty acids, total polyunsaturated        Other     g    <span class="hljs-number">0.041</span>  <span class="hljs-number">43546</span></span><br><span class="line">[<span class="hljs-number">375176</span> rows x <span class="hljs-number">5</span> columns]</span><br></pre></td></tr></table></figure><p>做完这些，就可以将info跟nutrients合并起来：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">176</span>]: ndata = pd.merge(nutrients, info, on=<span class="hljs-string">'id'</span>, how=<span class="hljs-string">'outer'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">177</span>]: ndata.info()</span><br><span class="line">&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> '<span class="hljs-title">pandas</span>.<span class="hljs-title">core</span>.<span class="hljs-title">frame</span>.<span class="hljs-title">DataFrame</span>'&gt;</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-title">Int64Index</span>:</span> <span class="hljs-number">375176</span> entries, <span class="hljs-number">0</span> to <span class="hljs-number">375175</span></span><br><span class="line">Data columns (total <span class="hljs-number">8</span> columns):</span><br><span class="line">nutrient        <span class="hljs-number">375176</span> non-null object</span><br><span class="line">nutgroup        <span class="hljs-number">375176</span> non-null object</span><br><span class="line">units           <span class="hljs-number">375176</span> non-null object</span><br><span class="line">value           <span class="hljs-number">375176</span> non-null float64</span><br><span class="line">id              <span class="hljs-number">375176</span> non-null int64</span><br><span class="line">food            <span class="hljs-number">375176</span> non-null object</span><br><span class="line">fgroup          <span class="hljs-number">375176</span> non-null object</span><br><span class="line">manufacturer    <span class="hljs-number">293054</span> non-null object</span><br><span class="line">dtypes: float64(<span class="hljs-number">1</span>), int64(<span class="hljs-number">1</span>), object(<span class="hljs-number">6</span>)</span><br><span class="line">memory usage: <span class="hljs-number">25.8</span>+ MB</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">178</span>]: ndata.iloc[<span class="hljs-number">30000</span>]</span><br><span class="line">Out[<span class="hljs-number">178</span>]: </span><br><span class="line">nutrient                                       Glycine</span><br><span class="line">nutgroup                                   Amino Acids</span><br><span class="line">units                                                g</span><br><span class="line">value                                             <span class="hljs-number">0.04</span></span><br><span class="line">id                                                <span class="hljs-number">6158</span></span><br><span class="line">food            Soup, tomato bisque, canned, condensed</span><br><span class="line">fgroup                      Soups, Sauces, <span class="hljs-keyword">and</span> Gravies</span><br><span class="line">manufacturer                                          </span><br><span class="line">Name: <span class="hljs-number">30000</span>, dtype: object</span><br></pre></td></tr></table></figure><p>我们现在可以根据食物分类和营养类型画出一张中位值图（如图14-11所示）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">180</span>]: result = ndata.groupby([<span class="hljs-string">'nutrient'</span>, <span class="hljs-string">'fgroup'</span>])[<span class="hljs-string">'value'</span>].quantile(<span class="hljs-number">0.5</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">181</span>]: result[<span class="hljs-string">'Zinc, Zn'</span>].sort_values().plot(kind=<span class="hljs-string">'barh'</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-99b176d022a444c0.webp" alt="img"></p><p>图片14-11 根据营养分类得出的锌中位值</p><p>只要稍微动一动脑子，就可以发现各营养成分最为丰富的食物是什么了：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">by_nutrient = ndata.groupby([<span class="hljs-string">'nutgroup'</span>, <span class="hljs-string">'nutrient'</span>])</span><br><span class="line"></span><br><span class="line">get_maximum = <span class="hljs-keyword">lambda</span> x: x.loc[x.value.idxmax()]</span><br><span class="line">get_minimum = <span class="hljs-keyword">lambda</span> x: x.loc[x.value.idxmin()]</span><br><span class="line"></span><br><span class="line">max_foods = by_nutrient.apply(get_maximum)[[<span class="hljs-string">'value'</span>, <span class="hljs-string">'food'</span>]]</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># make the food a little smaller</span></span><br><span class="line">max_foods.food = max_foods.food.str[:<span class="hljs-number">50</span>]</span><br></pre></td></tr></table></figure><p>由于得到的DataFrame很大，所以不方便在书里面全部打印出来。这里只给出”Amino Acids”营养分组：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">183</span>]: max_foods.loc[<span class="hljs-string">'Amino Acids'</span>][<span class="hljs-string">'food'</span>]</span><br><span class="line">Out[<span class="hljs-number">183</span>]: </span><br><span class="line">nutrient</span><br><span class="line">Alanine                          Gelatins, dry powder, unsweetened</span><br><span class="line">Arginine                              Seeds, sesame flour, low-fat</span><br><span class="line">Aspartic acid                                  Soy protein isolate</span><br><span class="line">Cystine               Seeds, cottonseed flour, low fat (glandless)</span><br><span class="line">Glutamic acid                                  Soy protein isolate</span><br><span class="line">                                       ...                        </span><br><span class="line">Serine           Soy protein isolate, PROTEIN TECHNOLOGIES INTE...</span><br><span class="line">Threonine        Soy protein isolate, PROTEIN TECHNOLOGIES INTE...</span><br><span class="line">Tryptophan        Sea lion, Steller, meat <span class="hljs-keyword">with</span> fat (Alaska Native)</span><br><span class="line">Tyrosine         Soy protein isolate, PROTEIN TECHNOLOGIES INTE...</span><br><span class="line">Valine           Soy protein isolate, PROTEIN TECHNOLOGIES INTE...</span><br><span class="line">Name: food, Length: <span class="hljs-number">19</span>, dtype: object</span><br></pre></td></tr></table></figure><h1 id="14-5-2012联邦选举委员会数据库"><a href="#14-5-2012联邦选举委员会数据库" class="headerlink" title="14.5 2012联邦选举委员会数据库"></a>14.5 2012联邦选举委员会数据库</h1><p>美国联邦选举委员会发布了有关政治竞选赞助方面的数据。其中包括赞助者的姓名、职业、雇主、地址以及出资额等信息。我们对2012年美国总统大选的数据集比较感兴趣（<a href="http://www.fec.gov/disclosurep/PDownload.do）。我在2012年6月下载的数据集是一个150MB的CSV文件（P00000001-ALL.csv），我们先用pandas.read_csv将其加载进来：" target="_blank" rel="noopener">http://www.fec.gov/disclosurep/PDownload.do）。我在2012年6月下载的数据集是一个150MB的CSV文件（P00000001-ALL.csv），我们先用pandas.read_csv将其加载进来：</a></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">184</span>]: fec = pd.read_csv(<span class="hljs-string">'datasets/fec/P00000001-ALL.csv'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">185</span>]: fec.info()</span><br><span class="line">&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> '<span class="hljs-title">pandas</span>.<span class="hljs-title">core</span>.<span class="hljs-title">frame</span>.<span class="hljs-title">DataFrame</span>'&gt;</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-title">RangeIndex</span>:</span> <span class="hljs-number">1001731</span> entries, <span class="hljs-number">0</span> to <span class="hljs-number">1001730</span></span><br><span class="line">Data columns (total <span class="hljs-number">16</span> columns):</span><br><span class="line">cmte_id              <span class="hljs-number">1001731</span> non-null object</span><br><span class="line">cand_id              <span class="hljs-number">1001731</span> non-null object</span><br><span class="line">cand_nm              <span class="hljs-number">1001731</span> non-null object</span><br><span class="line">contbr_nm            <span class="hljs-number">1001731</span> non-null object</span><br><span class="line">contbr_city          <span class="hljs-number">1001712</span> non-null object</span><br><span class="line">contbr_st            <span class="hljs-number">1001727</span> non-null object</span><br><span class="line">contbr_zip           <span class="hljs-number">1001620</span> non-null object</span><br><span class="line">contbr_employer      <span class="hljs-number">988002</span> non-null object</span><br><span class="line">contbr_occupation    <span class="hljs-number">993301</span> non-null object</span><br><span class="line">contb_receipt_amt    <span class="hljs-number">1001731</span> non-null float64</span><br><span class="line">contb_receipt_dt     <span class="hljs-number">1001731</span> non-null object</span><br><span class="line">receipt_desc         <span class="hljs-number">14166</span> non-null object</span><br><span class="line">memo_cd              <span class="hljs-number">92482</span> non-null object</span><br><span class="line">memo_text            <span class="hljs-number">97770</span> non-null object</span><br><span class="line">form_tp              <span class="hljs-number">1001731</span> non-null object</span><br><span class="line">file_num             <span class="hljs-number">1001731</span> non-null int64</span><br><span class="line">dtypes: float64(<span class="hljs-number">1</span>), int64(<span class="hljs-number">1</span>), object(<span class="hljs-number">14</span>)</span><br><span class="line">memory usage: <span class="hljs-number">122.3</span>+ MB</span><br></pre></td></tr></table></figure><p>该DataFrame中的记录如下所示：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">186</span>]: fec.iloc[<span class="hljs-number">123456</span>]</span><br><span class="line">Out[<span class="hljs-number">186</span>]: </span><br><span class="line">cmte_id             C00431445</span><br><span class="line">cand_id             P80003338</span><br><span class="line">cand_nm         Obama, Barack</span><br><span class="line">contbr_nm         ELLMAN, IRA</span><br><span class="line">contbr_city             TEMPE</span><br><span class="line">                    ...      </span><br><span class="line">receipt_desc              NaN</span><br><span class="line">memo_cd                   NaN</span><br><span class="line">memo_text                 NaN</span><br><span class="line">form_tp                 SA17A</span><br><span class="line">file_num               <span class="hljs-number">772372</span></span><br><span class="line">Name: <span class="hljs-number">123456</span>, Length: <span class="hljs-number">16</span>, dtype: object</span><br></pre></td></tr></table></figure><p>你可能已经想出了许多办法从这些竞选赞助数据中抽取有关赞助人和赞助模式的统计信息。我将在接下来的内容中介绍几种不同的分析工作（运用到目前为止已经学到的方法）。</p><p>不难看出，该数据中没有党派信息，因此最好把它加进去。通过unique，你可以获取全部的候选人名单：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">187</span>]: unique_cands = fec.cand_nm.unique()</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">188</span>]: unique_cands</span><br><span class="line">Out[<span class="hljs-number">188</span>]: </span><br><span class="line">array([<span class="hljs-string">'Bachmann, Michelle'</span>, <span class="hljs-string">'Romney, Mitt'</span>, <span class="hljs-string">'Obama, Barack'</span>,</span><br><span class="line">       <span class="hljs-string">"Roemer, Charles E. 'Buddy' III"</span>, <span class="hljs-string">'Pawlenty, Timothy'</span>,</span><br><span class="line">       <span class="hljs-string">'Johnson, Gary Earl'</span>, <span class="hljs-string">'Paul, Ron'</span>, <span class="hljs-string">'Santorum, Rick'</span>, <span class="hljs-string">'Cain, Herman'</span>,</span><br><span class="line">       <span class="hljs-string">'Gingrich, Newt'</span>, <span class="hljs-string">'McCotter, Thaddeus G'</span>, <span class="hljs-string">'Huntsman, Jon'</span>,</span><br><span class="line">       <span class="hljs-string">'Perry, Rick'</span>], dtype=object)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">189</span>]: unique_cands[<span class="hljs-number">2</span>]</span><br><span class="line">Out[<span class="hljs-number">189</span>]: <span class="hljs-string">'Obama, Barack'</span></span><br></pre></td></tr></table></figure><p>指明党派信息的方法之一是使用字典：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">parties = &#123;<span class="hljs-string">'Bachmann, Michelle'</span>: <span class="hljs-string">'Republican'</span>,</span><br><span class="line">           <span class="hljs-string">'Cain, Herman'</span>: <span class="hljs-string">'Republican'</span>,</span><br><span class="line">           <span class="hljs-string">'Gingrich, Newt'</span>: <span class="hljs-string">'Republican'</span>,</span><br><span class="line">           <span class="hljs-string">'Huntsman, Jon'</span>: <span class="hljs-string">'Republican'</span>,</span><br><span class="line">           <span class="hljs-string">'Johnson, Gary Earl'</span>: <span class="hljs-string">'Republican'</span>,</span><br><span class="line">           <span class="hljs-string">'McCotter, Thaddeus G'</span>: <span class="hljs-string">'Republican'</span>,</span><br><span class="line">           <span class="hljs-string">'Obama, Barack'</span>: <span class="hljs-string">'Democrat'</span>,</span><br><span class="line">           <span class="hljs-string">'Paul, Ron'</span>: <span class="hljs-string">'Republican'</span>,</span><br><span class="line">           <span class="hljs-string">'Pawlenty, Timothy'</span>: <span class="hljs-string">'Republican'</span>,</span><br><span class="line">           <span class="hljs-string">'Perry, Rick'</span>: <span class="hljs-string">'Republican'</span>,</span><br><span class="line">           <span class="hljs-string">"Roemer, Charles E. 'Buddy' III"</span>: <span class="hljs-string">'Republican'</span>,</span><br><span class="line">           <span class="hljs-string">'Romney, Mitt'</span>: <span class="hljs-string">'Republican'</span>,</span><br><span class="line">           <span class="hljs-string">'Santorum, Rick'</span>: <span class="hljs-string">'Republican'</span>&#125;</span><br></pre></td></tr></table></figure><p>现在，通过这个映射以及Series对象的map方法，你可以根据候选人姓名得到一组党派信息：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">191</span>]: fec.cand_nm[<span class="hljs-number">123456</span>:<span class="hljs-number">123461</span>]</span><br><span class="line">Out[<span class="hljs-number">191</span>]: </span><br><span class="line"><span class="hljs-number">123456</span>    Obama, Barack</span><br><span class="line"><span class="hljs-number">123457</span>    Obama, Barack</span><br><span class="line"><span class="hljs-number">123458</span>    Obama, Barack</span><br><span class="line"><span class="hljs-number">123459</span>    Obama, Barack</span><br><span class="line"><span class="hljs-number">123460</span>    Obama, Barack</span><br><span class="line">Name: cand_nm, dtype: object</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">192</span>]: fec.cand_nm[<span class="hljs-number">123456</span>:<span class="hljs-number">123461</span>].map(parties)</span><br><span class="line">Out[<span class="hljs-number">192</span>]: </span><br><span class="line"><span class="hljs-number">123456</span>    Democrat</span><br><span class="line"><span class="hljs-number">123457</span>    Democrat</span><br><span class="line"><span class="hljs-number">123458</span>    Democrat</span><br><span class="line"><span class="hljs-number">123459</span>    Democrat</span><br><span class="line"><span class="hljs-number">123460</span>    Democrat</span><br><span class="line">Name: cand_nm, dtype: object</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Add it as a column</span></span><br><span class="line">In [<span class="hljs-number">193</span>]: fec[<span class="hljs-string">'party'</span>] = fec.cand_nm.map(parties)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">194</span>]: fec[<span class="hljs-string">'party'</span>].value_counts()</span><br><span class="line">Out[<span class="hljs-number">194</span>]: </span><br><span class="line">Democrat      <span class="hljs-number">593746</span></span><br><span class="line">Republican    <span class="hljs-number">407985</span></span><br><span class="line">Name: party, dtype: int64</span><br></pre></td></tr></table></figure><p>这里有两个需要注意的地方。第一，该数据既包括赞助也包括退款（负的出资额）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">195</span>]: (fec.contb_receipt_amt &gt; <span class="hljs-number">0</span>).value_counts()</span><br><span class="line">Out[<span class="hljs-number">195</span>]: </span><br><span class="line"><span class="hljs-literal">True</span>     <span class="hljs-number">991475</span></span><br><span class="line"><span class="hljs-literal">False</span>     <span class="hljs-number">10256</span></span><br><span class="line">Name: contb_receipt_amt, dtype: int64</span><br></pre></td></tr></table></figure><p>为了简化分析过程，我限定该数据集只能有正的出资额：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">196</span>]: fec = fec[fec.contb_receipt_amt &gt; <span class="hljs-number">0</span>]</span><br></pre></td></tr></table></figure><p>由于Barack Obama和Mitt Romney是最主要的两名候选人，所以我还专门准备了一个子集，只包含针对他们两人的竞选活动的赞助信息：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">197</span>]: fec_mrbo = fec[fec.cand_nm.isin([<span class="hljs-string">'Obama, Barack'</span>,<span class="hljs-string">'Romney, Mitt'</span>])]</span><br></pre></td></tr></table></figure><h2 id="根据职业和雇主统计赞助信息"><a href="#根据职业和雇主统计赞助信息" class="headerlink" title="根据职业和雇主统计赞助信息"></a>根据职业和雇主统计赞助信息</h2><p>基于职业的赞助信息统计是另一种经常被研究的统计任务。例如，律师们更倾向于资助民主党，而企业主则更倾向于资助共和党。你可以不相信我，自己看那些数据就知道了。首先，根据职业计算出资总额，这很简单：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">198</span>]: fec.contbr_occupation.value_counts()[:<span class="hljs-number">10</span>]</span><br><span class="line">Out[<span class="hljs-number">198</span>]: </span><br><span class="line">RETIRED                                   <span class="hljs-number">233990</span></span><br><span class="line">INFORMATION REQUESTED                      <span class="hljs-number">35107</span></span><br><span class="line">ATTORNEY                                   <span class="hljs-number">34286</span></span><br><span class="line">HOMEMAKER                                  <span class="hljs-number">29931</span></span><br><span class="line">PHYSICIAN                                  <span class="hljs-number">23432</span></span><br><span class="line">INFORMATION REQUESTED PER BEST EFFORTS     <span class="hljs-number">21138</span></span><br><span class="line">ENGINEER                                   <span class="hljs-number">14334</span></span><br><span class="line">TEACHER                                    <span class="hljs-number">13990</span></span><br><span class="line">CONSULTANT                                 <span class="hljs-number">13273</span></span><br><span class="line">PROFESSOR                                  <span class="hljs-number">12555</span></span><br><span class="line">Name: contbr_occupation, dtype: int64</span><br></pre></td></tr></table></figure><p>不难看出，许多职业都涉及相同的基本工作类型，或者同一样东西有多种变体。下面的代码片段可以清理一些这样的数据（将一个职业信息映射到另一个）。注意，这里巧妙地利用了dict.get，它允许没有映射关系的职业也能“通过”：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">occ_mapping = &#123;</span><br><span class="line">   <span class="hljs-string">'INFORMATION REQUESTED PER BEST EFFORTS'</span> : <span class="hljs-string">'NOT PROVIDED'</span>,</span><br><span class="line">   <span class="hljs-string">'INFORMATION REQUESTED'</span> : <span class="hljs-string">'NOT PROVIDED'</span>,</span><br><span class="line">   <span class="hljs-string">'INFORMATION REQUESTED (BEST EFFORTS)'</span> : <span class="hljs-string">'NOT PROVIDED'</span>,</span><br><span class="line">   <span class="hljs-string">'C.E.O.'</span>: <span class="hljs-string">'CEO'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># If no mapping provided, return x</span></span><br><span class="line">f = <span class="hljs-keyword">lambda</span> x: occ_mapping.get(x, x)</span><br><span class="line">fec.contbr_occupation = fec.contbr_occupation.map(f)</span><br></pre></td></tr></table></figure><p>我对雇主信息也进行了同样的处理：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">emp_mapping = &#123;</span><br><span class="line">   <span class="hljs-string">'INFORMATION REQUESTED PER BEST EFFORTS'</span> : <span class="hljs-string">'NOT PROVIDED'</span>,</span><br><span class="line">   <span class="hljs-string">'INFORMATION REQUESTED'</span> : <span class="hljs-string">'NOT PROVIDED'</span>,</span><br><span class="line">   <span class="hljs-string">'SELF'</span> : <span class="hljs-string">'SELF-EMPLOYED'</span>,</span><br><span class="line">   <span class="hljs-string">'SELF EMPLOYED'</span> : <span class="hljs-string">'SELF-EMPLOYED'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># If no mapping provided, return x</span></span><br><span class="line">f = <span class="hljs-keyword">lambda</span> x: emp_mapping.get(x, x)</span><br><span class="line">fec.contbr_employer = fec.contbr_employer.map(f)</span><br></pre></td></tr></table></figure><p>现在，你可以通过pivot_table根据党派和职业对数据进行聚合，然后过滤掉总出资额不足200万美元的数据：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">201</span>]: by_occupation = fec.pivot_table(<span class="hljs-string">'contb_receipt_amt'</span>,</span><br><span class="line">   .....:                                 index=<span class="hljs-string">'contbr_occupation'</span>,</span><br><span class="line">   .....:                                 columns=<span class="hljs-string">'party'</span>, aggfunc=<span class="hljs-string">'sum'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">202</span>]: over_2mm = by_occupation[by_occupation.sum(<span class="hljs-number">1</span>) &gt; <span class="hljs-number">2000000</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">203</span>]: over_2mm</span><br><span class="line">Out[<span class="hljs-number">203</span>]: </span><br><span class="line">party                 Democrat    Republican</span><br><span class="line">contbr_occupation                           </span><br><span class="line">ATTORNEY           <span class="hljs-number">11141982.97</span>  <span class="hljs-number">7.477194e+06</span></span><br><span class="line">CEO                 <span class="hljs-number">2074974.79</span>  <span class="hljs-number">4.211041e+06</span></span><br><span class="line">CONSULTANT          <span class="hljs-number">2459912.71</span>  <span class="hljs-number">2.544725e+06</span></span><br><span class="line">ENGINEER             <span class="hljs-number">951525.55</span>  <span class="hljs-number">1.818374e+06</span></span><br><span class="line">EXECUTIVE           <span class="hljs-number">1355161.05</span>  <span class="hljs-number">4.138850e+06</span></span><br><span class="line"><span class="hljs-meta">... </span>                       ...           ...</span><br><span class="line">PRESIDENT           <span class="hljs-number">1878509.95</span>  <span class="hljs-number">4.720924e+06</span></span><br><span class="line">PROFESSOR           <span class="hljs-number">2165071.08</span>  <span class="hljs-number">2.967027e+05</span></span><br><span class="line">REAL ESTATE          <span class="hljs-number">528902.09</span>  <span class="hljs-number">1.625902e+06</span></span><br><span class="line">RETIRED            <span class="hljs-number">25305116.38</span>  <span class="hljs-number">2.356124e+07</span></span><br><span class="line">SELF-EMPLOYED        <span class="hljs-number">672393.40</span>  <span class="hljs-number">1.640253e+06</span></span><br><span class="line">[<span class="hljs-number">17</span> rows x <span class="hljs-number">2</span> columns]</span><br></pre></td></tr></table></figure><p>把这些数据做成柱状图看起来会更加清楚（’barh’表示水平柱状图，如图14-12所示）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">205</span>]: over_2mm.plot(kind=<span class="hljs-string">'barh'</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-d2254e547c6ce537.webp" alt="img"></p><p>图14-12 对各党派总出资额最高的职业</p><p>你可能还想了解一下对Obama和Romney总出资额最高的职业和企业。为此，我们先对候选人进行分组，然后使用本章前面介绍的类似top的方法：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_top_amounts</span><span class="hljs-params">(group, key, n=<span class="hljs-number">5</span>)</span>:</span></span><br><span class="line">    totals = group.groupby(key)[<span class="hljs-string">'contb_receipt_amt'</span>].sum()</span><br><span class="line">    <span class="hljs-keyword">return</span> totals.nlargest(n)</span><br></pre></td></tr></table></figure><p>然后根据职业和雇主进行聚合：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">207</span>]: grouped = fec_mrbo.groupby(<span class="hljs-string">'cand_nm'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">208</span>]: grouped.apply(get_top_amounts, <span class="hljs-string">'contbr_occupation'</span>, n=<span class="hljs-number">7</span>)</span><br><span class="line">Out[<span class="hljs-number">208</span>]: </span><br><span class="line">cand_nm        contbr_occupation    </span><br><span class="line">Obama, Barack  RETIRED                  <span class="hljs-number">25305116.38</span></span><br><span class="line">               ATTORNEY                 <span class="hljs-number">11141982.97</span></span><br><span class="line">               INFORMATION REQUESTED     <span class="hljs-number">4866973.96</span></span><br><span class="line">               HOMEMAKER                 <span class="hljs-number">4248875.80</span></span><br><span class="line">               PHYSICIAN                 <span class="hljs-number">3735124.94</span></span><br><span class="line">                                           ...     </span><br><span class="line">Romney, Mitt   HOMEMAKER                 <span class="hljs-number">8147446.22</span></span><br><span class="line">               ATTORNEY                  <span class="hljs-number">5364718.82</span></span><br><span class="line">               PRESIDENT                 <span class="hljs-number">2491244.89</span></span><br><span class="line">               EXECUTIVE                 <span class="hljs-number">2300947.03</span></span><br><span class="line">               C.E.O.                    <span class="hljs-number">1968386.11</span></span><br><span class="line">Name: contb_receipt_amt, Length: <span class="hljs-number">14</span>, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">209</span>]: grouped.apply(get_top_amounts, <span class="hljs-string">'contbr_employer'</span>, n=<span class="hljs-number">10</span>)</span><br><span class="line">Out[<span class="hljs-number">209</span>]: </span><br><span class="line">cand_nm        contbr_employer      </span><br><span class="line">Obama, Barack  RETIRED                  <span class="hljs-number">22694358.85</span></span><br><span class="line">               SELF-EMPLOYED            <span class="hljs-number">17080985.96</span></span><br><span class="line">               NOT EMPLOYED              <span class="hljs-number">8586308.70</span></span><br><span class="line">               INFORMATION REQUESTED     <span class="hljs-number">5053480.37</span></span><br><span class="line">               HOMEMAKER                 <span class="hljs-number">2605408.54</span></span><br><span class="line">                                           ...     </span><br><span class="line">Romney, Mitt   CREDIT SUISSE              <span class="hljs-number">281150.00</span></span><br><span class="line">               MORGAN STANLEY             <span class="hljs-number">267266.00</span></span><br><span class="line">               GOLDMAN SACH &amp; CO.         <span class="hljs-number">238250.00</span></span><br><span class="line">               BARCLAYS CAPITAL           <span class="hljs-number">162750.00</span></span><br><span class="line">               H.I.G. CAPITAL             <span class="hljs-number">139500.00</span></span><br><span class="line">Name: contb_receipt_amt, Length: <span class="hljs-number">20</span>, dtype: float64</span><br></pre></td></tr></table></figure><h2 id="对出资额分组"><a href="#对出资额分组" class="headerlink" title="对出资额分组"></a>对出资额分组</h2><p>还可以对该数据做另一种非常实用的分析：利用cut函数根据出资额的大小将数据离散化到多个面元中：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">210</span>]: bins = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">100</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">10000</span>,</span><br><span class="line">   .....:                  <span class="hljs-number">100000</span>, <span class="hljs-number">1000000</span>, <span class="hljs-number">10000000</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">211</span>]: labels = pd.cut(fec_mrbo.contb_receipt_amt, bins)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">212</span>]: labels</span><br><span class="line">Out[<span class="hljs-number">212</span>]: </span><br><span class="line"><span class="hljs-number">411</span>         (<span class="hljs-number">10</span>, <span class="hljs-number">100</span>]</span><br><span class="line"><span class="hljs-number">412</span>       (<span class="hljs-number">100</span>, <span class="hljs-number">1000</span>]</span><br><span class="line"><span class="hljs-number">413</span>       (<span class="hljs-number">100</span>, <span class="hljs-number">1000</span>]</span><br><span class="line"><span class="hljs-number">414</span>         (<span class="hljs-number">10</span>, <span class="hljs-number">100</span>]</span><br><span class="line"><span class="hljs-number">415</span>         (<span class="hljs-number">10</span>, <span class="hljs-number">100</span>]</span><br><span class="line">             ...     </span><br><span class="line"><span class="hljs-number">701381</span>      (<span class="hljs-number">10</span>, <span class="hljs-number">100</span>]</span><br><span class="line"><span class="hljs-number">701382</span>    (<span class="hljs-number">100</span>, <span class="hljs-number">1000</span>]</span><br><span class="line"><span class="hljs-number">701383</span>        (<span class="hljs-number">1</span>, <span class="hljs-number">10</span>]</span><br><span class="line"><span class="hljs-number">701384</span>      (<span class="hljs-number">10</span>, <span class="hljs-number">100</span>]</span><br><span class="line"><span class="hljs-number">701385</span>    (<span class="hljs-number">100</span>, <span class="hljs-number">1000</span>]</span><br><span class="line">Name: contb_receipt_amt, Length: <span class="hljs-number">694282</span>, dtype: category</span><br><span class="line">Categories (<span class="hljs-number">8</span>, interval[int64]): [(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>] &lt; (<span class="hljs-number">1</span>, <span class="hljs-number">10</span>] &lt; (<span class="hljs-number">10</span>, <span class="hljs-number">100</span>] &lt; (<span class="hljs-number">100</span>, <span class="hljs-number">1000</span>] &lt; (<span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-number">000</span>, <span class="hljs-number">10000</span>] &lt;</span><br><span class="line">                                  (<span class="hljs-number">10000</span>, <span class="hljs-number">100000</span>] &lt; (<span class="hljs-number">100000</span>, <span class="hljs-number">1000000</span>] &lt; (<span class="hljs-number">1000000</span>,</span><br><span class="line"> <span class="hljs-number">10000000</span>]]</span><br></pre></td></tr></table></figure><p>现在可以根据候选人姓名以及面元标签对奥巴马和罗姆尼数据进行分组，以得到一个柱状图：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">213</span>]: grouped = fec_mrbo.groupby([<span class="hljs-string">'cand_nm'</span>, labels])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">214</span>]: grouped.size().unstack(<span class="hljs-number">0</span>)</span><br><span class="line">Out[<span class="hljs-number">214</span>]: </span><br><span class="line">cand_nm              Obama, Barack  Romney, Mitt</span><br><span class="line">contb_receipt_amt                               </span><br><span class="line">(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>]                       <span class="hljs-number">493.0</span>          <span class="hljs-number">77.0</span></span><br><span class="line">(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>]                    <span class="hljs-number">40070.0</span>        <span class="hljs-number">3681.0</span></span><br><span class="line">(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>]                 <span class="hljs-number">372280.0</span>       <span class="hljs-number">31853.0</span></span><br><span class="line">(<span class="hljs-number">100</span>, <span class="hljs-number">1000</span>]               <span class="hljs-number">153991.0</span>       <span class="hljs-number">43357.0</span></span><br><span class="line">(<span class="hljs-number">1000</span>, <span class="hljs-number">10000</span>]              <span class="hljs-number">22284.0</span>       <span class="hljs-number">26186.0</span></span><br><span class="line">(<span class="hljs-number">10000</span>, <span class="hljs-number">100000</span>]                <span class="hljs-number">2.0</span>           <span class="hljs-number">1.0</span></span><br><span class="line">(<span class="hljs-number">100000</span>, <span class="hljs-number">1000000</span>]              <span class="hljs-number">3.0</span>           NaN</span><br><span class="line">(<span class="hljs-number">1000000</span>, <span class="hljs-number">10000000</span>]            <span class="hljs-number">4.0</span>           NaN</span><br></pre></td></tr></table></figure><p>从这个数据中可以看出，在小额赞助方面，Obama获得的数量比Romney多得多。你还可以对出资额求和并在面元内规格化，以便图形化显示两位候选人各种赞助额度的比例（见图14-13）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">216</span>]: bucket_sums = grouped.contb_receipt_amt.sum().unstack(<span class="hljs-number">0</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">217</span>]: normed_sums = bucket_sums.div(bucket_sums.sum(axis=<span class="hljs-number">1</span>), axis=<span class="hljs-number">0</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">218</span>]: normed_sums</span><br><span class="line">Out[<span class="hljs-number">218</span>]: </span><br><span class="line">cand_nm              Obama, Barack  Romney, Mitt</span><br><span class="line">contb_receipt_amt                               </span><br><span class="line">(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>]                    <span class="hljs-number">0.805182</span>      <span class="hljs-number">0.194818</span></span><br><span class="line">(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>]                   <span class="hljs-number">0.918767</span>      <span class="hljs-number">0.081233</span></span><br><span class="line">(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>]                 <span class="hljs-number">0.910769</span>      <span class="hljs-number">0.089231</span></span><br><span class="line">(<span class="hljs-number">100</span>, <span class="hljs-number">1000</span>]               <span class="hljs-number">0.710176</span>      <span class="hljs-number">0.289824</span></span><br><span class="line">(<span class="hljs-number">1000</span>, <span class="hljs-number">10000</span>]             <span class="hljs-number">0.447326</span>      <span class="hljs-number">0.552674</span></span><br><span class="line">(<span class="hljs-number">10000</span>, <span class="hljs-number">100000</span>]           <span class="hljs-number">0.823120</span>      <span class="hljs-number">0.176880</span></span><br><span class="line">(<span class="hljs-number">100000</span>, <span class="hljs-number">1000000</span>]         <span class="hljs-number">1.000000</span>           NaN</span><br><span class="line">(<span class="hljs-number">1000000</span>, <span class="hljs-number">10000000</span>]       <span class="hljs-number">1.000000</span>           NaN</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">219</span>]: normed_sums[:<span class="hljs-number">-2</span>].plot(kind=<span class="hljs-string">'barh'</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-77e8c8d3c784692b.webp" alt="img"></p><p>图14-13 两位候选人收到的各种捐赠额度的总额比例</p><p>我排除了两个最大的面元，因为这些不是由个人捐赠的。</p><p>还可以对该分析过程做许多的提炼和改进。比如说，可以根据赞助人的姓名和邮编对数据进行聚合，以便找出哪些人进行了多次小额捐款，哪些人又进行了一次或多次大额捐款。我强烈建议你下载这些数据并自己摸索一下。</p><h2 id="根据州统计赞助信息"><a href="#根据州统计赞助信息" class="headerlink" title="根据州统计赞助信息"></a>根据州统计赞助信息</h2><p>根据候选人和州对数据进行聚合是常规操作：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">220</span>]: grouped = fec_mrbo.groupby([<span class="hljs-string">'cand_nm'</span>, <span class="hljs-string">'contbr_st'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">221</span>]: totals = grouped.contb_receipt_amt.sum().unstack(<span class="hljs-number">0</span>).fillna(<span class="hljs-number">0</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">222</span>]: totals = totals[totals.sum(<span class="hljs-number">1</span>) &gt; <span class="hljs-number">100000</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">223</span>]: totals[:<span class="hljs-number">10</span>]</span><br><span class="line">Out[<span class="hljs-number">223</span>]: </span><br><span class="line">cand_nm    Obama, Barack  Romney, Mitt</span><br><span class="line">contbr_st                             </span><br><span class="line">AK             <span class="hljs-number">281840.15</span>      <span class="hljs-number">86204.24</span></span><br><span class="line">AL             <span class="hljs-number">543123.48</span>     <span class="hljs-number">527303.51</span></span><br><span class="line">AR             <span class="hljs-number">359247.28</span>     <span class="hljs-number">105556.00</span></span><br><span class="line">AZ            <span class="hljs-number">1506476.98</span>    <span class="hljs-number">1888436.23</span></span><br><span class="line">CA           <span class="hljs-number">23824984.24</span>   <span class="hljs-number">11237636.60</span></span><br><span class="line">CO            <span class="hljs-number">2132429.49</span>    <span class="hljs-number">1506714.12</span></span><br><span class="line">CT            <span class="hljs-number">2068291.26</span>    <span class="hljs-number">3499475.45</span></span><br><span class="line">DC            <span class="hljs-number">4373538.80</span>    <span class="hljs-number">1025137.50</span></span><br><span class="line">DE             <span class="hljs-number">336669.14</span>      <span class="hljs-number">82712.00</span></span><br><span class="line">FL            <span class="hljs-number">7318178.58</span>    <span class="hljs-number">8338458.81</span></span><br></pre></td></tr></table></figure><p>如果对各行除以总赞助额，就会得到各候选人在各州的总赞助额比例：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">224</span>]: percent = totals.div(totals.sum(<span class="hljs-number">1</span>), axis=<span class="hljs-number">0</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">225</span>]: percent[:<span class="hljs-number">10</span>]</span><br><span class="line">Out[<span class="hljs-number">225</span>]: </span><br><span class="line">cand_nm    Obama, Barack  Romney, Mitt</span><br><span class="line">contbr_st                             </span><br><span class="line">AK              <span class="hljs-number">0.765778</span>      <span class="hljs-number">0.234222</span></span><br><span class="line">AL              <span class="hljs-number">0.507390</span>      <span class="hljs-number">0.492610</span></span><br><span class="line">AR              <span class="hljs-number">0.772902</span>      <span class="hljs-number">0.227098</span></span><br><span class="line">AZ              <span class="hljs-number">0.443745</span>      <span class="hljs-number">0.556255</span></span><br><span class="line">CA              <span class="hljs-number">0.679498</span>      <span class="hljs-number">0.320502</span></span><br><span class="line">CO              <span class="hljs-number">0.585970</span>      <span class="hljs-number">0.414030</span></span><br><span class="line">CT              <span class="hljs-number">0.371476</span>      <span class="hljs-number">0.628524</span></span><br><span class="line">DC              <span class="hljs-number">0.810113</span>      <span class="hljs-number">0.189887</span></span><br><span class="line">DE              <span class="hljs-number">0.802776</span>      <span class="hljs-number">0.197224</span></span><br><span class="line">FL              <span class="hljs-number">0.467417</span>      <span class="hljs-number">0.532583</span></span><br></pre></td></tr></table></figure><h1 id="14-6-总结"><a href="#14-6-总结" class="headerlink" title="14.6 总结"></a>14.6 总结</h1><p>我们已经完成了正文的最后一章。附录中有一些额外的内容，可能对你有用。</p><p>本书第一版出版已经有5年了，Python已经成为了一个流行的、广泛使用的数据分析语言。你从本书中学到的方法，在相当长的一段时间都是可用的。我希望本书介绍的工具和库对你的工作有用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载自&lt;a href=&quot;https://www.jianshu.com/p/72b6c83bb69e&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;../《利用Python进行数据分析·第2版》第1章%20准备工作&quot;&gt;第1章 准备工作&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第2章%20Python语法基础，IPython和Jupyter%20Notebooks&quot;&gt;第2章 Python语法基础，IPython和Jupyter Notebooks&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第3章%20Python的数据结构、函数和文件&quot;&gt;第3章 Python的数据结构、函数和文件&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第4章%20NumPy基础：数组和矢量计算&quot;&gt;第4章 NumPy基础：数组和矢量计算&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第5章%20pandas入门&quot;&gt;第5章 pandas入门&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第6章%20数据加载、存储与文件格式&quot;&gt;第6章 数据加载、存储与文件格式&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第7章%20数据清洗和准备&quot;&gt;第7章 数据清洗和准备&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第8章%20数据规整：聚合、合并和重塑&quot;&gt;第8章 数据规整：聚合、合并和重塑&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第9章%20绘图和可视化&quot;&gt;第9章 绘图和可视化&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第10章%20数据聚合与分组运算&quot;&gt;第10章 数据聚合与分组运算&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第11章%20时间序列&quot;&gt;第11章 时间序列&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第12章%20pandas高级应用&quot;&gt;第12章 pandas高级应用&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第13章%20Python建模库介绍&quot;&gt;第13章 Python建模库介绍&lt;/a&gt;&lt;br&gt;第14章 数据分析案例&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》附录A%20NumPy高级应用&quot;&gt;附录A NumPy高级应用&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》附录B%20更多关于IPython的内容（完）&quot;&gt;附录B 更多关于IPython的内容（完）&lt;/a&gt;      &lt;/p&gt;
    
    </summary>
    
    
      <category term="数据分析" scheme="https://glanhoo.coding.me/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="https://glanhoo.coding.me/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="pandas" scheme="https://glanhoo.coding.me/tags/pandas/"/>
    
      <category term="python" scheme="https://glanhoo.coding.me/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>《利用Python进行数据分析·第2版》第13章 Python建模库介绍</title>
    <link href="https://glanhoo.coding.me/2019/11/05/%E3%80%8A%E5%88%A9%E7%94%A8Python%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%C2%B7%E7%AC%AC2%E7%89%88%E3%80%8B%E7%AC%AC13%E7%AB%A0%20Python%E5%BB%BA%E6%A8%A1%E5%BA%93%E4%BB%8B%E7%BB%8D/"/>
    <id>https://glanhoo.coding.me/2019/11/05/%E3%80%8A%E5%88%A9%E7%94%A8Python%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%C2%B7%E7%AC%AC2%E7%89%88%E3%80%8B%E7%AC%AC13%E7%AB%A0%20Python%E5%BB%BA%E6%A8%A1%E5%BA%93%E4%BB%8B%E7%BB%8D/</id>
    <published>2019-11-05T02:02:53.000Z</published>
    <updated>2019-12-11T02:21:33.306Z</updated>
    
    <content type="html"><![CDATA[<p>转载自<a href="https://www.jianshu.com/p/e46a1ac36aa5" target="_blank" rel="noopener">简书</a></p><p><a href="../《利用Python进行数据分析·第2版》第1章%20准备工作">第1章 准备工作</a><br> <a href="../《利用Python进行数据分析·第2版》第2章%20Python语法基础，IPython和Jupyter%20Notebooks">第2章 Python语法基础，IPython和Jupyter Notebooks</a><br> <a href="../《利用Python进行数据分析·第2版》第3章%20Python的数据结构、函数和文件">第3章 Python的数据结构、函数和文件</a><br> <a href="../《利用Python进行数据分析·第2版》第4章%20NumPy基础：数组和矢量计算">第4章 NumPy基础：数组和矢量计算</a><br> <a href="../《利用Python进行数据分析·第2版》第5章%20pandas入门">第5章 pandas入门</a><br> <a href="../《利用Python进行数据分析·第2版》第6章%20数据加载、存储与文件格式">第6章 数据加载、存储与文件格式</a><br> <a href="../《利用Python进行数据分析·第2版》第7章%20数据清洗和准备">第7章 数据清洗和准备</a><br> <a href="../《利用Python进行数据分析·第2版》第8章%20数据规整：聚合、合并和重塑">第8章 数据规整：聚合、合并和重塑</a><br> <a href="../《利用Python进行数据分析·第2版》第9章%20绘图和可视化">第9章 绘图和可视化</a><br> <a href="../《利用Python进行数据分析·第2版》第10章%20数据聚合与分组运算">第10章 数据聚合与分组运算</a><br> <a href="../《利用Python进行数据分析·第2版》第11章%20时间序列">第11章 时间序列</a><br> <a href="../《利用Python进行数据分析·第2版》第12章%20pandas高级应用">第12章 pandas高级应用</a><br>第13章 Python建模库介绍<br> <a href="../《利用Python进行数据分析·第2版》第14章%20数据分析案例">第14章 数据分析案例</a><br> <a href="../《利用Python进行数据分析·第2版》附录A%20NumPy高级应用">附录A NumPy高级应用</a><br> <a href="../《利用Python进行数据分析·第2版》附录B%20更多关于IPython的内容（完）">附录B 更多关于IPython的内容（完）</a>      </p><a id="more"></a><hr><p>本书中，我已经介绍了Python数据分析的编程基础。因为数据分析师和科学家总是在数据规整和准备上花费大量时间，这本书的重点在于掌握这些功能。</p><p>开发模型选用什么库取决于应用本身。许多统计问题可以用简单方法解决，比如普通的最小二乘回归，其它问题可能需要复杂的机器学习方法。幸运的是，Python已经成为了运用这些分析方法的语言之一，因此读完此书，你可以探索许多工具。</p><p>本章中，我会回顾一些pandas的特点，在你胶着于pandas数据规整和模型拟合和评分时，它们可能派上用场。然后我会简短介绍两个流行的建模工具，statsmodels和scikit-learn。这二者每个都值得再写一本书，我就不做全面的介绍，而是建议你学习两个项目的线上文档和其它基于Python的数据科学、统计和机器学习的书籍。</p><h1 id="13-1-pandas与模型代码的接口"><a href="#13-1-pandas与模型代码的接口" class="headerlink" title="13.1 pandas与模型代码的接口"></a>13.1 pandas与模型代码的接口</h1><p>模型开发的通常工作流是使用pandas进行数据加载和清洗，然后切换到建模库进行建模。开发模型的重要一环是机器学习中的“特征工程”。它可以描述从原始数据集中提取信息的任何数据转换或分析，这些数据集可能在建模中有用。本书中学习的数据聚合和GroupBy工具常用于特征工程中。</p><p>优秀的特征工程超出了本书的范围，我会尽量直白地介绍一些用于数据操作和建模切换的方法。</p><p>pandas与其它分析库通常是靠NumPy的数组联系起来的。将DataFrame转换为NumPy数组，可以使用.values属性：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">10</span>]: <span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">11</span>]: <span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">12</span>]: data = pd.DataFrame(&#123;</span><br><span class="line">   ....:     <span class="hljs-string">'x0'</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>],</span><br><span class="line">   ....:     <span class="hljs-string">'x1'</span>: [<span class="hljs-number">0.01</span>, <span class="hljs-number">-0.01</span>, <span class="hljs-number">0.25</span>, <span class="hljs-number">-4.1</span>, <span class="hljs-number">0.</span>],</span><br><span class="line">   ....:     <span class="hljs-string">'y'</span>: [<span class="hljs-number">-1.5</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">3.6</span>, <span class="hljs-number">1.3</span>, <span class="hljs-number">-2.</span>]&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">13</span>]: data</span><br><span class="line">Out[<span class="hljs-number">13</span>]: </span><br><span class="line">   x0    x1    y</span><br><span class="line"><span class="hljs-number">0</span>   <span class="hljs-number">1</span>  <span class="hljs-number">0.01</span> <span class="hljs-number">-1.5</span></span><br><span class="line"><span class="hljs-number">1</span>   <span class="hljs-number">2</span> <span class="hljs-number">-0.01</span>  <span class="hljs-number">0.0</span></span><br><span class="line"><span class="hljs-number">2</span>   <span class="hljs-number">3</span>  <span class="hljs-number">0.25</span>  <span class="hljs-number">3.6</span></span><br><span class="line"><span class="hljs-number">3</span>   <span class="hljs-number">4</span> <span class="hljs-number">-4.10</span>  <span class="hljs-number">1.3</span></span><br><span class="line"><span class="hljs-number">4</span>   <span class="hljs-number">5</span>  <span class="hljs-number">0.00</span> <span class="hljs-number">-2.0</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">14</span>]: data.columns</span><br><span class="line">Out[<span class="hljs-number">14</span>]: Index([<span class="hljs-string">'x0'</span>, <span class="hljs-string">'x1'</span>, <span class="hljs-string">'y'</span>], dtype=<span class="hljs-string">'object'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">15</span>]: data.values</span><br><span class="line">Out[<span class="hljs-number">15</span>]: </span><br><span class="line">array([[ <span class="hljs-number">1.</span>  ,  <span class="hljs-number">0.01</span>, <span class="hljs-number">-1.5</span> ],</span><br><span class="line">       [ <span class="hljs-number">2.</span>  , <span class="hljs-number">-0.01</span>,  <span class="hljs-number">0.</span>  ],</span><br><span class="line">       [ <span class="hljs-number">3.</span>  ,  <span class="hljs-number">0.25</span>,  <span class="hljs-number">3.6</span> ],</span><br><span class="line">       [ <span class="hljs-number">4.</span>  , <span class="hljs-number">-4.1</span> ,  <span class="hljs-number">1.3</span> ],</span><br><span class="line">       [ <span class="hljs-number">5.</span>  ,  <span class="hljs-number">0.</span>  , <span class="hljs-number">-2.</span>  ]])</span><br></pre></td></tr></table></figure><p>要转换回DataFrame，可以传递一个二维ndarray，可带有列名：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">16</span>]: df2 = pd.DataFrame(data.values, columns=[<span class="hljs-string">'one'</span>, <span class="hljs-string">'two'</span>, <span class="hljs-string">'three'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">17</span>]: df2</span><br><span class="line">Out[<span class="hljs-number">17</span>]: </span><br><span class="line">   one   two  three</span><br><span class="line"><span class="hljs-number">0</span>  <span class="hljs-number">1.0</span>  <span class="hljs-number">0.01</span>   <span class="hljs-number">-1.5</span></span><br><span class="line"><span class="hljs-number">1</span>  <span class="hljs-number">2.0</span> <span class="hljs-number">-0.01</span>    <span class="hljs-number">0.0</span></span><br><span class="line"><span class="hljs-number">2</span>  <span class="hljs-number">3.0</span>  <span class="hljs-number">0.25</span>    <span class="hljs-number">3.6</span></span><br><span class="line"><span class="hljs-number">3</span>  <span class="hljs-number">4.0</span> <span class="hljs-number">-4.10</span>    <span class="hljs-number">1.3</span></span><br><span class="line"><span class="hljs-number">4</span>  <span class="hljs-number">5.0</span>  <span class="hljs-number">0.00</span>   <span class="hljs-number">-2.0</span></span><br></pre></td></tr></table></figure><blockquote><p>笔记：最好当数据是均匀的时候使用.values属性。例如，全是数值类型。如果数据是不均匀的，结果会是Python对象的ndarray：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">18</span>]: df3 = data.copy()</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">19</span>]: df3[<span class="hljs-string">'strings'</span>] = [<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>, <span class="hljs-string">'e'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">20</span>]: df3</span><br><span class="line">Out[<span class="hljs-number">20</span>]: </span><br><span class="line">  x0    x1    y strings</span><br><span class="line"><span class="hljs-number">0</span>   <span class="hljs-number">1</span>  <span class="hljs-number">0.01</span> <span class="hljs-number">-1.5</span>       a</span><br><span class="line"><span class="hljs-number">1</span>   <span class="hljs-number">2</span> <span class="hljs-number">-0.01</span>  <span class="hljs-number">0.0</span>       b</span><br><span class="line"><span class="hljs-number">2</span>   <span class="hljs-number">3</span>  <span class="hljs-number">0.25</span>  <span class="hljs-number">3.6</span>       c</span><br><span class="line"><span class="hljs-number">3</span>   <span class="hljs-number">4</span> <span class="hljs-number">-4.10</span>  <span class="hljs-number">1.3</span>       d</span><br><span class="line"><span class="hljs-number">4</span>   <span class="hljs-number">5</span>  <span class="hljs-number">0.00</span> <span class="hljs-number">-2.0</span>       e</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">21</span>]: df3.values</span><br><span class="line">Out[<span class="hljs-number">21</span>]: </span><br><span class="line">array([[<span class="hljs-number">1</span>, <span class="hljs-number">0.01</span>, <span class="hljs-number">-1.5</span>, <span class="hljs-string">'a'</span>],</span><br><span class="line">      [<span class="hljs-number">2</span>, <span class="hljs-number">-0.01</span>, <span class="hljs-number">0.0</span>, <span class="hljs-string">'b'</span>],</span><br><span class="line">      [<span class="hljs-number">3</span>, <span class="hljs-number">0.25</span>, <span class="hljs-number">3.6</span>, <span class="hljs-string">'c'</span>],</span><br><span class="line">      [<span class="hljs-number">4</span>, <span class="hljs-number">-4.1</span>, <span class="hljs-number">1.3</span>, <span class="hljs-string">'d'</span>],</span><br><span class="line">      [<span class="hljs-number">5</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">-2.0</span>, <span class="hljs-string">'e'</span>]], dtype=object)</span><br></pre></td></tr></table></figure></blockquote><p>对于一些模型，你可能只想使用列的子集。我建议你使用loc，用values作索引：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">22</span>]: model_cols = [<span class="hljs-string">'x0'</span>, <span class="hljs-string">'x1'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">23</span>]: data.loc[:, model_cols].values</span><br><span class="line">Out[<span class="hljs-number">23</span>]: </span><br><span class="line">array([[ <span class="hljs-number">1.</span>  ,  <span class="hljs-number">0.01</span>],</span><br><span class="line">       [ <span class="hljs-number">2.</span>  , <span class="hljs-number">-0.01</span>],</span><br><span class="line">       [ <span class="hljs-number">3.</span>  ,  <span class="hljs-number">0.25</span>],</span><br><span class="line">       [ <span class="hljs-number">4.</span>  , <span class="hljs-number">-4.1</span> ],</span><br><span class="line">       [ <span class="hljs-number">5.</span>  ,  <span class="hljs-number">0.</span>  ]])</span><br></pre></td></tr></table></figure><p>一些库原生支持pandas，会自动完成工作：从DataFrame转换到NumPy，将模型的参数名添加到输出表的列或Series。其它情况，你可以手工进行“元数据管理”。</p><p>在第12章，我们学习了pandas的Categorical类型和pandas.get_dummies函数。假设数据集中有一个非数值列：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">24</span>]: data[<span class="hljs-string">'category'</span>] = pd.Categorical([<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'a'</span>, <span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>],</span><br><span class="line">   ....:                                   categories=[<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">25</span>]: data</span><br><span class="line">Out[<span class="hljs-number">25</span>]: </span><br><span class="line">   x0    x1    y category</span><br><span class="line"><span class="hljs-number">0</span>   <span class="hljs-number">1</span>  <span class="hljs-number">0.01</span> <span class="hljs-number">-1.5</span>        a</span><br><span class="line"><span class="hljs-number">1</span>   <span class="hljs-number">2</span> <span class="hljs-number">-0.01</span>  <span class="hljs-number">0.0</span>        b</span><br><span class="line"><span class="hljs-number">2</span>   <span class="hljs-number">3</span>  <span class="hljs-number">0.25</span>  <span class="hljs-number">3.6</span>        a</span><br><span class="line"><span class="hljs-number">3</span>   <span class="hljs-number">4</span> <span class="hljs-number">-4.10</span>  <span class="hljs-number">1.3</span>        a</span><br><span class="line"><span class="hljs-number">4</span>   <span class="hljs-number">5</span>  <span class="hljs-number">0.00</span> <span class="hljs-number">-2.0</span>        b</span><br></pre></td></tr></table></figure><p>如果我们想替换category列为虚变量，我们可以创建虚变量，删除category列，然后添加到结果：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">26</span>]: dummies = pd.get_dummies(data.category, prefix=<span class="hljs-string">'category'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">27</span>]: data_with_dummies = data.drop(<span class="hljs-string">'category'</span>, axis=<span class="hljs-number">1</span>).join(dummies)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">28</span>]: data_with_dummies</span><br><span class="line">Out[<span class="hljs-number">28</span>]: </span><br><span class="line">   x0    x1    y  category_a  category_b</span><br><span class="line"><span class="hljs-number">0</span>   <span class="hljs-number">1</span>  <span class="hljs-number">0.01</span> <span class="hljs-number">-1.5</span>           <span class="hljs-number">1</span>           <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-number">1</span>   <span class="hljs-number">2</span> <span class="hljs-number">-0.01</span>  <span class="hljs-number">0.0</span>           <span class="hljs-number">0</span>           <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-number">2</span>   <span class="hljs-number">3</span>  <span class="hljs-number">0.25</span>  <span class="hljs-number">3.6</span>           <span class="hljs-number">1</span>           <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-number">3</span>   <span class="hljs-number">4</span> <span class="hljs-number">-4.10</span>  <span class="hljs-number">1.3</span>           <span class="hljs-number">1</span>           <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-number">4</span>   <span class="hljs-number">5</span>  <span class="hljs-number">0.00</span> <span class="hljs-number">-2.0</span>           <span class="hljs-number">0</span>           <span class="hljs-number">1</span></span><br></pre></td></tr></table></figure><p>用虚变量拟合某些统计模型会有一些细微差别。当你不只有数字列时，使用Patsy（下一节的主题）可能更简单，更不容易出错。</p><h1 id="13-2-用Patsy创建模型描述"><a href="#13-2-用Patsy创建模型描述" class="headerlink" title="13.2 用Patsy创建模型描述"></a>13.2 用Patsy创建模型描述</h1><p>Patsy是Python的一个库，使用简短的字符串“公式语法”描述统计模型（尤其是线性模型），可能是受到了R和S统计编程语言的公式语法的启发。</p><p>Patsy适合描述statsmodels的线性模型，因此我会关注于它的主要特点，让你尽快掌握。Patsy的公式是一个特殊的字符串语法，如下所示：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y ~ x0 + x1</span><br></pre></td></tr></table></figure><p>a+b不是将a与b相加的意思，而是为模型创建的设计矩阵。patsy.dmatrices函数接收一个公式字符串和一个数据集（可以是DataFrame或数组的字典），为线性模型创建设计矩阵：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">29</span>]: data = pd.DataFrame(&#123;</span><br><span class="line">   ....:     <span class="hljs-string">'x0'</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>],</span><br><span class="line">   ....:     <span class="hljs-string">'x1'</span>: [<span class="hljs-number">0.01</span>, <span class="hljs-number">-0.01</span>, <span class="hljs-number">0.25</span>, <span class="hljs-number">-4.1</span>, <span class="hljs-number">0.</span>],</span><br><span class="line">   ....:     <span class="hljs-string">'y'</span>: [<span class="hljs-number">-1.5</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">3.6</span>, <span class="hljs-number">1.3</span>, <span class="hljs-number">-2.</span>]&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">30</span>]: data</span><br><span class="line">Out[<span class="hljs-number">30</span>]: </span><br><span class="line">   x0    x1    y</span><br><span class="line"><span class="hljs-number">0</span>   <span class="hljs-number">1</span>  <span class="hljs-number">0.01</span> <span class="hljs-number">-1.5</span></span><br><span class="line"><span class="hljs-number">1</span>   <span class="hljs-number">2</span> <span class="hljs-number">-0.01</span>  <span class="hljs-number">0.0</span></span><br><span class="line"><span class="hljs-number">2</span>   <span class="hljs-number">3</span>  <span class="hljs-number">0.25</span>  <span class="hljs-number">3.6</span></span><br><span class="line"><span class="hljs-number">3</span>   <span class="hljs-number">4</span> <span class="hljs-number">-4.10</span>  <span class="hljs-number">1.3</span></span><br><span class="line"><span class="hljs-number">4</span>   <span class="hljs-number">5</span>  <span class="hljs-number">0.00</span> <span class="hljs-number">-2.0</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">31</span>]: <span class="hljs-keyword">import</span> patsy</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">32</span>]: y, X = patsy.dmatrices(<span class="hljs-string">'y ~ x0 + x1'</span>, data)</span><br></pre></td></tr></table></figure><p>现在有：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">33</span>]: y</span><br><span class="line">Out[<span class="hljs-number">33</span>]: </span><br><span class="line">DesignMatrix <span class="hljs-keyword">with</span> shape (<span class="hljs-number">5</span>, <span class="hljs-number">1</span>)</span><br><span class="line">     y</span><br><span class="line">  <span class="hljs-number">-1.5</span></span><br><span class="line">   <span class="hljs-number">0.0</span></span><br><span class="line">   <span class="hljs-number">3.6</span></span><br><span class="line">   <span class="hljs-number">1.3</span></span><br><span class="line">  <span class="hljs-number">-2.0</span></span><br><span class="line">  Terms:</span><br><span class="line">    <span class="hljs-string">'y'</span> (column <span class="hljs-number">0</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">34</span>]: X</span><br><span class="line">Out[<span class="hljs-number">34</span>]: </span><br><span class="line">DesignMatrix <span class="hljs-keyword">with</span> shape (<span class="hljs-number">5</span>, <span class="hljs-number">3</span>)</span><br><span class="line">  Intercept  x0     x1</span><br><span class="line">          <span class="hljs-number">1</span>   <span class="hljs-number">1</span>   <span class="hljs-number">0.01</span></span><br><span class="line">          <span class="hljs-number">1</span>   <span class="hljs-number">2</span>  <span class="hljs-number">-0.01</span></span><br><span class="line">          <span class="hljs-number">1</span>   <span class="hljs-number">3</span>   <span class="hljs-number">0.25</span></span><br><span class="line">          <span class="hljs-number">1</span>   <span class="hljs-number">4</span>  <span class="hljs-number">-4.10</span></span><br><span class="line">          <span class="hljs-number">1</span>   <span class="hljs-number">5</span>   <span class="hljs-number">0.00</span></span><br><span class="line">  Terms:</span><br><span class="line">    <span class="hljs-string">'Intercept'</span> (column <span class="hljs-number">0</span>)</span><br><span class="line">    <span class="hljs-string">'x0'</span> (column <span class="hljs-number">1</span>)</span><br><span class="line">    <span class="hljs-string">'x1'</span> (column <span class="hljs-number">2</span>)</span><br></pre></td></tr></table></figure><p>这些Patsy的DesignMatrix实例是NumPy的ndarray，带有附加元数据：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">35</span>]: np.asarray(y)</span><br><span class="line">Out[<span class="hljs-number">35</span>]: </span><br><span class="line">array([[<span class="hljs-number">-1.5</span>],</span><br><span class="line">       [ <span class="hljs-number">0.</span> ],</span><br><span class="line">       [ <span class="hljs-number">3.6</span>],</span><br><span class="line">       [ <span class="hljs-number">1.3</span>],</span><br><span class="line">       [<span class="hljs-number">-2.</span> ]])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">36</span>]: np.asarray(X)</span><br><span class="line">Out[<span class="hljs-number">36</span>]: </span><br><span class="line">array([[ <span class="hljs-number">1.</span>  ,  <span class="hljs-number">1.</span>  ,  <span class="hljs-number">0.01</span>],</span><br><span class="line">       [ <span class="hljs-number">1.</span>  ,  <span class="hljs-number">2.</span>  , <span class="hljs-number">-0.01</span>],</span><br><span class="line">       [ <span class="hljs-number">1.</span>  ,  <span class="hljs-number">3.</span>  ,  <span class="hljs-number">0.25</span>],</span><br><span class="line">       [ <span class="hljs-number">1.</span>  ,  <span class="hljs-number">4.</span>  , <span class="hljs-number">-4.1</span> ],</span><br><span class="line">       [ <span class="hljs-number">1.</span>  ,  <span class="hljs-number">5.</span>  ,  <span class="hljs-number">0.</span>  ]])</span><br></pre></td></tr></table></figure><p>你可能想Intercept是哪里来的。这是线性模型（比如普通最小二乘回归）的惯例用法。添加 +0 到模型可以不显示intercept：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">37</span>]: patsy.dmatrices(<span class="hljs-string">'y ~ x0 + x1 + 0'</span>, data)[<span class="hljs-number">1</span>]</span><br><span class="line">Out[<span class="hljs-number">37</span>]: </span><br><span class="line">DesignMatrix <span class="hljs-keyword">with</span> shape (<span class="hljs-number">5</span>, <span class="hljs-number">2</span>)</span><br><span class="line">  x0     x1</span><br><span class="line">   <span class="hljs-number">1</span>   <span class="hljs-number">0.01</span></span><br><span class="line">   <span class="hljs-number">2</span>  <span class="hljs-number">-0.01</span></span><br><span class="line">   <span class="hljs-number">3</span>   <span class="hljs-number">0.25</span></span><br><span class="line">   <span class="hljs-number">4</span>  <span class="hljs-number">-4.10</span></span><br><span class="line">   <span class="hljs-number">5</span>   <span class="hljs-number">0.00</span></span><br><span class="line">  Terms:</span><br><span class="line">    <span class="hljs-string">'x0'</span> (column <span class="hljs-number">0</span>)</span><br><span class="line">    <span class="hljs-string">'x1'</span> (column <span class="hljs-number">1</span>)</span><br></pre></td></tr></table></figure><p>Patsy对象可以直接传递到算法（比如numpy.linalg.lstsq）中，它执行普通最小二乘回归：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">38</span>]: coef, resid, _, _ = np.linalg.lstsq(X, y)</span><br></pre></td></tr></table></figure><p>模型的元数据保留在design_info属性中，因此你可以重新附加列名到拟合系数，以获得一个Series，例如：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">39</span>]: coef</span><br><span class="line">Out[<span class="hljs-number">39</span>]: </span><br><span class="line">array([[ <span class="hljs-number">0.3129</span>],</span><br><span class="line">       [<span class="hljs-number">-0.0791</span>],</span><br><span class="line">       [<span class="hljs-number">-0.2655</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">40</span>]: coef = pd.Series(coef.squeeze(), index=X.design_info.column_names)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">41</span>]: coef</span><br><span class="line">Out[<span class="hljs-number">41</span>]: </span><br><span class="line">Intercept    <span class="hljs-number">0.312910</span></span><br><span class="line">x0          <span class="hljs-number">-0.079106</span></span><br><span class="line">x1          <span class="hljs-number">-0.265464</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><h2 id="用Patsy公式进行数据转换"><a href="#用Patsy公式进行数据转换" class="headerlink" title="用Patsy公式进行数据转换"></a>用Patsy公式进行数据转换</h2><p>你可以将Python代码与patsy公式结合。在评估公式时，库将尝试查找在封闭作用域内使用的函数：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">42</span>]: y, X = patsy.dmatrices(<span class="hljs-string">'y ~ x0 + np.log(np.abs(x1) + 1)'</span>, data)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">43</span>]: X</span><br><span class="line">Out[<span class="hljs-number">43</span>]: </span><br><span class="line">DesignMatrix <span class="hljs-keyword">with</span> shape (<span class="hljs-number">5</span>, <span class="hljs-number">3</span>)</span><br><span class="line">  Intercept  x0  np.log(np.abs(x1) + <span class="hljs-number">1</span>)</span><br><span class="line">          <span class="hljs-number">1</span>   <span class="hljs-number">1</span>                 <span class="hljs-number">0.00995</span></span><br><span class="line">          <span class="hljs-number">1</span>   <span class="hljs-number">2</span>                 <span class="hljs-number">0.00995</span></span><br><span class="line">          <span class="hljs-number">1</span>   <span class="hljs-number">3</span>                 <span class="hljs-number">0.22314</span></span><br><span class="line">          <span class="hljs-number">1</span>   <span class="hljs-number">4</span>                 <span class="hljs-number">1.62924</span></span><br><span class="line">          <span class="hljs-number">1</span>   <span class="hljs-number">5</span>                 <span class="hljs-number">0.00000</span></span><br><span class="line">  Terms:</span><br><span class="line">    <span class="hljs-string">'Intercept'</span> (column <span class="hljs-number">0</span>)</span><br><span class="line">    <span class="hljs-string">'x0'</span> (column <span class="hljs-number">1</span>)</span><br><span class="line">    <span class="hljs-string">'np.log(np.abs(x1) + 1)'</span> (column <span class="hljs-number">2</span>)</span><br></pre></td></tr></table></figure><p>常见的变量转换包括标准化（平均值为0，方差为1）和中心化（减去平均值）。Patsy有内置的函数进行这样的工作：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">44</span>]: y, X = patsy.dmatrices(<span class="hljs-string">'y ~ standardize(x0) + center(x1)'</span>, data)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">45</span>]: X</span><br><span class="line">Out[<span class="hljs-number">45</span>]: </span><br><span class="line">DesignMatrix <span class="hljs-keyword">with</span> shape (<span class="hljs-number">5</span>, <span class="hljs-number">3</span>)</span><br><span class="line">  Intercept  standardize(x0)  center(x1)</span><br><span class="line">          <span class="hljs-number">1</span>         <span class="hljs-number">-1.41421</span>        <span class="hljs-number">0.78</span></span><br><span class="line">          <span class="hljs-number">1</span>         <span class="hljs-number">-0.70711</span>        <span class="hljs-number">0.76</span></span><br><span class="line">          <span class="hljs-number">1</span>          <span class="hljs-number">0.00000</span>        <span class="hljs-number">1.02</span></span><br><span class="line">          <span class="hljs-number">1</span>          <span class="hljs-number">0.70711</span>       <span class="hljs-number">-3.33</span></span><br><span class="line">          <span class="hljs-number">1</span>          <span class="hljs-number">1.41421</span>        <span class="hljs-number">0.77</span></span><br><span class="line">  Terms:</span><br><span class="line">    <span class="hljs-string">'Intercept'</span> (column <span class="hljs-number">0</span>)</span><br><span class="line">    <span class="hljs-string">'standardize(x0)'</span> (column <span class="hljs-number">1</span>)</span><br><span class="line">    <span class="hljs-string">'center(x1)'</span> (column <span class="hljs-number">2</span>)</span><br></pre></td></tr></table></figure><p>作为建模的一步，你可能拟合模型到一个数据集，然后用另一个数据集评估模型。另一个数据集可能是剩余的部分或是新数据。当执行中心化和标准化转变，用新数据进行预测要格外小心。因为你必须使用平均值或标准差转换新数据集，这也称作状态转换。</p><p>patsy.build_design_matrices函数可以使用原始样本数据集的保存信息，来转换新数据，：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">46</span>]: new_data = pd.DataFrame(&#123;</span><br><span class="line">   ....:     <span class="hljs-string">'x0'</span>: [<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>],</span><br><span class="line">   ....:     <span class="hljs-string">'x1'</span>: [<span class="hljs-number">3.1</span>, <span class="hljs-number">-0.5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2.3</span>],</span><br><span class="line">   ....:     <span class="hljs-string">'y'</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">47</span>]: new_X = patsy.build_design_matrices([X.design_info], new_data)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">48</span>]: new_X</span><br><span class="line">Out[<span class="hljs-number">48</span>]: </span><br><span class="line">[DesignMatrix <span class="hljs-keyword">with</span> shape (<span class="hljs-number">4</span>, <span class="hljs-number">3</span>)</span><br><span class="line">   Intercept  standardize(x0)  center(x1)</span><br><span class="line">           <span class="hljs-number">1</span>          <span class="hljs-number">2.12132</span>        <span class="hljs-number">3.87</span></span><br><span class="line">           <span class="hljs-number">1</span>          <span class="hljs-number">2.82843</span>        <span class="hljs-number">0.27</span></span><br><span class="line">           <span class="hljs-number">1</span>          <span class="hljs-number">3.53553</span>        <span class="hljs-number">0.77</span></span><br><span class="line">           <span class="hljs-number">1</span>          <span class="hljs-number">4.24264</span>        <span class="hljs-number">3.07</span></span><br><span class="line">   Terms:</span><br><span class="line">     <span class="hljs-string">'Intercept'</span> (column <span class="hljs-number">0</span>)</span><br><span class="line">     <span class="hljs-string">'standardize(x0)'</span> (column <span class="hljs-number">1</span>)</span><br><span class="line">     <span class="hljs-string">'center(x1)'</span> (column <span class="hljs-number">2</span>)]</span><br></pre></td></tr></table></figure><p>因为Patsy中的加号不是加法的意义，当你按照名称将数据集的列相加时，你必须用特殊I函数将它们封装起来：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">49</span>]: y, X = patsy.dmatrices(<span class="hljs-string">'y ~ I(x0 + x1)'</span>, data)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">50</span>]: X</span><br><span class="line">Out[<span class="hljs-number">50</span>]: </span><br><span class="line">DesignMatrix <span class="hljs-keyword">with</span> shape (<span class="hljs-number">5</span>, <span class="hljs-number">2</span>)</span><br><span class="line">  Intercept  I(x0 + x1)</span><br><span class="line">          <span class="hljs-number">1</span>        <span class="hljs-number">1.01</span></span><br><span class="line">          <span class="hljs-number">1</span>        <span class="hljs-number">1.99</span></span><br><span class="line">          <span class="hljs-number">1</span>        <span class="hljs-number">3.25</span></span><br><span class="line">          <span class="hljs-number">1</span>       <span class="hljs-number">-0.10</span></span><br><span class="line">          <span class="hljs-number">1</span>        <span class="hljs-number">5.00</span></span><br><span class="line">  Terms:</span><br><span class="line">    <span class="hljs-string">'Intercept'</span> (column <span class="hljs-number">0</span>)</span><br><span class="line">    <span class="hljs-string">'I(x0 + x1)'</span> (column <span class="hljs-number">1</span>)</span><br></pre></td></tr></table></figure><p>Patsy的patsy.builtins模块还有一些其它的内置转换。请查看线上文档。</p><p>分类数据有一个特殊的转换类，下面进行讲解。</p><h2 id="分类数据和Patsy"><a href="#分类数据和Patsy" class="headerlink" title="分类数据和Patsy"></a>分类数据和Patsy</h2><p>非数值数据可以用多种方式转换为模型设计矩阵。完整的讲解超出了本书范围，最好和统计课一起学习。</p><p>当你在Patsy公式中使用非数值数据，它们会默认转换为虚变量。如果有截距，会去掉一个，避免共线性：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">51</span>]: data = pd.DataFrame(&#123;</span><br><span class="line">   ....:     <span class="hljs-string">'key1'</span>: [<span class="hljs-string">'a'</span>, <span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>],</span><br><span class="line">   ....:     <span class="hljs-string">'key2'</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],</span><br><span class="line">   ....:     <span class="hljs-string">'v1'</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>],</span><br><span class="line">   ....:     <span class="hljs-string">'v2'</span>: [<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2.5</span>, <span class="hljs-number">-0.5</span>, <span class="hljs-number">4.0</span>, <span class="hljs-number">-1.2</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">-1.7</span>]</span><br><span class="line">   ....: &#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">52</span>]: y, X = patsy.dmatrices(<span class="hljs-string">'v2 ~ key1'</span>, data)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">53</span>]: X</span><br><span class="line">Out[<span class="hljs-number">53</span>]: </span><br><span class="line">DesignMatrix <span class="hljs-keyword">with</span> shape (<span class="hljs-number">8</span>, <span class="hljs-number">2</span>)</span><br><span class="line">  Intercept  key1[T.b]</span><br><span class="line">          <span class="hljs-number">1</span>          <span class="hljs-number">0</span></span><br><span class="line">          <span class="hljs-number">1</span>          <span class="hljs-number">0</span></span><br><span class="line">          <span class="hljs-number">1</span>          <span class="hljs-number">1</span></span><br><span class="line">          <span class="hljs-number">1</span>          <span class="hljs-number">1</span></span><br><span class="line">          <span class="hljs-number">1</span>          <span class="hljs-number">0</span></span><br><span class="line">          <span class="hljs-number">1</span>          <span class="hljs-number">1</span></span><br><span class="line">          <span class="hljs-number">1</span>          <span class="hljs-number">0</span></span><br><span class="line">          <span class="hljs-number">1</span>          <span class="hljs-number">1</span></span><br><span class="line">  Terms:</span><br><span class="line">    <span class="hljs-string">'Intercept'</span> (column <span class="hljs-number">0</span>)</span><br><span class="line">    <span class="hljs-string">'key1'</span> (column <span class="hljs-number">1</span>)</span><br></pre></td></tr></table></figure><p>如果你从模型中忽略截距，每个分类值的列都会包括在设计矩阵的模型中：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">54</span>]: y, X = patsy.dmatrices(<span class="hljs-string">'v2 ~ key1 + 0'</span>, data)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">55</span>]: X</span><br><span class="line">Out[<span class="hljs-number">55</span>]: </span><br><span class="line">DesignMatrix <span class="hljs-keyword">with</span> shape (<span class="hljs-number">8</span>, <span class="hljs-number">2</span>)</span><br><span class="line">  key1[a]  key1[b]</span><br><span class="line">        <span class="hljs-number">1</span>        <span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-number">1</span>        <span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-number">0</span>        <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-number">0</span>        <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-number">1</span>        <span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-number">0</span>        <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-number">1</span>        <span class="hljs-number">0</span></span><br><span class="line">        <span class="hljs-number">0</span>        <span class="hljs-number">1</span></span><br><span class="line">  Terms:</span><br><span class="line">    <span class="hljs-string">'key1'</span> (columns <span class="hljs-number">0</span>:<span class="hljs-number">2</span>)</span><br></pre></td></tr></table></figure><p>使用C函数，数值列可以截取为分类量：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">56</span>]: y, X = patsy.dmatrices(<span class="hljs-string">'v2 ~ C(key2)'</span>, data)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">57</span>]: X</span><br><span class="line">Out[<span class="hljs-number">57</span>]: </span><br><span class="line">DesignMatrix <span class="hljs-keyword">with</span> shape (<span class="hljs-number">8</span>, <span class="hljs-number">2</span>)</span><br><span class="line">  Intercept  C(key2)[T<span class="hljs-number">.1</span>]</span><br><span class="line">          <span class="hljs-number">1</span>             <span class="hljs-number">0</span></span><br><span class="line">          <span class="hljs-number">1</span>             <span class="hljs-number">1</span></span><br><span class="line">          <span class="hljs-number">1</span>             <span class="hljs-number">0</span></span><br><span class="line">          <span class="hljs-number">1</span>             <span class="hljs-number">1</span></span><br><span class="line">          <span class="hljs-number">1</span>             <span class="hljs-number">0</span></span><br><span class="line">          <span class="hljs-number">1</span>             <span class="hljs-number">1</span></span><br><span class="line">          <span class="hljs-number">1</span>             <span class="hljs-number">0</span></span><br><span class="line">          <span class="hljs-number">1</span>             <span class="hljs-number">0</span></span><br><span class="line">  Terms:</span><br><span class="line">    <span class="hljs-string">'Intercept'</span> (column <span class="hljs-number">0</span>)</span><br><span class="line">    <span class="hljs-string">'C(key2)'</span> (column <span class="hljs-number">1</span>)</span><br></pre></td></tr></table></figure><p>当你在模型中使用多个分类名，事情就会变复杂，因为会包括key1:key2形式的相交部分，它可以用在方差（ANOVA）模型分析中：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">58</span>]: data[<span class="hljs-string">'key2'</span>] = data[<span class="hljs-string">'key2'</span>].map(&#123;<span class="hljs-number">0</span>: <span class="hljs-string">'zero'</span>, <span class="hljs-number">1</span>: <span class="hljs-string">'one'</span>&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">59</span>]: data</span><br><span class="line">Out[<span class="hljs-number">59</span>]: </span><br><span class="line">  key1  key2  v1   v2</span><br><span class="line"><span class="hljs-number">0</span>    a  zero   <span class="hljs-number">1</span> <span class="hljs-number">-1.0</span></span><br><span class="line"><span class="hljs-number">1</span>    a   one   <span class="hljs-number">2</span>  <span class="hljs-number">0.0</span></span><br><span class="line"><span class="hljs-number">2</span>    b  zero   <span class="hljs-number">3</span>  <span class="hljs-number">2.5</span></span><br><span class="line"><span class="hljs-number">3</span>    b   one   <span class="hljs-number">4</span> <span class="hljs-number">-0.5</span></span><br><span class="line"><span class="hljs-number">4</span>    a  zero   <span class="hljs-number">5</span>  <span class="hljs-number">4.0</span></span><br><span class="line"><span class="hljs-number">5</span>    b   one   <span class="hljs-number">6</span> <span class="hljs-number">-1.2</span></span><br><span class="line"><span class="hljs-number">6</span>    a  zero   <span class="hljs-number">7</span>  <span class="hljs-number">0.2</span></span><br><span class="line"><span class="hljs-number">7</span>    b  zero   <span class="hljs-number">8</span> <span class="hljs-number">-1.7</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">60</span>]: y, X = patsy.dmatrices(<span class="hljs-string">'v2 ~ key1 + key2'</span>, data)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">61</span>]: X</span><br><span class="line">Out[<span class="hljs-number">61</span>]: </span><br><span class="line">DesignMatrix <span class="hljs-keyword">with</span> shape (<span class="hljs-number">8</span>, <span class="hljs-number">3</span>)</span><br><span class="line">  Intercept  key1[T.b]  key2[T.zero]</span><br><span class="line">          <span class="hljs-number">1</span>          <span class="hljs-number">0</span>             <span class="hljs-number">1</span></span><br><span class="line">          <span class="hljs-number">1</span>          <span class="hljs-number">0</span>             <span class="hljs-number">0</span></span><br><span class="line">          <span class="hljs-number">1</span>          <span class="hljs-number">1</span>             <span class="hljs-number">1</span></span><br><span class="line">          <span class="hljs-number">1</span>          <span class="hljs-number">1</span>             <span class="hljs-number">0</span></span><br><span class="line">          <span class="hljs-number">1</span>          <span class="hljs-number">0</span>             <span class="hljs-number">1</span></span><br><span class="line">          <span class="hljs-number">1</span>          <span class="hljs-number">1</span>             <span class="hljs-number">0</span></span><br><span class="line">          <span class="hljs-number">1</span>          <span class="hljs-number">0</span>             <span class="hljs-number">1</span></span><br><span class="line">          <span class="hljs-number">1</span>          <span class="hljs-number">1</span>             <span class="hljs-number">1</span></span><br><span class="line">  Terms:</span><br><span class="line">    <span class="hljs-string">'Intercept'</span> (column <span class="hljs-number">0</span>)</span><br><span class="line">    <span class="hljs-string">'key1'</span> (column <span class="hljs-number">1</span>)</span><br><span class="line">    <span class="hljs-string">'key2'</span> (column <span class="hljs-number">2</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">62</span>]: y, X = patsy.dmatrices(<span class="hljs-string">'v2 ~ key1 + key2 + key1:key2'</span>, data)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">63</span>]: X</span><br><span class="line">Out[<span class="hljs-number">63</span>]: </span><br><span class="line">DesignMatrix <span class="hljs-keyword">with</span> shape (<span class="hljs-number">8</span>, <span class="hljs-number">4</span>)</span><br><span class="line">  Intercept  key1[T.b]  key2[T.zero]</span><br><span class="line">key1[T.b]:key2[T.zero]</span><br><span class="line">          <span class="hljs-number">1</span>          <span class="hljs-number">0</span>             <span class="hljs-number">1</span>                       <span class="hljs-number">0</span></span><br><span class="line">          <span class="hljs-number">1</span>          <span class="hljs-number">0</span>             <span class="hljs-number">0</span>                       <span class="hljs-number">0</span></span><br><span class="line">          <span class="hljs-number">1</span>          <span class="hljs-number">1</span>             <span class="hljs-number">1</span>                       <span class="hljs-number">1</span></span><br><span class="line">          <span class="hljs-number">1</span>          <span class="hljs-number">1</span>             <span class="hljs-number">0</span>                       <span class="hljs-number">0</span></span><br><span class="line">          <span class="hljs-number">1</span>          <span class="hljs-number">0</span>             <span class="hljs-number">1</span>                       <span class="hljs-number">0</span></span><br><span class="line">          <span class="hljs-number">1</span>          <span class="hljs-number">1</span>             <span class="hljs-number">0</span>                       <span class="hljs-number">0</span></span><br><span class="line">          <span class="hljs-number">1</span>          <span class="hljs-number">0</span>             <span class="hljs-number">1</span>                       <span class="hljs-number">0</span></span><br><span class="line">          <span class="hljs-number">1</span>          <span class="hljs-number">1</span>             <span class="hljs-number">1</span>                       <span class="hljs-number">1</span></span><br><span class="line">  Terms:</span><br><span class="line">    <span class="hljs-string">'Intercept'</span> (column <span class="hljs-number">0</span>)</span><br><span class="line">    <span class="hljs-string">'key1'</span> (column <span class="hljs-number">1</span>)</span><br><span class="line">    <span class="hljs-string">'key2'</span> (column <span class="hljs-number">2</span>)</span><br><span class="line">    <span class="hljs-string">'key1:key2'</span> (column <span class="hljs-number">3</span>)</span><br></pre></td></tr></table></figure><p>Patsy提供转换分类数据的其它方法，包括以特定顺序转换。请参阅线上文档。</p><h1 id="13-3-statsmodels介绍"><a href="#13-3-statsmodels介绍" class="headerlink" title="13.3 statsmodels介绍"></a>13.3 statsmodels介绍</h1><p>statsmodels是Python进行拟合多种统计模型、进行统计试验和数据探索可视化的库。Statsmodels包含许多经典的统计方法，但没有贝叶斯方法和机器学习模型。</p><p>statsmodels包含的模型有：</p><ul><li>线性模型，广义线性模型和健壮线性模型</li><li>线性混合效应模型</li><li>方差（ANOVA）方法分析</li><li>时间序列过程和状态空间模型</li><li>广义矩估计</li></ul><p>下面，我会使用一些基本的statsmodels工具，探索Patsy公式和pandasDataFrame对象如何使用模型接口。</p><h2 id="估计线性模型"><a href="#估计线性模型" class="headerlink" title="估计线性模型"></a>估计线性模型</h2><p>statsmodels有多种线性回归模型，包括从基本（比如普通最小二乘）到复杂（比如迭代加权最小二乘法）的。</p><p>statsmodels的线性模型有两种不同的接口：基于数组和基于公式。它们可以通过API模块引入：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> statsmodels.api <span class="hljs-keyword">as</span> sm</span><br><span class="line"><span class="hljs-keyword">import</span> statsmodels.formula.api <span class="hljs-keyword">as</span> smf</span><br></pre></td></tr></table></figure><p>为了展示它们的使用方法，我们从一些随机数据生成一个线性模型：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dnorm</span><span class="hljs-params">(mean, variance, size=<span class="hljs-number">1</span>)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">if</span> isinstance(size, int):</span><br><span class="line">        size = size,</span><br><span class="line">    <span class="hljs-keyword">return</span> mean + np.sqrt(variance) * np.random.randn(*size)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># For reproducibility</span></span><br><span class="line">np.random.seed(<span class="hljs-number">12345</span>)</span><br><span class="line"></span><br><span class="line">N = <span class="hljs-number">100</span></span><br><span class="line">X = np.c_[dnorm(<span class="hljs-number">0</span>, <span class="hljs-number">0.4</span>, size=N),</span><br><span class="line">          dnorm(<span class="hljs-number">0</span>, <span class="hljs-number">0.6</span>, size=N),</span><br><span class="line">          dnorm(<span class="hljs-number">0</span>, <span class="hljs-number">0.2</span>, size=N)]</span><br><span class="line">eps = dnorm(<span class="hljs-number">0</span>, <span class="hljs-number">0.1</span>, size=N)</span><br><span class="line">beta = [<span class="hljs-number">0.1</span>, <span class="hljs-number">0.3</span>, <span class="hljs-number">0.5</span>]</span><br><span class="line"></span><br><span class="line">y = np.dot(X, beta) + eps</span><br></pre></td></tr></table></figure><p>这里，我使用了“真实”模型和可知参数beta。此时，dnorm可用来生成正态分布数据，带有特定均值和方差。现在有：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">66</span>]: X[:<span class="hljs-number">5</span>]</span><br><span class="line">Out[<span class="hljs-number">66</span>]: </span><br><span class="line">array([[<span class="hljs-number">-0.1295</span>, <span class="hljs-number">-1.2128</span>,  <span class="hljs-number">0.5042</span>],</span><br><span class="line">       [ <span class="hljs-number">0.3029</span>, <span class="hljs-number">-0.4357</span>, <span class="hljs-number">-0.2542</span>],</span><br><span class="line">       [<span class="hljs-number">-0.3285</span>, <span class="hljs-number">-0.0253</span>,  <span class="hljs-number">0.1384</span>],</span><br><span class="line">       [<span class="hljs-number">-0.3515</span>, <span class="hljs-number">-0.7196</span>, <span class="hljs-number">-0.2582</span>],</span><br><span class="line">       [ <span class="hljs-number">1.2433</span>, <span class="hljs-number">-0.3738</span>, <span class="hljs-number">-0.5226</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">67</span>]: y[:<span class="hljs-number">5</span>]</span><br><span class="line">Out[<span class="hljs-number">67</span>]: array([ <span class="hljs-number">0.4279</span>, <span class="hljs-number">-0.6735</span>, <span class="hljs-number">-0.0909</span>, <span class="hljs-number">-0.4895</span>,<span class="hljs-number">-0.1289</span>])</span><br></pre></td></tr></table></figure><p>像之前Patsy看到的，线性模型通常要拟合一个截距。sm.add_constant函数可以添加一个截距的列到现存的矩阵：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">68</span>]: X_model = sm.add_constant(X)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">69</span>]: X_model[:<span class="hljs-number">5</span>]</span><br><span class="line">Out[<span class="hljs-number">69</span>]: </span><br><span class="line">array([[ <span class="hljs-number">1.</span>    , <span class="hljs-number">-0.1295</span>, <span class="hljs-number">-1.2128</span>,  <span class="hljs-number">0.5042</span>],</span><br><span class="line">       [ <span class="hljs-number">1.</span>    ,  <span class="hljs-number">0.3029</span>, <span class="hljs-number">-0.4357</span>, <span class="hljs-number">-0.2542</span>],</span><br><span class="line">       [ <span class="hljs-number">1.</span>    , <span class="hljs-number">-0.3285</span>, <span class="hljs-number">-0.0253</span>,  <span class="hljs-number">0.1384</span>],</span><br><span class="line">       [ <span class="hljs-number">1.</span>    , <span class="hljs-number">-0.3515</span>, <span class="hljs-number">-0.7196</span>, <span class="hljs-number">-0.2582</span>],</span><br><span class="line">       [ <span class="hljs-number">1.</span>    ,  <span class="hljs-number">1.2433</span>, <span class="hljs-number">-0.3738</span>, <span class="hljs-number">-0.5226</span>]])</span><br></pre></td></tr></table></figure><p>sm.OLS类可以拟合一个普通最小二乘回归：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">70</span>]: model = sm.OLS(y, X)</span><br></pre></td></tr></table></figure><p>这个模型的fit方法返回了一个回归结果对象，它包含估计的模型参数和其它内容：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">71</span>]: results = model.fit()</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">72</span>]: results.params</span><br><span class="line">Out[<span class="hljs-number">72</span>]: array([ <span class="hljs-number">0.1783</span>,  <span class="hljs-number">0.223</span> ,  <span class="hljs-number">0.501</span> ])</span><br></pre></td></tr></table></figure><p>对结果使用summary方法可以打印模型的详细诊断结果：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">73</span>]: print(results.summary())</span><br><span class="line">OLS Regression Results                            </span><br><span class="line">==============================================================================</span><br><span class="line">Dep. Variable:                      y   R-squared:                       <span class="hljs-number">0.430</span></span><br><span class="line">Model:                            OLS   Adj. R-squared:                  <span class="hljs-number">0.413</span></span><br><span class="line">Method:                 Least Squares   F-statistic:                     <span class="hljs-number">24.42</span></span><br><span class="line">Date:                Mon, <span class="hljs-number">25</span> Sep <span class="hljs-number">2017</span>   Prob (F-statistic):           <span class="hljs-number">7.44e-12</span></span><br><span class="line">Time:                        <span class="hljs-number">14</span>:<span class="hljs-number">06</span>:<span class="hljs-number">15</span>   Log-Likelihood:                <span class="hljs-number">-34.305</span></span><br><span class="line">No. Observations:                 <span class="hljs-number">100</span>   AIC:                             <span class="hljs-number">74.61</span></span><br><span class="line">Df Residuals:                      <span class="hljs-number">97</span>   BIC:                             <span class="hljs-number">82.42</span></span><br><span class="line">Df Model:                           <span class="hljs-number">3</span>                                         </span><br><span class="line">Covariance Type:            nonrobust                                         </span><br><span class="line">==============================================================================</span><br><span class="line">                 coef    std err          t      P&gt;|t|      [<span class="hljs-number">0.025</span>      <span class="hljs-number">0.975</span>]</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">x1             <span class="hljs-number">0.1783</span>      <span class="hljs-number">0.053</span>      <span class="hljs-number">3.364</span>      <span class="hljs-number">0.001</span>       <span class="hljs-number">0.073</span>       <span class="hljs-number">0.283</span></span><br><span class="line">x2             <span class="hljs-number">0.2230</span>      <span class="hljs-number">0.046</span>      <span class="hljs-number">4.818</span>      <span class="hljs-number">0.000</span>       <span class="hljs-number">0.131</span>       <span class="hljs-number">0.315</span></span><br><span class="line">x3             <span class="hljs-number">0.5010</span>      <span class="hljs-number">0.080</span>      <span class="hljs-number">6.237</span>      <span class="hljs-number">0.000</span>       <span class="hljs-number">0.342</span>       <span class="hljs-number">0.660</span></span><br><span class="line">==============================================================================</span><br><span class="line">Omnibus:                        <span class="hljs-number">4.662</span>   Durbin-Watson:                   <span class="hljs-number">2.201</span></span><br><span class="line">Prob(Omnibus):                  <span class="hljs-number">0.097</span>   Jarque-Bera (JB):                <span class="hljs-number">4.098</span></span><br><span class="line">Skew:                           <span class="hljs-number">0.481</span>   Prob(JB):                        <span class="hljs-number">0.129</span></span><br><span class="line">Kurtosis:                       <span class="hljs-number">3.243</span>   Cond. No.</span><br><span class="line"><span class="hljs-number">1.74</span></span><br><span class="line">==============================================================================</span><br><span class="line">Warnings:</span><br><span class="line">[<span class="hljs-number">1</span>] Standard Errors assume that the covariance matrix of the errors <span class="hljs-keyword">is</span> correctly </span><br><span class="line">specified.</span><br></pre></td></tr></table></figure><p>这里的参数名为通用名x1, x2等等。假设所有的模型参数都在一个DataFrame中：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">74</span>]: data = pd.DataFrame(X, columns=[<span class="hljs-string">'col0'</span>, <span class="hljs-string">'col1'</span>, <span class="hljs-string">'col2'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">75</span>]: data[<span class="hljs-string">'y'</span>] = y</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">76</span>]: data[:<span class="hljs-number">5</span>]</span><br><span class="line">Out[<span class="hljs-number">76</span>]: </span><br><span class="line">       col0      col1      col2         y</span><br><span class="line"><span class="hljs-number">0</span> <span class="hljs-number">-0.129468</span> <span class="hljs-number">-1.212753</span>  <span class="hljs-number">0.504225</span>  <span class="hljs-number">0.427863</span></span><br><span class="line"><span class="hljs-number">1</span>  <span class="hljs-number">0.302910</span> <span class="hljs-number">-0.435742</span> <span class="hljs-number">-0.254180</span> <span class="hljs-number">-0.673480</span></span><br><span class="line"><span class="hljs-number">2</span> <span class="hljs-number">-0.328522</span> <span class="hljs-number">-0.025302</span>  <span class="hljs-number">0.138351</span> <span class="hljs-number">-0.090878</span></span><br><span class="line"><span class="hljs-number">3</span> <span class="hljs-number">-0.351475</span> <span class="hljs-number">-0.719605</span> <span class="hljs-number">-0.258215</span> <span class="hljs-number">-0.489494</span></span><br><span class="line"><span class="hljs-number">4</span>  <span class="hljs-number">1.243269</span> <span class="hljs-number">-0.373799</span> <span class="hljs-number">-0.522629</span> <span class="hljs-number">-0.128941</span></span><br></pre></td></tr></table></figure><p>现在，我们使用statsmodels的公式API和Patsy的公式字符串：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">77</span>]: results = smf.ols(<span class="hljs-string">'y ~ col0 + col1 + col2'</span>, data=data).fit()</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">78</span>]: results.params</span><br><span class="line">Out[<span class="hljs-number">78</span>]: </span><br><span class="line">Intercept    <span class="hljs-number">0.033559</span></span><br><span class="line">col0         <span class="hljs-number">0.176149</span></span><br><span class="line">col1         <span class="hljs-number">0.224826</span></span><br><span class="line">col2         <span class="hljs-number">0.514808</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">79</span>]: results.tvalues</span><br><span class="line">Out[<span class="hljs-number">79</span>]: </span><br><span class="line">Intercept    <span class="hljs-number">0.952188</span></span><br><span class="line">col0         <span class="hljs-number">3.319754</span></span><br><span class="line">col1         <span class="hljs-number">4.850730</span></span><br><span class="line">col2         <span class="hljs-number">6.303971</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><p>观察下statsmodels是如何返回Series结果的，附带有DataFrame的列名。当使用公式和pandas对象时，我们不需要使用add_constant。</p><p>给出一个样本外数据，你可以根据估计的模型参数计算预测值：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">80</span>]: results.predict(data[:<span class="hljs-number">5</span>])</span><br><span class="line">Out[<span class="hljs-number">80</span>]: </span><br><span class="line"><span class="hljs-number">0</span>   <span class="hljs-number">-0.002327</span></span><br><span class="line"><span class="hljs-number">1</span>   <span class="hljs-number">-0.141904</span></span><br><span class="line"><span class="hljs-number">2</span>    <span class="hljs-number">0.041226</span></span><br><span class="line"><span class="hljs-number">3</span>   <span class="hljs-number">-0.323070</span></span><br><span class="line"><span class="hljs-number">4</span>   <span class="hljs-number">-0.100535</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><p>statsmodels的线性模型结果还有其它的分析、诊断和可视化工具。除了普通最小二乘模型，还有其它的线性模型。</p><h2 id="估计时间序列过程"><a href="#估计时间序列过程" class="headerlink" title="估计时间序列过程"></a>估计时间序列过程</h2><p>statsmodels的另一模型类是进行时间序列分析，包括自回归过程、卡尔曼滤波和其它态空间模型，和多元自回归模型。</p><p>用自回归结构和噪声来模拟一些时间序列数据：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">init_x = <span class="hljs-number">4</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> random</span><br><span class="line">values = [init_x, init_x]</span><br><span class="line">N = <span class="hljs-number">1000</span></span><br><span class="line"></span><br><span class="line">b0 = <span class="hljs-number">0.8</span></span><br><span class="line">b1 = <span class="hljs-number">-0.4</span></span><br><span class="line">noise = dnorm(<span class="hljs-number">0</span>, <span class="hljs-number">0.1</span>, N)</span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(N):</span><br><span class="line">    new_x = values[<span class="hljs-number">-1</span>] * b0 + values[<span class="hljs-number">-2</span>] * b1 + noise[i]</span><br><span class="line">    values.append(new_x)</span><br></pre></td></tr></table></figure><p>这个数据有AR(2)结构（两个延迟），参数是0.8和-0.4。拟合AR模型时，你可能不知道滞后项的个数，因此可以用较多的滞后量来拟合这个模型：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">82</span>]: MAXLAGS = <span class="hljs-number">5</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">83</span>]: model = sm.tsa.AR(values)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">84</span>]: results = model.fit(MAXLAGS)</span><br></pre></td></tr></table></figure><p>结果中的估计参数首先是截距，其次是前两个参数的估计值：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">85</span>]: results.params</span><br><span class="line">Out[<span class="hljs-number">85</span>]: array([<span class="hljs-number">-0.0062</span>,  <span class="hljs-number">0.7845</span>, <span class="hljs-number">-0.4085</span>, <span class="hljs-number">-0.0136</span>,  <span class="hljs-number">0.015</span> ,  <span class="hljs-number">0.0143</span>])</span><br></pre></td></tr></table></figure><p>更多的细节以及如何解释结果超出了本书的范围，可以通过statsmodels文档学习更多。</p><h1 id="13-4-scikit-learn介绍"><a href="#13-4-scikit-learn介绍" class="headerlink" title="13.4 scikit-learn介绍"></a>13.4 scikit-learn介绍</h1><p>scikit-learn是一个广泛使用、用途多样的Python机器学习库。它包含多种标准监督和非监督机器学习方法和模型选择和评估、数据转换、数据加载和模型持久化工具。这些模型可以用于分类、聚合、预测和其它任务。</p><p>机器学习方面的学习和应用scikit-learn和TensorFlow解决实际问题的线上和纸质资料很多。本节中，我会简要介绍scikit-learn API的风格。</p><p>写作此书的时候，scikit-learn并没有和pandas深度结合，但是有些第三方包在开发中。尽管如此，pandas非常适合在模型拟合前处理数据集。</p><p>举个例子，我用一个Kaggle竞赛的经典数据集，关于泰坦尼克号乘客的生还率。我们用pandas加载测试和训练数据集：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">86</span>]: train = pd.read_csv(<span class="hljs-string">'datasets/titanic/train.csv'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">87</span>]: test = pd.read_csv(<span class="hljs-string">'datasets/titanic/test.csv'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">88</span>]: train[:<span class="hljs-number">4</span>]</span><br><span class="line">Out[<span class="hljs-number">88</span>]: </span><br><span class="line">   PassengerId  Survived  Pclass  \</span><br><span class="line"><span class="hljs-number">0</span>            <span class="hljs-number">1</span>         <span class="hljs-number">0</span>       <span class="hljs-number">3</span>   </span><br><span class="line"><span class="hljs-number">1</span>            <span class="hljs-number">2</span>         <span class="hljs-number">1</span>       <span class="hljs-number">1</span>   </span><br><span class="line"><span class="hljs-number">2</span>            <span class="hljs-number">3</span>         <span class="hljs-number">1</span>       <span class="hljs-number">3</span>   </span><br><span class="line"><span class="hljs-number">3</span>            <span class="hljs-number">4</span>         <span class="hljs-number">1</span>       <span class="hljs-number">1</span>   </span><br><span class="line">                                                Name     Sex   Age  SibSp  \</span><br><span class="line"><span class="hljs-number">0</span>                            Braund, Mr. Owen Harris    male  <span class="hljs-number">22.0</span>      <span class="hljs-number">1</span>   </span><br><span class="line"><span class="hljs-number">1</span>  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  <span class="hljs-number">38.0</span>      <span class="hljs-number">1</span>   </span><br><span class="line"><span class="hljs-number">2</span>                             Heikkinen, Miss. Laina  female  <span class="hljs-number">26.0</span>      <span class="hljs-number">0</span>   </span><br><span class="line"><span class="hljs-number">3</span>       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  <span class="hljs-number">35.0</span>      <span class="hljs-number">1</span>   </span><br><span class="line">   Parch            Ticket     Fare Cabin Embarked  </span><br><span class="line"><span class="hljs-number">0</span>      <span class="hljs-number">0</span>         A/<span class="hljs-number">5</span> <span class="hljs-number">21171</span>   <span class="hljs-number">7.2500</span>   NaN        S  </span><br><span class="line"><span class="hljs-number">1</span>      <span class="hljs-number">0</span>          PC <span class="hljs-number">17599</span>  <span class="hljs-number">71.2833</span>   C85        C  </span><br><span class="line"><span class="hljs-number">2</span>      <span class="hljs-number">0</span>  STON/O2. <span class="hljs-number">3101282</span>   <span class="hljs-number">7.9250</span>   NaN        S  </span><br><span class="line"><span class="hljs-number">3</span>      <span class="hljs-number">0</span>            <span class="hljs-number">113803</span>  <span class="hljs-number">53.1000</span>  C123        S</span><br></pre></td></tr></table></figure><p>statsmodels和scikit-learn通常不能接收缺失数据，因此我们要查看列是否包含缺失值：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">89</span>]: train.isnull().sum()</span><br><span class="line">Out[<span class="hljs-number">89</span>]: </span><br><span class="line">PassengerId      <span class="hljs-number">0</span></span><br><span class="line">Survived         <span class="hljs-number">0</span></span><br><span class="line">Pclass           <span class="hljs-number">0</span></span><br><span class="line">Name             <span class="hljs-number">0</span></span><br><span class="line">Sex              <span class="hljs-number">0</span></span><br><span class="line">Age            <span class="hljs-number">177</span></span><br><span class="line">SibSp            <span class="hljs-number">0</span></span><br><span class="line">Parch            <span class="hljs-number">0</span></span><br><span class="line">Ticket           <span class="hljs-number">0</span></span><br><span class="line">Fare             <span class="hljs-number">0</span></span><br><span class="line">Cabin          <span class="hljs-number">687</span></span><br><span class="line">Embarked         <span class="hljs-number">2</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">90</span>]: test.isnull().sum()</span><br><span class="line">Out[<span class="hljs-number">90</span>]: </span><br><span class="line">PassengerId      <span class="hljs-number">0</span></span><br><span class="line">Pclass           <span class="hljs-number">0</span></span><br><span class="line">Name             <span class="hljs-number">0</span></span><br><span class="line">Sex              <span class="hljs-number">0</span></span><br><span class="line">Age             <span class="hljs-number">86</span></span><br><span class="line">SibSp            <span class="hljs-number">0</span></span><br><span class="line">Parch            <span class="hljs-number">0</span></span><br><span class="line">Ticket           <span class="hljs-number">0</span></span><br><span class="line">Fare             <span class="hljs-number">1</span></span><br><span class="line">Cabin          <span class="hljs-number">327</span></span><br><span class="line">Embarked         <span class="hljs-number">0</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><p>在统计和机器学习的例子中，根据数据中的特征，一个典型的任务是预测乘客能否生还。模型现在训练数据集中拟合，然后用样本外测试数据集评估。</p><p>我想用年龄作为预测值，但是它包含缺失值。缺失数据补全的方法有多种，我用的是一种简单方法，用训练数据集的中位数补全两个表的空值：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">91</span>]: impute_value = train[<span class="hljs-string">'Age'</span>].median()</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">92</span>]: train[<span class="hljs-string">'Age'</span>] = train[<span class="hljs-string">'Age'</span>].fillna(impute_value)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">93</span>]: test[<span class="hljs-string">'Age'</span>] = test[<span class="hljs-string">'Age'</span>].fillna(impute_value)</span><br></pre></td></tr></table></figure><p>现在我们需要指定模型。我增加了一个列IsFemale，作为“Sex”列的编码：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">94</span>]: train[<span class="hljs-string">'IsFemale'</span>] = (train[<span class="hljs-string">'Sex'</span>] == <span class="hljs-string">'female'</span>).astype(int)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">95</span>]: test[<span class="hljs-string">'IsFemale'</span>] = (test[<span class="hljs-string">'Sex'</span>] == <span class="hljs-string">'female'</span>).astype(int)</span><br></pre></td></tr></table></figure><p>然后，我们确定一些模型变量，并创建NumPy数组：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">96</span>]: predictors = [<span class="hljs-string">'Pclass'</span>, <span class="hljs-string">'IsFemale'</span>, <span class="hljs-string">'Age'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">97</span>]: X_train = train[predictors].values</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">98</span>]: X_test = test[predictors].values</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">99</span>]: y_train = train[<span class="hljs-string">'Survived'</span>].values</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">100</span>]: X_train[:<span class="hljs-number">5</span>]</span><br><span class="line">Out[<span class="hljs-number">100</span>]: </span><br><span class="line">array([[  <span class="hljs-number">3.</span>,   <span class="hljs-number">0.</span>,  <span class="hljs-number">22.</span>],</span><br><span class="line">       [  <span class="hljs-number">1.</span>,   <span class="hljs-number">1.</span>,  <span class="hljs-number">38.</span>],</span><br><span class="line">       [  <span class="hljs-number">3.</span>,   <span class="hljs-number">1.</span>,  <span class="hljs-number">26.</span>],</span><br><span class="line">       [  <span class="hljs-number">1.</span>,   <span class="hljs-number">1.</span>,  <span class="hljs-number">35.</span>],</span><br><span class="line">       [  <span class="hljs-number">3.</span>,   <span class="hljs-number">0.</span>,  <span class="hljs-number">35.</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">101</span>]: y_train[:<span class="hljs-number">5</span>]</span><br><span class="line">Out[<span class="hljs-number">101</span>]: array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>])</span><br></pre></td></tr></table></figure><p>我不能保证这是一个好模型，但它的特征都符合。我们用scikit-learn的LogisticRegression模型，创建一个模型实例：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">102</span>]: <span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> LogisticRegression</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">103</span>]: model = LogisticRegression()</span><br></pre></td></tr></table></figure><p>与statsmodels类似，我们可以用模型的fit方法，将它拟合到训练数据：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">104</span>]: model.fit(X_train, y_train)</span><br><span class="line">Out[<span class="hljs-number">104</span>]: </span><br><span class="line">LogisticRegression(C=<span class="hljs-number">1.0</span>, class_weight=<span class="hljs-literal">None</span>, dual=<span class="hljs-literal">False</span>, fit_intercept=<span class="hljs-literal">True</span>,</span><br><span class="line">          intercept_scaling=<span class="hljs-number">1</span>, max_iter=<span class="hljs-number">100</span>, multi_class=<span class="hljs-string">'ovr'</span>, n_jobs=<span class="hljs-number">1</span>,</span><br><span class="line">          penalty=<span class="hljs-string">'l2'</span>, random_state=<span class="hljs-literal">None</span>, solver=<span class="hljs-string">'liblinear'</span>, tol=<span class="hljs-number">0.0001</span>,</span><br><span class="line">          verbose=<span class="hljs-number">0</span>, warm_start=<span class="hljs-literal">False</span>)</span><br></pre></td></tr></table></figure><p>现在，我们可以用model.predict，对测试数据进行预测：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">105</span>]: y_predict = model.predict(X_test)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">106</span>]: y_predict[:<span class="hljs-number">10</span>]</span><br><span class="line">Out[<span class="hljs-number">106</span>]: array([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>])</span><br></pre></td></tr></table></figure><p>如果你有测试数据集的真实值，你可以计算准确率或其它错误度量值：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(y_true == y_predict).mean()</span><br></pre></td></tr></table></figure><p>在实际中，模型训练经常有许多额外的复杂因素。许多模型有可以调节的参数，有些方法（比如交叉验证）可以用来进行参数调节，避免对训练数据过拟合。这通常可以提高预测性或对新数据的健壮性。</p><p>交叉验证通过分割训练数据来模拟样本外预测。基于模型的精度得分（比如均方差），可以对模型参数进行网格搜索。有些模型，如logistic回归，有内置的交叉验证的估计类。例如，logisticregressioncv类可以用一个参数指定网格搜索对模型的正则化参数C的粒度：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">107</span>]: <span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> LogisticRegressionCV</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">108</span>]: model_cv = LogisticRegressionCV(<span class="hljs-number">10</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">109</span>]: model_cv.fit(X_train, y_train)</span><br><span class="line">Out[<span class="hljs-number">109</span>]: </span><br><span class="line">LogisticRegressionCV(Cs=<span class="hljs-number">10</span>, class_weight=<span class="hljs-literal">None</span>, cv=<span class="hljs-literal">None</span>, dual=<span class="hljs-literal">False</span>,</span><br><span class="line">           fit_intercept=<span class="hljs-literal">True</span>, intercept_scaling=<span class="hljs-number">1.0</span>, max_iter=<span class="hljs-number">100</span>,</span><br><span class="line">           multi_class=<span class="hljs-string">'ovr'</span>, n_jobs=<span class="hljs-number">1</span>, penalty=<span class="hljs-string">'l2'</span>, random_state=<span class="hljs-literal">None</span>,</span><br><span class="line">           refit=<span class="hljs-literal">True</span>, scoring=<span class="hljs-literal">None</span>, solver=<span class="hljs-string">'lbfgs'</span>, tol=<span class="hljs-number">0.0001</span>, verbose=<span class="hljs-number">0</span>)</span><br></pre></td></tr></table></figure><p>要手动进行交叉验证，你可以使用cross_val_score帮助函数，它可以处理数据分割。例如，要交叉验证我们的带有四个不重叠训练数据的模型，可以这样做：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">110</span>]: <span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> cross_val_score</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">111</span>]: model = LogisticRegression(C=<span class="hljs-number">10</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">112</span>]: scores = cross_val_score(model, X_train, y_train, cv=<span class="hljs-number">4</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">113</span>]: scores</span><br><span class="line">Out[<span class="hljs-number">113</span>]: array([ <span class="hljs-number">0.7723</span>,  <span class="hljs-number">0.8027</span>,  <span class="hljs-number">0.7703</span>,  <span class="hljs-number">0.7883</span>])</span><br></pre></td></tr></table></figure><p>默认的评分指标取决于模型本身，但是可以明确指定一个评分。交叉验证过的模型需要更长时间来训练，但会有更高的模型性能。</p><h1 id="13-5-继续学习"><a href="#13-5-继续学习" class="headerlink" title="13.5 继续学习"></a>13.5 继续学习</h1><p>我只是介绍了一些Python建模库的表面内容，现在有越来越多的框架用于各种统计和机器学习，它们都是用Python或Python用户界面实现的。</p><p>这本书的重点是数据规整，有其它的书是关注建模和数据科学工具的。其中优秀的有：</p><ul><li>Andreas Mueller and Sarah Guido (O’Reilly)的 《Introduction to Machine Learning with Python》</li><li>Jake VanderPlas (O’Reilly)的 《Python Data Science Handbook》</li><li>Joel Grus (O’Reilly) 的 《Data Science from Scratch: First Principles》</li><li>Sebastian Raschka (Packt Publishing) 的《Python Machine Learning》</li><li>Aurélien Géron (O’Reilly) 的《Hands-On Machine Learning with Scikit-Learn and TensorFlow》</li></ul><p>虽然书是学习的好资源，但是随着底层开源软件的发展，书的内容会过时。最好是不断熟悉各种统计和机器学习框架的文档，学习最新的功能和API。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载自&lt;a href=&quot;https://www.jianshu.com/p/e46a1ac36aa5&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;../《利用Python进行数据分析·第2版》第1章%20准备工作&quot;&gt;第1章 准备工作&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第2章%20Python语法基础，IPython和Jupyter%20Notebooks&quot;&gt;第2章 Python语法基础，IPython和Jupyter Notebooks&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第3章%20Python的数据结构、函数和文件&quot;&gt;第3章 Python的数据结构、函数和文件&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第4章%20NumPy基础：数组和矢量计算&quot;&gt;第4章 NumPy基础：数组和矢量计算&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第5章%20pandas入门&quot;&gt;第5章 pandas入门&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第6章%20数据加载、存储与文件格式&quot;&gt;第6章 数据加载、存储与文件格式&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第7章%20数据清洗和准备&quot;&gt;第7章 数据清洗和准备&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第8章%20数据规整：聚合、合并和重塑&quot;&gt;第8章 数据规整：聚合、合并和重塑&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第9章%20绘图和可视化&quot;&gt;第9章 绘图和可视化&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第10章%20数据聚合与分组运算&quot;&gt;第10章 数据聚合与分组运算&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第11章%20时间序列&quot;&gt;第11章 时间序列&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第12章%20pandas高级应用&quot;&gt;第12章 pandas高级应用&lt;/a&gt;&lt;br&gt;第13章 Python建模库介绍&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第14章%20数据分析案例&quot;&gt;第14章 数据分析案例&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》附录A%20NumPy高级应用&quot;&gt;附录A NumPy高级应用&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》附录B%20更多关于IPython的内容（完）&quot;&gt;附录B 更多关于IPython的内容（完）&lt;/a&gt;      &lt;/p&gt;
    
    </summary>
    
    
      <category term="数据分析" scheme="https://glanhoo.coding.me/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="https://glanhoo.coding.me/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="pandas" scheme="https://glanhoo.coding.me/tags/pandas/"/>
    
      <category term="python" scheme="https://glanhoo.coding.me/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>《利用Python进行数据分析·第2版》第12章 pandas高级应用</title>
    <link href="https://glanhoo.coding.me/2019/11/05/%E3%80%8A%E5%88%A9%E7%94%A8Python%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%C2%B7%E7%AC%AC2%E7%89%88%E3%80%8B%E7%AC%AC12%E7%AB%A0%20pandas%E9%AB%98%E7%BA%A7%E5%BA%94%E7%94%A8/"/>
    <id>https://glanhoo.coding.me/2019/11/05/%E3%80%8A%E5%88%A9%E7%94%A8Python%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%C2%B7%E7%AC%AC2%E7%89%88%E3%80%8B%E7%AC%AC12%E7%AB%A0%20pandas%E9%AB%98%E7%BA%A7%E5%BA%94%E7%94%A8/</id>
    <published>2019-11-05T02:01:28.000Z</published>
    <updated>2019-12-11T02:21:28.836Z</updated>
    
    <content type="html"><![CDATA[<p>转载自<a href="https://www.jianshu.com/p/9d093ebcc5d8" target="_blank" rel="noopener">简书</a></p><p><a href="../《利用Python进行数据分析·第2版》第1章%20准备工作">第1章 准备工作</a><br> <a href="../《利用Python进行数据分析·第2版》第2章%20Python语法基础，IPython和Jupyter%20Notebooks">第2章 Python语法基础，IPython和Jupyter Notebooks</a><br> <a href="../《利用Python进行数据分析·第2版》第3章%20Python的数据结构、函数和文件">第3章 Python的数据结构、函数和文件</a><br> <a href="../《利用Python进行数据分析·第2版》第4章%20NumPy基础：数组和矢量计算">第4章 NumPy基础：数组和矢量计算</a><br> <a href="../《利用Python进行数据分析·第2版》第5章%20pandas入门">第5章 pandas入门</a><br> <a href="../《利用Python进行数据分析·第2版》第6章%20数据加载、存储与文件格式">第6章 数据加载、存储与文件格式</a><br> <a href="../《利用Python进行数据分析·第2版》第7章%20数据清洗和准备">第7章 数据清洗和准备</a><br> <a href="../《利用Python进行数据分析·第2版》第8章%20数据规整：聚合、合并和重塑">第8章 数据规整：聚合、合并和重塑</a><br> <a href="../《利用Python进行数据分析·第2版》第9章%20绘图和可视化">第9章 绘图和可视化</a><br> <a href="../《利用Python进行数据分析·第2版》第10章%20数据聚合与分组运算">第10章 数据聚合与分组运算</a><br> <a href="../《利用Python进行数据分析·第2版》第11章%20时间序列">第11章 时间序列</a><br>第12章 pandas高级应用<br> <a href="../《利用Python进行数据分析·第2版》第13章%20Python建模库介绍">第13章 Python建模库介绍</a><br> <a href="../《利用Python进行数据分析·第2版》第14章%20数据分析案例">第14章 数据分析案例</a><br> <a href="../《利用Python进行数据分析·第2版》附录A%20NumPy高级应用">附录A NumPy高级应用</a><br> <a href="../《利用Python进行数据分析·第2版》附录B%20更多关于IPython的内容（完）">附录B 更多关于IPython的内容（完）</a>      </p><a id="more"></a><hr><p>前面的章节关注于不同类型的数据规整流程和NumPy、pandas与其它库的特点。随着时间的发展，pandas发展出了更多适合高级用户的功能。本章就要深入学习pandas的高级功能。</p><h1 id="12-1-分类数据"><a href="#12-1-分类数据" class="headerlink" title="12.1 分类数据"></a>12.1 分类数据</h1><p>这一节介绍的是pandas的分类类型。我会向你展示通过使用它，提高性能和内存的使用率。我还会介绍一些在统计和机器学习中使用分类数据的工具。</p><h2 id="背景和目的"><a href="#背景和目的" class="headerlink" title="背景和目的"></a>背景和目的</h2><p>表中的一列通常会有重复的包含不同值的小集合的情况。我们已经学过了unique和value_counts，它们可以从数组提取出不同的值，并分别计算频率：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">10</span>]: <span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np; <span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">11</span>]: values = pd.Series([<span class="hljs-string">'apple'</span>, <span class="hljs-string">'orange'</span>, <span class="hljs-string">'apple'</span>,</span><br><span class="line">   ....:                     <span class="hljs-string">'apple'</span>] * <span class="hljs-number">2</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">12</span>]: values</span><br><span class="line">Out[<span class="hljs-number">12</span>]: </span><br><span class="line"><span class="hljs-number">0</span>     apple</span><br><span class="line"><span class="hljs-number">1</span>    orange</span><br><span class="line"><span class="hljs-number">2</span>     apple</span><br><span class="line"><span class="hljs-number">3</span>     apple</span><br><span class="line"><span class="hljs-number">4</span>     apple</span><br><span class="line"><span class="hljs-number">5</span>    orange</span><br><span class="line"><span class="hljs-number">6</span>     apple</span><br><span class="line"><span class="hljs-number">7</span>     apple</span><br><span class="line">dtype: object</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">13</span>]: pd.unique(values)</span><br><span class="line">Out[<span class="hljs-number">13</span>]: array([<span class="hljs-string">'apple'</span>, <span class="hljs-string">'orange'</span>], dtype=object)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">14</span>]: pd.value_counts(values)</span><br><span class="line">Out[<span class="hljs-number">14</span>]: </span><br><span class="line">apple     <span class="hljs-number">6</span></span><br><span class="line">orange    <span class="hljs-number">2</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><p>许多数据系统（数据仓库、统计计算或其它应用）都发展出了特定的表征重复值的方法，以进行高效的存储和计算。在数据仓库中，最好的方法是使用所谓的包含不同值的维表(Dimension Table)，将主要的参数存储为引用维表整数键：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">15</span>]: values = pd.Series([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>] * <span class="hljs-number">2</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">16</span>]: dim = pd.Series([<span class="hljs-string">'apple'</span>, <span class="hljs-string">'orange'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">17</span>]: values</span><br><span class="line">Out[<span class="hljs-number">17</span>]: </span><br><span class="line"><span class="hljs-number">0</span>    <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-number">1</span>    <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-number">2</span>    <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-number">3</span>    <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-number">4</span>    <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-number">5</span>    <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-number">6</span>    <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-number">7</span>    <span class="hljs-number">0</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">18</span>]: dim</span><br><span class="line">Out[<span class="hljs-number">18</span>]: </span><br><span class="line"><span class="hljs-number">0</span>     apple</span><br><span class="line"><span class="hljs-number">1</span>    orange</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><p>可以使用take方法存储原始的字符串Series：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">19</span>]: dim.take(values)</span><br><span class="line">Out[<span class="hljs-number">19</span>]: </span><br><span class="line"><span class="hljs-number">0</span>     apple</span><br><span class="line"><span class="hljs-number">1</span>    orange</span><br><span class="line"><span class="hljs-number">0</span>     apple</span><br><span class="line"><span class="hljs-number">0</span>     apple</span><br><span class="line"><span class="hljs-number">0</span>     apple</span><br><span class="line"><span class="hljs-number">1</span>    orange</span><br><span class="line"><span class="hljs-number">0</span>     apple</span><br><span class="line"><span class="hljs-number">0</span>     apple</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><p>这种用整数表示的方法称为分类或字典编码表示法。不同值得数组称为分类、字典或数据级。本书中，我们使用分类的说法。表示分类的整数值称为分类编码或简单地称为编码。</p><p>分类表示可以在进行分析时大大的提高性能。你也可以在保持编码不变的情况下，对分类进行转换。一些相对简单的转变例子包括：</p><ul><li>重命名分类。</li><li>加入一个新的分类，不改变已经存在的分类的顺序或位置。</li></ul><h2 id="pandas的分类类型"><a href="#pandas的分类类型" class="headerlink" title="pandas的分类类型"></a>pandas的分类类型</h2><p>pandas有一个特殊的分类类型，用于保存使用整数分类表示法的数据。看一个之前的Series例子：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">20</span>]: fruits = [<span class="hljs-string">'apple'</span>, <span class="hljs-string">'orange'</span>, <span class="hljs-string">'apple'</span>, <span class="hljs-string">'apple'</span>] * <span class="hljs-number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">21</span>]: N = len(fruits)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">22</span>]: df = pd.DataFrame(&#123;<span class="hljs-string">'fruit'</span>: fruits,</span><br><span class="line">   ....:                    <span class="hljs-string">'basket_id'</span>: np.arange(N),</span><br><span class="line">   ....:                    <span class="hljs-string">'count'</span>: np.random.randint(<span class="hljs-number">3</span>, <span class="hljs-number">15</span>, size=N),</span><br><span class="line">   ....:                    <span class="hljs-string">'weight'</span>: np.random.uniform(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>, size=N)&#125;,</span><br><span class="line">   ....:                   columns=[<span class="hljs-string">'basket_id'</span>, <span class="hljs-string">'fruit'</span>, <span class="hljs-string">'count'</span>, <span class="hljs-string">'weight'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">23</span>]: df</span><br><span class="line">Out[<span class="hljs-number">23</span>]: </span><br><span class="line">   basket_id   fruit  count    weight</span><br><span class="line"><span class="hljs-number">0</span>          <span class="hljs-number">0</span>   apple      <span class="hljs-number">5</span>  <span class="hljs-number">3.858058</span></span><br><span class="line"><span class="hljs-number">1</span>          <span class="hljs-number">1</span>  orange      <span class="hljs-number">8</span>  <span class="hljs-number">2.612708</span></span><br><span class="line"><span class="hljs-number">2</span>          <span class="hljs-number">2</span>   apple      <span class="hljs-number">4</span>  <span class="hljs-number">2.995627</span></span><br><span class="line"><span class="hljs-number">3</span>          <span class="hljs-number">3</span>   apple      <span class="hljs-number">7</span>  <span class="hljs-number">2.614279</span></span><br><span class="line"><span class="hljs-number">4</span>          <span class="hljs-number">4</span>   apple     <span class="hljs-number">12</span>  <span class="hljs-number">2.990859</span></span><br><span class="line"><span class="hljs-number">5</span>          <span class="hljs-number">5</span>  orange      <span class="hljs-number">8</span>  <span class="hljs-number">3.845227</span></span><br><span class="line"><span class="hljs-number">6</span>          <span class="hljs-number">6</span>   apple      <span class="hljs-number">5</span>  <span class="hljs-number">0.033553</span></span><br><span class="line"><span class="hljs-number">7</span>          <span class="hljs-number">7</span>   apple      <span class="hljs-number">4</span>  <span class="hljs-number">0.425778</span></span><br></pre></td></tr></table></figure><p>这里，df[‘fruit’]是一个Python字符串对象的数组。我们可以通过调用它，将它转变为分类：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">24</span>]: fruit_cat = df[<span class="hljs-string">'fruit'</span>].astype(<span class="hljs-string">'category'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">25</span>]: fruit_cat</span><br><span class="line">Out[<span class="hljs-number">25</span>]: </span><br><span class="line"><span class="hljs-number">0</span>     apple</span><br><span class="line"><span class="hljs-number">1</span>    orange</span><br><span class="line"><span class="hljs-number">2</span>     apple</span><br><span class="line"><span class="hljs-number">3</span>     apple</span><br><span class="line"><span class="hljs-number">4</span>     apple</span><br><span class="line"><span class="hljs-number">5</span>    orange</span><br><span class="line"><span class="hljs-number">6</span>     apple</span><br><span class="line"><span class="hljs-number">7</span>     apple</span><br><span class="line">Name: fruit, dtype: category</span><br><span class="line">Categories (<span class="hljs-number">2</span>, object): [apple, orange]</span><br></pre></td></tr></table></figure><p>fruit_cat的值不是NumPy数组，而是一个pandas.Categorical实例：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">26</span>]: c = fruit_cat.values</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">27</span>]: type(c)</span><br><span class="line">Out[<span class="hljs-number">27</span>]: pandas.core.categorical.Categorical</span><br></pre></td></tr></table></figure><p>分类对象有categories和codes属性：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">28</span>]: c.categories</span><br><span class="line">Out[<span class="hljs-number">28</span>]: Index([<span class="hljs-string">'apple'</span>, <span class="hljs-string">'orange'</span>], dtype=<span class="hljs-string">'object'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">29</span>]: c.codes</span><br><span class="line">Out[<span class="hljs-number">29</span>]: array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], dtype=int8)</span><br></pre></td></tr></table></figure><p>你可将DataFrame的列通过分配转换结果，转换为分类：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">30</span>]: df[<span class="hljs-string">'fruit'</span>] = df[<span class="hljs-string">'fruit'</span>].astype(<span class="hljs-string">'category'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">31</span>]: df.fruit</span><br><span class="line">Out[<span class="hljs-number">31</span>]:</span><br><span class="line"><span class="hljs-number">0</span>     apple</span><br><span class="line"><span class="hljs-number">1</span>    orange</span><br><span class="line"><span class="hljs-number">2</span>     apple</span><br><span class="line"><span class="hljs-number">3</span>     apple</span><br><span class="line"><span class="hljs-number">4</span>     apple</span><br><span class="line"><span class="hljs-number">5</span>    orange</span><br><span class="line"><span class="hljs-number">6</span>     apple</span><br><span class="line"><span class="hljs-number">7</span>     apple</span><br><span class="line">Name: fruit, dtype: category</span><br><span class="line">Categories (<span class="hljs-number">2</span>, object): [apple, orange]</span><br></pre></td></tr></table></figure><p>你还可以从其它Python序列直接创建pandas.Categorical：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">32</span>]: my_categories = pd.Categorical([<span class="hljs-string">'foo'</span>, <span class="hljs-string">'bar'</span>, <span class="hljs-string">'baz'</span>, <span class="hljs-string">'foo'</span>, <span class="hljs-string">'bar'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">33</span>]: my_categories</span><br><span class="line">Out[<span class="hljs-number">33</span>]: </span><br><span class="line">[foo, bar, baz, foo, bar]</span><br><span class="line">Categories (<span class="hljs-number">3</span>, object): [bar, baz, foo]</span><br></pre></td></tr></table></figure><p>如果你已经从其它源获得了分类编码，你还可以使用from_codes构造器：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">34</span>]: categories = [<span class="hljs-string">'foo'</span>, <span class="hljs-string">'bar'</span>, <span class="hljs-string">'baz'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">35</span>]: codes = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">36</span>]: my_cats_2 = pd.Categorical.from_codes(codes, categories)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">37</span>]: my_cats_2</span><br><span class="line">Out[<span class="hljs-number">37</span>]: </span><br><span class="line">[foo, bar, baz, foo, foo, bar]</span><br><span class="line">Categories (<span class="hljs-number">3</span>, object): [foo, bar, baz]</span><br></pre></td></tr></table></figure><p>与显示指定不同，分类变换不认定指定的分类顺序。因此取决于输入数据的顺序，categories数组的顺序会不同。当使用from_codes或其它的构造器时，你可以指定分类一个有意义的顺序：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">38</span>]: ordered_cat = pd.Categorical.from_codes(codes, categories,</span><br><span class="line">   ....:                                         ordered=<span class="hljs-literal">True</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">39</span>]: ordered_cat</span><br><span class="line">Out[<span class="hljs-number">39</span>]: </span><br><span class="line">[foo, bar, baz, foo, foo, bar]</span><br><span class="line">Categories (<span class="hljs-number">3</span>, object): [foo &lt; bar &lt; baz]</span><br></pre></td></tr></table></figure><p>输出[foo &lt; bar &lt; baz]指明‘foo’位于‘bar’的前面，以此类推。无序的分类实例可以通过as_ordered排序：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">40</span>]: my_cats_2.as_ordered()</span><br><span class="line">Out[<span class="hljs-number">40</span>]: </span><br><span class="line">[foo, bar, baz, foo, foo, bar]</span><br><span class="line">Categories (<span class="hljs-number">3</span>, object): [foo &lt; bar &lt; baz]</span><br></pre></td></tr></table></figure><p>最后要注意，分类数据不需要字符串，尽管我仅仅展示了字符串的例子。分类数组可以包括任意不可变类型。</p><h2 id="用分类进行计算"><a href="#用分类进行计算" class="headerlink" title="用分类进行计算"></a>用分类进行计算</h2><p>与非编码版本（比如字符串数组）相比，使用pandas的Categorical有些类似。某些pandas组件，比如groupby函数，更适合进行分类。还有一些函数可以使用有序标志位。</p><p>来看一些随机的数值数据，使用pandas.qcut面元函数。它会返回pandas.Categorical，我们之前使用过pandas.cut，但没解释分类是如何工作的：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">41</span>]: np.random.seed(<span class="hljs-number">12345</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">42</span>]: draws = np.random.randn(<span class="hljs-number">1000</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">43</span>]: draws[:<span class="hljs-number">5</span>]</span><br><span class="line">Out[<span class="hljs-number">43</span>]: array([<span class="hljs-number">-0.2047</span>,  <span class="hljs-number">0.4789</span>, <span class="hljs-number">-0.5194</span>, <span class="hljs-number">-0.5557</span>,  <span class="hljs-number">1.9658</span>])</span><br></pre></td></tr></table></figure><p>计算这个数据的分位面元，提取一些统计信息：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">44</span>]: bins = pd.qcut(draws, <span class="hljs-number">4</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">45</span>]: bins</span><br><span class="line">Out[<span class="hljs-number">45</span>]: </span><br><span class="line">[(<span class="hljs-number">-0.684</span>, <span class="hljs-number">-0.0101</span>], (<span class="hljs-number">-0.0101</span>, <span class="hljs-number">0.63</span>], (<span class="hljs-number">-0.684</span>, <span class="hljs-number">-0.0101</span>], (<span class="hljs-number">-0.684</span>, <span class="hljs-number">-0.0101</span>], (<span class="hljs-number">0.63</span>,</span><br><span class="line"> <span class="hljs-number">3.928</span>], ..., (<span class="hljs-number">-0.0101</span>, <span class="hljs-number">0.63</span>], (<span class="hljs-number">-0.684</span>, <span class="hljs-number">-0.0101</span>], (<span class="hljs-number">-2.95</span>, <span class="hljs-number">-0.684</span>], (<span class="hljs-number">-0.0101</span>, <span class="hljs-number">0.63</span></span><br><span class="line">], (<span class="hljs-number">0.63</span>, <span class="hljs-number">3.928</span>]]</span><br><span class="line">Length: <span class="hljs-number">1000</span></span><br><span class="line">Categories (<span class="hljs-number">4</span>, interval[float64]): [(<span class="hljs-number">-2.95</span>, <span class="hljs-number">-0.684</span>] &lt; (<span class="hljs-number">-0.684</span>, <span class="hljs-number">-0.0101</span>] &lt; (<span class="hljs-number">-0.010</span></span><br><span class="line"><span class="hljs-number">1</span>, <span class="hljs-number">0.63</span>] &lt;</span><br><span class="line">                                    (<span class="hljs-number">0.63</span>, <span class="hljs-number">3.928</span>]]</span><br></pre></td></tr></table></figure><p>虽然有用，确切的样本分位数与分位的名称相比，不利于生成汇总。我们可以使用labels参数qcut，实现目的：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">46</span>]: bins = pd.qcut(draws, <span class="hljs-number">4</span>, labels=[<span class="hljs-string">'Q1'</span>, <span class="hljs-string">'Q2'</span>, <span class="hljs-string">'Q3'</span>, <span class="hljs-string">'Q4'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">47</span>]: bins</span><br><span class="line">Out[<span class="hljs-number">47</span>]: </span><br><span class="line">[Q2, Q3, Q2, Q2, Q4, ..., Q3, Q2, Q1, Q3, Q4]</span><br><span class="line">Length: <span class="hljs-number">1000</span></span><br><span class="line">Categories (<span class="hljs-number">4</span>, object): [Q1 &lt; Q2 &lt; Q3 &lt; Q4]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">48</span>]: bins.codes[:<span class="hljs-number">10</span>]</span><br><span class="line">Out[<span class="hljs-number">48</span>]: array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>], dtype=int8)</span><br></pre></td></tr></table></figure><p>加上标签的面元分类不包含数据面元边界的信息，因此可以使用groupby提取一些汇总信息：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">49</span>]: bins = pd.Series(bins, name=<span class="hljs-string">'quartile'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">50</span>]: results = (pd.Series(draws)</span><br><span class="line">   ....:            .groupby(bins)</span><br><span class="line">   ....:            .agg([<span class="hljs-string">'count'</span>, <span class="hljs-string">'min'</span>, <span class="hljs-string">'max'</span>])</span><br><span class="line">   ....:            .reset_index())</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">51</span>]: results</span><br><span class="line">Out[<span class="hljs-number">51</span>]: </span><br><span class="line">  quartile  count       min       max</span><br><span class="line"><span class="hljs-number">0</span>       Q1    <span class="hljs-number">250</span> <span class="hljs-number">-2.949343</span> <span class="hljs-number">-0.685484</span></span><br><span class="line"><span class="hljs-number">1</span>       Q2    <span class="hljs-number">250</span> <span class="hljs-number">-0.683066</span> <span class="hljs-number">-0.010115</span></span><br><span class="line"><span class="hljs-number">2</span>       Q3    <span class="hljs-number">250</span> <span class="hljs-number">-0.010032</span>  <span class="hljs-number">0.628894</span></span><br><span class="line"><span class="hljs-number">3</span>       Q4    <span class="hljs-number">250</span>  <span class="hljs-number">0.634238</span>  <span class="hljs-number">3.927528</span></span><br></pre></td></tr></table></figure><p>分位数列保存了原始的面元分类信息，包括排序：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">52</span>]: results[<span class="hljs-string">'quartile'</span>]</span><br><span class="line">Out[<span class="hljs-number">52</span>]:</span><br><span class="line"><span class="hljs-number">0</span>    Q1</span><br><span class="line"><span class="hljs-number">1</span>    Q2</span><br><span class="line"><span class="hljs-number">2</span>    Q3</span><br><span class="line"><span class="hljs-number">3</span>    Q4</span><br><span class="line">Name: quartile, dtype: category</span><br><span class="line">Categories (<span class="hljs-number">4</span>, object): [Q1 &lt; Q2 &lt; Q3 &lt; Q4]</span><br></pre></td></tr></table></figure><h2 id="用分类提高性能"><a href="#用分类提高性能" class="headerlink" title="用分类提高性能"></a>用分类提高性能</h2><p>如果你是在一个特定数据集上做大量分析，将其转换为分类可以极大地提高效率。DataFrame列的分类使用的内存通常少的多。来看一些包含一千万元素的Series，和一些不同的分类：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">53</span>]: N = <span class="hljs-number">10000000</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">54</span>]: draws = pd.Series(np.random.randn(N))</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">55</span>]: labels = pd.Series([<span class="hljs-string">'foo'</span>, <span class="hljs-string">'bar'</span>, <span class="hljs-string">'baz'</span>, <span class="hljs-string">'qux'</span>] * (N // <span class="hljs-number">4</span>))</span><br></pre></td></tr></table></figure><p>现在，将标签转换为分类：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">56</span>]: categories = labels.astype(<span class="hljs-string">'category'</span>)</span><br></pre></td></tr></table></figure><p>这时，可以看到标签使用的内存远比分类多：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">57</span>]: labels.memory_usage()</span><br><span class="line">Out[<span class="hljs-number">57</span>]: <span class="hljs-number">80000080</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">58</span>]: categories.memory_usage()</span><br><span class="line">Out[<span class="hljs-number">58</span>]: <span class="hljs-number">10000272</span></span><br></pre></td></tr></table></figure><p>转换为分类不是没有代价的，但这是一次性的代价：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">59</span>]: %time _ = labels.astype(<span class="hljs-string">'category'</span>)</span><br><span class="line">CPU times: user <span class="hljs-number">490</span> ms, sys: <span class="hljs-number">240</span> ms, total: <span class="hljs-number">730</span> ms</span><br><span class="line">Wall time: <span class="hljs-number">726</span> ms</span><br></pre></td></tr></table></figure><p>GroupBy使用分类操作明显更快，是因为底层的算法使用整数编码数组，而不是字符串数组。</p><h2 id="分类方法"><a href="#分类方法" class="headerlink" title="分类方法"></a>分类方法</h2><p>包含分类数据的Series有一些特殊的方法，类似于Series.str字符串方法。它还提供了方便的分类和编码的使用方法。看下面的Series：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">60</span>]: s = pd.Series([<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>] * <span class="hljs-number">2</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">61</span>]: cat_s = s.astype(<span class="hljs-string">'category'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">62</span>]: cat_s</span><br><span class="line">Out[<span class="hljs-number">62</span>]: </span><br><span class="line"><span class="hljs-number">0</span>    a</span><br><span class="line"><span class="hljs-number">1</span>    b</span><br><span class="line"><span class="hljs-number">2</span>    c</span><br><span class="line"><span class="hljs-number">3</span>    d</span><br><span class="line"><span class="hljs-number">4</span>    a</span><br><span class="line"><span class="hljs-number">5</span>    b</span><br><span class="line"><span class="hljs-number">6</span>    c</span><br><span class="line"><span class="hljs-number">7</span>    d</span><br><span class="line">dtype: category</span><br><span class="line">Categories (<span class="hljs-number">4</span>, object): [a, b, c, d]</span><br></pre></td></tr></table></figure><p>特别的cat属性提供了分类方法的入口：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">63</span>]: cat_s.cat.codes</span><br><span class="line">Out[<span class="hljs-number">63</span>]: </span><br><span class="line"><span class="hljs-number">0</span>    <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-number">1</span>    <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-number">2</span>    <span class="hljs-number">2</span></span><br><span class="line"><span class="hljs-number">3</span>    <span class="hljs-number">3</span></span><br><span class="line"><span class="hljs-number">4</span>    <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-number">5</span>    <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-number">6</span>    <span class="hljs-number">2</span></span><br><span class="line"><span class="hljs-number">7</span>    <span class="hljs-number">3</span></span><br><span class="line">dtype: int8</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">64</span>]: cat_s.cat.categories</span><br><span class="line">Out[<span class="hljs-number">64</span>]: Index([<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>], dtype=<span class="hljs-string">'object'</span>)</span><br></pre></td></tr></table></figure><p>假设我们知道这个数据的实际分类集，超出了数据中的四个值。我们可以使用set_categories方法改变它们：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">65</span>]: actual_categories = [<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>, <span class="hljs-string">'e'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">66</span>]: cat_s2 = cat_s.cat.set_categories(actual_categories)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">67</span>]: cat_s2</span><br><span class="line">Out[<span class="hljs-number">67</span>]: </span><br><span class="line"><span class="hljs-number">0</span>    a</span><br><span class="line"><span class="hljs-number">1</span>    b</span><br><span class="line"><span class="hljs-number">2</span>    c</span><br><span class="line"><span class="hljs-number">3</span>    d</span><br><span class="line"><span class="hljs-number">4</span>    a</span><br><span class="line"><span class="hljs-number">5</span>    b</span><br><span class="line"><span class="hljs-number">6</span>    c</span><br><span class="line"><span class="hljs-number">7</span>    d</span><br><span class="line">dtype: category</span><br><span class="line">Categories (<span class="hljs-number">5</span>, object): [a, b, c, d, e]</span><br></pre></td></tr></table></figure><p>虽然数据看起来没变，新的分类将反映在它们的操作中。例如，如果有的话，value_counts表示分类：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">68</span>]: cat_s.value_counts()</span><br><span class="line">Out[<span class="hljs-number">68</span>]: </span><br><span class="line">d    <span class="hljs-number">2</span></span><br><span class="line">c    <span class="hljs-number">2</span></span><br><span class="line">b    <span class="hljs-number">2</span></span><br><span class="line">a    <span class="hljs-number">2</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">69</span>]: cat_s2.value_counts()</span><br><span class="line">Out[<span class="hljs-number">69</span>]: </span><br><span class="line">d    <span class="hljs-number">2</span></span><br><span class="line">c    <span class="hljs-number">2</span></span><br><span class="line">b    <span class="hljs-number">2</span></span><br><span class="line">a    <span class="hljs-number">2</span></span><br><span class="line">e    <span class="hljs-number">0</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><p>在大数据集中，分类经常作为节省内存和高性能的便捷工具。过滤完大DataFrame或Series之后，许多分类可能不会出现在数据中。我们可以使用remove_unused_categories方法删除没看到的分类：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">70</span>]: cat_s3 = cat_s[cat_s.isin([<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>])]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">71</span>]: cat_s3</span><br><span class="line">Out[<span class="hljs-number">71</span>]: </span><br><span class="line"><span class="hljs-number">0</span>    a</span><br><span class="line"><span class="hljs-number">1</span>    b</span><br><span class="line"><span class="hljs-number">4</span>    a</span><br><span class="line"><span class="hljs-number">5</span>    b</span><br><span class="line">dtype: category</span><br><span class="line">Categories (<span class="hljs-number">4</span>, object): [a, b, c, d]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">72</span>]: cat_s3.cat.remove_unused_categories()</span><br><span class="line">Out[<span class="hljs-number">72</span>]: </span><br><span class="line"><span class="hljs-number">0</span>    a</span><br><span class="line"><span class="hljs-number">1</span>    b</span><br><span class="line"><span class="hljs-number">4</span>    a</span><br><span class="line"><span class="hljs-number">5</span>    b</span><br><span class="line">dtype: category</span><br><span class="line">Categories (<span class="hljs-number">2</span>, object): [a, b]</span><br></pre></td></tr></table></figure><p>表12-1列出了可用的分类方法。</p><p><img src="/images/blog/7178691-6c602152c2bba658.webp" alt="img"></p><p>表12-1 pandas的Series的分类方法</p><h2 id="为建模创建虚拟变量"><a href="#为建模创建虚拟变量" class="headerlink" title="为建模创建虚拟变量"></a>为建模创建虚拟变量</h2><p>当你使用统计或机器学习工具时，通常会将分类数据转换为虚拟变量，也称为one-hot编码。这包括创建一个不同类别的列的DataFrame；这些列包含给定分类的1s，其它为0。</p><p>看前面的例子：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">73</span>]: cat_s = pd.Series([<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>] * <span class="hljs-number">2</span>, dtype=<span class="hljs-string">'category'</span>)</span><br></pre></td></tr></table></figure><p>前面的第7章提到过，pandas.get_dummies函数可以转换这个分类数据为包含虚拟变量的DataFrame：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">74</span>]: pd.get_dummies(cat_s)</span><br><span class="line">Out[<span class="hljs-number">74</span>]: </span><br><span class="line">   a  b  c  d</span><br><span class="line"><span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-number">1</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-number">2</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-number">3</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-number">4</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-number">5</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-number">6</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-number">7</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span></span><br></pre></td></tr></table></figure><h1 id="12-2-GroupBy高级应用"><a href="#12-2-GroupBy高级应用" class="headerlink" title="12.2 GroupBy高级应用"></a>12.2 GroupBy高级应用</h1><p>尽管我们在第10章已经深度学习了Series和DataFrame的Groupby方法，还有一些方法也是很有用的。</p><h2 id="分组转换和“解封”GroupBy"><a href="#分组转换和“解封”GroupBy" class="headerlink" title="分组转换和“解封”GroupBy"></a>分组转换和“解封”GroupBy</h2><p>在第10章，我们在分组操作中学习了apply方法，进行转换。还有另一个transform方法，它与apply很像，但是对使用的函数有一定限制：</p><ul><li>它可以产生向分组形状广播标量值</li><li>它可以产生一个和输入组形状相同的对象</li><li>它不能修改输入</li></ul><p>来看一个简单的例子：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">75</span>]: df = pd.DataFrame(&#123;<span class="hljs-string">'key'</span>: [<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>] * <span class="hljs-number">4</span>,</span><br><span class="line">   ....:                    <span class="hljs-string">'value'</span>: np.arange(<span class="hljs-number">12.</span>)&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">76</span>]: df</span><br><span class="line">Out[<span class="hljs-number">76</span>]: </span><br><span class="line">   key  value</span><br><span class="line"><span class="hljs-number">0</span>    a    <span class="hljs-number">0.0</span></span><br><span class="line"><span class="hljs-number">1</span>    b    <span class="hljs-number">1.0</span></span><br><span class="line"><span class="hljs-number">2</span>    c    <span class="hljs-number">2.0</span></span><br><span class="line"><span class="hljs-number">3</span>    a    <span class="hljs-number">3.0</span></span><br><span class="line"><span class="hljs-number">4</span>    b    <span class="hljs-number">4.0</span></span><br><span class="line"><span class="hljs-number">5</span>    c    <span class="hljs-number">5.0</span></span><br><span class="line"><span class="hljs-number">6</span>    a    <span class="hljs-number">6.0</span></span><br><span class="line"><span class="hljs-number">7</span>    b    <span class="hljs-number">7.0</span></span><br><span class="line"><span class="hljs-number">8</span>    c    <span class="hljs-number">8.0</span></span><br><span class="line"><span class="hljs-number">9</span>    a    <span class="hljs-number">9.0</span></span><br><span class="line"><span class="hljs-number">10</span>   b   <span class="hljs-number">10.0</span></span><br><span class="line"><span class="hljs-number">11</span>   c   <span class="hljs-number">11.0</span></span><br></pre></td></tr></table></figure><p>按键进行分组：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">77</span>]: g = df.groupby(<span class="hljs-string">'key'</span>).value</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">78</span>]: g.mean()</span><br><span class="line">Out[<span class="hljs-number">78</span>]: </span><br><span class="line">key</span><br><span class="line">a    <span class="hljs-number">4.5</span></span><br><span class="line">b    <span class="hljs-number">5.5</span></span><br><span class="line">c    <span class="hljs-number">6.5</span></span><br><span class="line">Name: value, dtype: float64</span><br></pre></td></tr></table></figure><p>假设我们想产生一个和df[‘value’]形状相同的Series，但值替换为按键分组的平均值。我们可以传递函数lambda x: x.mean()进行转换：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">79</span>]: g.transform(<span class="hljs-keyword">lambda</span> x: x.mean())</span><br><span class="line">Out[<span class="hljs-number">79</span>]: </span><br><span class="line"><span class="hljs-number">0</span>     <span class="hljs-number">4.5</span></span><br><span class="line"><span class="hljs-number">1</span>     <span class="hljs-number">5.5</span></span><br><span class="line"><span class="hljs-number">2</span>     <span class="hljs-number">6.5</span></span><br><span class="line"><span class="hljs-number">3</span>     <span class="hljs-number">4.5</span></span><br><span class="line"><span class="hljs-number">4</span>     <span class="hljs-number">5.5</span></span><br><span class="line"><span class="hljs-number">5</span>     <span class="hljs-number">6.5</span></span><br><span class="line"><span class="hljs-number">6</span>     <span class="hljs-number">4.5</span></span><br><span class="line"><span class="hljs-number">7</span>     <span class="hljs-number">5.5</span></span><br><span class="line"><span class="hljs-number">8</span>     <span class="hljs-number">6.5</span></span><br><span class="line"><span class="hljs-number">9</span>     <span class="hljs-number">4.5</span></span><br><span class="line"><span class="hljs-number">10</span>    <span class="hljs-number">5.5</span></span><br><span class="line"><span class="hljs-number">11</span>    <span class="hljs-number">6.5</span></span><br><span class="line">Name: value, dtype: float64</span><br></pre></td></tr></table></figure><p>对于内置的聚合函数，我们可以传递一个字符串假名作为GroupBy的agg方法：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">80</span>]: g.transform(<span class="hljs-string">'mean'</span>)</span><br><span class="line">Out[<span class="hljs-number">80</span>]: </span><br><span class="line"><span class="hljs-number">0</span>     <span class="hljs-number">4.5</span></span><br><span class="line"><span class="hljs-number">1</span>     <span class="hljs-number">5.5</span></span><br><span class="line"><span class="hljs-number">2</span>     <span class="hljs-number">6.5</span></span><br><span class="line"><span class="hljs-number">3</span>     <span class="hljs-number">4.5</span></span><br><span class="line"><span class="hljs-number">4</span>     <span class="hljs-number">5.5</span></span><br><span class="line"><span class="hljs-number">5</span>     <span class="hljs-number">6.5</span></span><br><span class="line"><span class="hljs-number">6</span>     <span class="hljs-number">4.5</span></span><br><span class="line"><span class="hljs-number">7</span>     <span class="hljs-number">5.5</span></span><br><span class="line"><span class="hljs-number">8</span>     <span class="hljs-number">6.5</span></span><br><span class="line"><span class="hljs-number">9</span>     <span class="hljs-number">4.5</span></span><br><span class="line"><span class="hljs-number">10</span>    <span class="hljs-number">5.5</span></span><br><span class="line"><span class="hljs-number">11</span>    <span class="hljs-number">6.5</span></span><br><span class="line">Name: value, dtype: float64</span><br></pre></td></tr></table></figure><p>与apply类似，transform的函数会返回Series，但是结果必须与输入大小相同。举个例子，我们可以用lambda函数将每个分组乘以2：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">81</span>]: g.transform(<span class="hljs-keyword">lambda</span> x: x * <span class="hljs-number">2</span>)</span><br><span class="line">Out[<span class="hljs-number">81</span>]: </span><br><span class="line"><span class="hljs-number">0</span>      <span class="hljs-number">0.0</span></span><br><span class="line"><span class="hljs-number">1</span>      <span class="hljs-number">2.0</span></span><br><span class="line"><span class="hljs-number">2</span>      <span class="hljs-number">4.0</span></span><br><span class="line"><span class="hljs-number">3</span>      <span class="hljs-number">6.0</span></span><br><span class="line"><span class="hljs-number">4</span>      <span class="hljs-number">8.0</span></span><br><span class="line"><span class="hljs-number">5</span>     <span class="hljs-number">10.0</span></span><br><span class="line"><span class="hljs-number">6</span>     <span class="hljs-number">12.0</span></span><br><span class="line"><span class="hljs-number">7</span>     <span class="hljs-number">14.0</span></span><br><span class="line"><span class="hljs-number">8</span>     <span class="hljs-number">16.0</span></span><br><span class="line"><span class="hljs-number">9</span>     <span class="hljs-number">18.0</span></span><br><span class="line"><span class="hljs-number">10</span>    <span class="hljs-number">20.0</span></span><br><span class="line"><span class="hljs-number">11</span>    <span class="hljs-number">22.0</span></span><br><span class="line">Name: value, dtype: float64</span><br></pre></td></tr></table></figure><p>再举一个复杂的例子，我们可以计算每个分组的降序排名：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">82</span>]: g.transform(<span class="hljs-keyword">lambda</span> x: x.rank(ascending=<span class="hljs-literal">False</span>))</span><br><span class="line">Out[<span class="hljs-number">82</span>]: </span><br><span class="line"><span class="hljs-number">0</span>     <span class="hljs-number">4.0</span></span><br><span class="line"><span class="hljs-number">1</span>     <span class="hljs-number">4.0</span></span><br><span class="line"><span class="hljs-number">2</span>     <span class="hljs-number">4.0</span></span><br><span class="line"><span class="hljs-number">3</span>     <span class="hljs-number">3.0</span></span><br><span class="line"><span class="hljs-number">4</span>     <span class="hljs-number">3.0</span></span><br><span class="line"><span class="hljs-number">5</span>     <span class="hljs-number">3.0</span></span><br><span class="line"><span class="hljs-number">6</span>     <span class="hljs-number">2.0</span></span><br><span class="line"><span class="hljs-number">7</span>     <span class="hljs-number">2.0</span></span><br><span class="line"><span class="hljs-number">8</span>     <span class="hljs-number">2.0</span></span><br><span class="line"><span class="hljs-number">9</span>     <span class="hljs-number">1.0</span></span><br><span class="line"><span class="hljs-number">10</span>    <span class="hljs-number">1.0</span></span><br><span class="line"><span class="hljs-number">11</span>    <span class="hljs-number">1.0</span></span><br><span class="line">Name: value, dtype: float64</span><br></pre></td></tr></table></figure><p>看一个由简单聚合构造的的分组转换函数：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">normalize</span><span class="hljs-params">(x)</span>:</span></span><br><span class="line">    <span class="hljs-keyword">return</span> (x - x.mean()) / x.std()</span><br></pre></td></tr></table></figure><p>我们用transform或apply可以获得等价的结果：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">84</span>]: g.transform(normalize)</span><br><span class="line">Out[<span class="hljs-number">84</span>]: </span><br><span class="line"><span class="hljs-number">0</span>    <span class="hljs-number">-1.161895</span></span><br><span class="line"><span class="hljs-number">1</span>    <span class="hljs-number">-1.161895</span></span><br><span class="line"><span class="hljs-number">2</span>    <span class="hljs-number">-1.161895</span></span><br><span class="line"><span class="hljs-number">3</span>    <span class="hljs-number">-0.387298</span></span><br><span class="line"><span class="hljs-number">4</span>    <span class="hljs-number">-0.387298</span></span><br><span class="line"><span class="hljs-number">5</span>    <span class="hljs-number">-0.387298</span></span><br><span class="line"><span class="hljs-number">6</span>     <span class="hljs-number">0.387298</span></span><br><span class="line"><span class="hljs-number">7</span>     <span class="hljs-number">0.387298</span></span><br><span class="line"><span class="hljs-number">8</span>     <span class="hljs-number">0.387298</span></span><br><span class="line"><span class="hljs-number">9</span>     <span class="hljs-number">1.161895</span></span><br><span class="line"><span class="hljs-number">10</span>    <span class="hljs-number">1.161895</span></span><br><span class="line"><span class="hljs-number">11</span>    <span class="hljs-number">1.161895</span></span><br><span class="line">Name: value, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">85</span>]: g.apply(normalize)</span><br><span class="line">Out[<span class="hljs-number">85</span>]: </span><br><span class="line"><span class="hljs-number">0</span>    <span class="hljs-number">-1.161895</span></span><br><span class="line"><span class="hljs-number">1</span>    <span class="hljs-number">-1.161895</span></span><br><span class="line"><span class="hljs-number">2</span>    <span class="hljs-number">-1.161895</span></span><br><span class="line"><span class="hljs-number">3</span>    <span class="hljs-number">-0.387298</span></span><br><span class="line"><span class="hljs-number">4</span>    <span class="hljs-number">-0.387298</span></span><br><span class="line"><span class="hljs-number">5</span>    <span class="hljs-number">-0.387298</span></span><br><span class="line"><span class="hljs-number">6</span>     <span class="hljs-number">0.387298</span></span><br><span class="line"><span class="hljs-number">7</span>     <span class="hljs-number">0.387298</span></span><br><span class="line"><span class="hljs-number">8</span>     <span class="hljs-number">0.387298</span></span><br><span class="line"><span class="hljs-number">9</span>     <span class="hljs-number">1.161895</span></span><br><span class="line"><span class="hljs-number">10</span>    <span class="hljs-number">1.161895</span></span><br><span class="line"><span class="hljs-number">11</span>    <span class="hljs-number">1.161895</span></span><br><span class="line">Name: value, dtype: float64</span><br></pre></td></tr></table></figure><p>内置的聚合函数，比如mean或sum，通常比apply函数快，也比transform快。这允许我们进行一个所谓的解封（unwrapped）分组操作：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">86</span>]: g.transform(<span class="hljs-string">'mean'</span>)</span><br><span class="line">Out[<span class="hljs-number">86</span>]: </span><br><span class="line"><span class="hljs-number">0</span>     <span class="hljs-number">4.5</span></span><br><span class="line"><span class="hljs-number">1</span>     <span class="hljs-number">5.5</span></span><br><span class="line"><span class="hljs-number">2</span>     <span class="hljs-number">6.5</span></span><br><span class="line"><span class="hljs-number">3</span>     <span class="hljs-number">4.5</span></span><br><span class="line"><span class="hljs-number">4</span>     <span class="hljs-number">5.5</span></span><br><span class="line"><span class="hljs-number">5</span>     <span class="hljs-number">6.5</span></span><br><span class="line"><span class="hljs-number">6</span>     <span class="hljs-number">4.5</span></span><br><span class="line"><span class="hljs-number">7</span>     <span class="hljs-number">5.5</span></span><br><span class="line"><span class="hljs-number">8</span>     <span class="hljs-number">6.5</span></span><br><span class="line"><span class="hljs-number">9</span>     <span class="hljs-number">4.5</span></span><br><span class="line"><span class="hljs-number">10</span>    <span class="hljs-number">5.5</span></span><br><span class="line"><span class="hljs-number">11</span>    <span class="hljs-number">6.5</span></span><br><span class="line">Name: value, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">87</span>]: normalized = (df[<span class="hljs-string">'value'</span>] - g.transform(<span class="hljs-string">'mean'</span>)) / g.transform(<span class="hljs-string">'std'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">88</span>]: normalized</span><br><span class="line">Out[<span class="hljs-number">88</span>]: </span><br><span class="line"><span class="hljs-number">0</span>    <span class="hljs-number">-1.161895</span></span><br><span class="line"><span class="hljs-number">1</span>    <span class="hljs-number">-1.161895</span></span><br><span class="line"><span class="hljs-number">2</span>    <span class="hljs-number">-1.161895</span></span><br><span class="line"><span class="hljs-number">3</span>    <span class="hljs-number">-0.387298</span></span><br><span class="line"><span class="hljs-number">4</span>    <span class="hljs-number">-0.387298</span></span><br><span class="line"><span class="hljs-number">5</span>    <span class="hljs-number">-0.387298</span></span><br><span class="line"><span class="hljs-number">6</span>     <span class="hljs-number">0.387298</span></span><br><span class="line"><span class="hljs-number">7</span>     <span class="hljs-number">0.387298</span></span><br><span class="line"><span class="hljs-number">8</span>     <span class="hljs-number">0.387298</span></span><br><span class="line"><span class="hljs-number">9</span>     <span class="hljs-number">1.161895</span></span><br><span class="line"><span class="hljs-number">10</span>    <span class="hljs-number">1.161895</span></span><br><span class="line"><span class="hljs-number">11</span>    <span class="hljs-number">1.161895</span></span><br><span class="line">Name: value, dtype: float64</span><br></pre></td></tr></table></figure><p>解封分组操作可能包括多个分组聚合，但是矢量化操作还是会带来收益。</p><h2 id="分组的时间重采样"><a href="#分组的时间重采样" class="headerlink" title="分组的时间重采样"></a>分组的时间重采样</h2><p>对于时间序列数据，resample方法从语义上是一个基于内在时间的分组操作。下面是一个示例表：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">89</span>]: N = <span class="hljs-number">15</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">90</span>]: times = pd.date_range(<span class="hljs-string">'2017-05-20 00:00'</span>, freq=<span class="hljs-string">'1min'</span>, periods=N)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">91</span>]: df = pd.DataFrame(&#123;<span class="hljs-string">'time'</span>: times,</span><br><span class="line">   ....:                    <span class="hljs-string">'value'</span>: np.arange(N)&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">92</span>]: df</span><br><span class="line">Out[<span class="hljs-number">92</span>]: </span><br><span class="line">                  time  value</span><br><span class="line"><span class="hljs-number">0</span>  <span class="hljs-number">2017</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>      <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-number">1</span>  <span class="hljs-number">2017</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>:<span class="hljs-number">00</span>      <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-number">2</span>  <span class="hljs-number">2017</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">02</span>:<span class="hljs-number">00</span>      <span class="hljs-number">2</span></span><br><span class="line"><span class="hljs-number">3</span>  <span class="hljs-number">2017</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">03</span>:<span class="hljs-number">00</span>      <span class="hljs-number">3</span></span><br><span class="line"><span class="hljs-number">4</span>  <span class="hljs-number">2017</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">04</span>:<span class="hljs-number">00</span>      <span class="hljs-number">4</span></span><br><span class="line"><span class="hljs-number">5</span>  <span class="hljs-number">2017</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">05</span>:<span class="hljs-number">00</span>      <span class="hljs-number">5</span></span><br><span class="line"><span class="hljs-number">6</span>  <span class="hljs-number">2017</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">06</span>:<span class="hljs-number">00</span>      <span class="hljs-number">6</span></span><br><span class="line"><span class="hljs-number">7</span>  <span class="hljs-number">2017</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">07</span>:<span class="hljs-number">00</span>      <span class="hljs-number">7</span></span><br><span class="line"><span class="hljs-number">8</span>  <span class="hljs-number">2017</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">08</span>:<span class="hljs-number">00</span>      <span class="hljs-number">8</span></span><br><span class="line"><span class="hljs-number">9</span>  <span class="hljs-number">2017</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">09</span>:<span class="hljs-number">00</span>      <span class="hljs-number">9</span></span><br><span class="line"><span class="hljs-number">10</span> <span class="hljs-number">2017</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">10</span>:<span class="hljs-number">00</span>     <span class="hljs-number">10</span></span><br><span class="line"><span class="hljs-number">11</span> <span class="hljs-number">2017</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">11</span>:<span class="hljs-number">00</span>     <span class="hljs-number">11</span></span><br><span class="line"><span class="hljs-number">12</span> <span class="hljs-number">2017</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">12</span>:<span class="hljs-number">00</span>     <span class="hljs-number">12</span></span><br><span class="line"><span class="hljs-number">13</span> <span class="hljs-number">2017</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">13</span>:<span class="hljs-number">00</span>     <span class="hljs-number">13</span></span><br><span class="line"><span class="hljs-number">14</span> <span class="hljs-number">2017</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">14</span>:<span class="hljs-number">00</span>     <span class="hljs-number">14</span></span><br></pre></td></tr></table></figure><p>这里，我们可以用time作为索引，然后重采样：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">93</span>]: df.set_index(<span class="hljs-string">'time'</span>).resample(<span class="hljs-string">'5min'</span>).count()</span><br><span class="line">Out[<span class="hljs-number">93</span>]: </span><br><span class="line">                     value</span><br><span class="line">time                      </span><br><span class="line"><span class="hljs-number">2017</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>      <span class="hljs-number">5</span></span><br><span class="line"><span class="hljs-number">2017</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">05</span>:<span class="hljs-number">00</span>      <span class="hljs-number">5</span></span><br><span class="line"><span class="hljs-number">2017</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">10</span>:<span class="hljs-number">00</span>      <span class="hljs-number">5</span></span><br></pre></td></tr></table></figure><p>假设DataFrame包含多个时间序列，用一个额外的分组键的列进行标记：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">94</span>]: df2 = pd.DataFrame(&#123;<span class="hljs-string">'time'</span>: times.repeat(<span class="hljs-number">3</span>),</span><br><span class="line">   ....:                     <span class="hljs-string">'key'</span>: np.tile([<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>], N),</span><br><span class="line">   ....:                     <span class="hljs-string">'value'</span>: np.arange(N * <span class="hljs-number">3.</span>)&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">95</span>]: df2[:<span class="hljs-number">7</span>]</span><br><span class="line">Out[<span class="hljs-number">95</span>]: </span><br><span class="line">  key                time  value</span><br><span class="line"><span class="hljs-number">0</span>   a <span class="hljs-number">2017</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0.0</span></span><br><span class="line"><span class="hljs-number">1</span>   b <span class="hljs-number">2017</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>    <span class="hljs-number">1.0</span></span><br><span class="line"><span class="hljs-number">2</span>   c <span class="hljs-number">2017</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>    <span class="hljs-number">2.0</span></span><br><span class="line"><span class="hljs-number">3</span>   a <span class="hljs-number">2017</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>:<span class="hljs-number">00</span>    <span class="hljs-number">3.0</span></span><br><span class="line"><span class="hljs-number">4</span>   b <span class="hljs-number">2017</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>:<span class="hljs-number">00</span>    <span class="hljs-number">4.0</span></span><br><span class="line"><span class="hljs-number">5</span>   c <span class="hljs-number">2017</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>:<span class="hljs-number">00</span>    <span class="hljs-number">5.0</span></span><br><span class="line"><span class="hljs-number">6</span>   a <span class="hljs-number">2017</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">02</span>:<span class="hljs-number">00</span>    <span class="hljs-number">6.0</span></span><br></pre></td></tr></table></figure><p>要对每个key值进行相同的重采样，我们引入pandas.TimeGrouper对象：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">96</span>]: time_key = pd.TimeGrouper(<span class="hljs-string">'5min'</span>)</span><br></pre></td></tr></table></figure><p>我们然后设定时间索引，用key和time_key分组，然后聚合：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">97</span>]: resampled = (df2.set_index(<span class="hljs-string">'time'</span>)</span><br><span class="line">   ....:              .groupby([<span class="hljs-string">'key'</span>, time_key])</span><br><span class="line">   ....:              .sum())</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">98</span>]: resampled</span><br><span class="line">Out[<span class="hljs-number">98</span>]: </span><br><span class="line">                         value</span><br><span class="line">key time                      </span><br><span class="line">a   <span class="hljs-number">2017</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>   <span class="hljs-number">30.0</span></span><br><span class="line">    <span class="hljs-number">2017</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">05</span>:<span class="hljs-number">00</span>  <span class="hljs-number">105.0</span></span><br><span class="line">    <span class="hljs-number">2017</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">10</span>:<span class="hljs-number">00</span>  <span class="hljs-number">180.0</span></span><br><span class="line">b   <span class="hljs-number">2017</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>   <span class="hljs-number">35.0</span></span><br><span class="line">    <span class="hljs-number">2017</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">05</span>:<span class="hljs-number">00</span>  <span class="hljs-number">110.0</span></span><br><span class="line">    <span class="hljs-number">2017</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">10</span>:<span class="hljs-number">00</span>  <span class="hljs-number">185.0</span></span><br><span class="line">c   <span class="hljs-number">2017</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>   <span class="hljs-number">40.0</span></span><br><span class="line">    <span class="hljs-number">2017</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">05</span>:<span class="hljs-number">00</span>  <span class="hljs-number">115.0</span></span><br><span class="line">    <span class="hljs-number">2017</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">10</span>:<span class="hljs-number">00</span>  <span class="hljs-number">190.0</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">99</span>]: resampled.reset_index()</span><br><span class="line">Out[<span class="hljs-number">99</span>]:</span><br><span class="line">key                time  value</span><br><span class="line"><span class="hljs-number">0</span>   a <span class="hljs-number">2017</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>   <span class="hljs-number">30.0</span></span><br><span class="line"><span class="hljs-number">1</span>   a <span class="hljs-number">2017</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">05</span>:<span class="hljs-number">00</span>  <span class="hljs-number">105.0</span></span><br><span class="line"><span class="hljs-number">2</span>   a <span class="hljs-number">2017</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">10</span>:<span class="hljs-number">00</span>  <span class="hljs-number">180.0</span></span><br><span class="line"><span class="hljs-number">3</span>   b <span class="hljs-number">2017</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>   <span class="hljs-number">35.0</span></span><br><span class="line"><span class="hljs-number">4</span>   b <span class="hljs-number">2017</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">05</span>:<span class="hljs-number">00</span>  <span class="hljs-number">110.0</span></span><br><span class="line"><span class="hljs-number">5</span>   b <span class="hljs-number">2017</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">10</span>:<span class="hljs-number">00</span>  <span class="hljs-number">185.0</span></span><br><span class="line"><span class="hljs-number">6</span>   c <span class="hljs-number">2017</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>   <span class="hljs-number">40.0</span></span><br><span class="line"><span class="hljs-number">7</span>   c <span class="hljs-number">2017</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">05</span>:<span class="hljs-number">00</span>  <span class="hljs-number">115.0</span></span><br><span class="line"><span class="hljs-number">8</span>   c <span class="hljs-number">2017</span><span class="hljs-number">-05</span><span class="hljs-number">-20</span> <span class="hljs-number">00</span>:<span class="hljs-number">10</span>:<span class="hljs-number">00</span>  <span class="hljs-number">190.0</span></span><br></pre></td></tr></table></figure><p>使用TimeGrouper的限制是时间必须是Series或DataFrame的索引。</p><h1 id="12-3-链式编程技术"><a href="#12-3-链式编程技术" class="headerlink" title="12.3 链式编程技术"></a>12.3 链式编程技术</h1><p>当对数据集进行一系列变换时，你可能发现创建的多个临时变量其实并没有在分析中用到。看下面的例子：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df = load_data()</span><br><span class="line">df2 = df[df[<span class="hljs-string">'col2'</span>] &lt; <span class="hljs-number">0</span>]</span><br><span class="line">df2[<span class="hljs-string">'col1_demeaned'</span>] = df2[<span class="hljs-string">'col1'</span>] - df2[<span class="hljs-string">'col1'</span>].mean()</span><br><span class="line">result = df2.groupby(<span class="hljs-string">'key'</span>).col1_demeaned.std()</span><br></pre></td></tr></table></figure><p>虽然这里没有使用真实的数据，这个例子却指出了一些新方法。首先，DataFrame.assign方法是一个df[k] = v形式的函数式的列分配方法。它不是就地修改对象，而是返回新的修改过的DataFrame。因此，下面的语句是等价的：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># Usual non-functional way</span></span><br><span class="line">df2 = df.copy()</span><br><span class="line">df2[<span class="hljs-string">'k'</span>] = v</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Functional assign way</span></span><br><span class="line">df2 = df.assign(k=v)</span><br></pre></td></tr></table></figure><p>就地分配可能会比assign快，但是assign可以方便地进行链式编程：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = (df2.assign(col1_demeaned=df2.col1 - df2.col2.mean())</span><br><span class="line">          .groupby(<span class="hljs-string">'key'</span>)</span><br><span class="line">          .col1_demeaned.std())</span><br></pre></td></tr></table></figure><p>我使用外括号，这样便于添加换行符。</p><p>使用链式编程时要注意，你可能会需要涉及临时对象。在前面的例子中，我们不能使用load_data的结果，直到它被赋值给临时变量df。为了这么做，assign和许多其它pandas函数可以接收类似函数的参数，即可调用对象（callable）。为了展示可调用对象，看一个前面例子的片段：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df = load_data()</span><br><span class="line">df2 = df[df[<span class="hljs-string">'col2'</span>] &lt; <span class="hljs-number">0</span>]</span><br></pre></td></tr></table></figure><p>它可以重写为：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df = (load_data()</span><br><span class="line">      [<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">'col2'</span>] &lt; <span class="hljs-number">0</span>])</span><br></pre></td></tr></table></figure><p>这里，load_data的结果没有赋值给某个变量，因此传递到[ ]的函数在这一步被绑定到了对象。</p><p>我们可以把整个过程写为一个单链表达式：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">result = (load_data()</span><br><span class="line">          [<span class="hljs-keyword">lambda</span> x: x.col2 &lt; <span class="hljs-number">0</span>]</span><br><span class="line">          .assign(col1_demeaned=<span class="hljs-keyword">lambda</span> x: x.col1 - x.col1.mean())</span><br><span class="line">          .groupby(<span class="hljs-string">'key'</span>)</span><br><span class="line">          .col1_demeaned.std())</span><br></pre></td></tr></table></figure><p>是否将代码写成这种形式只是习惯而已，将它分开成若干步可以提高可读性。</p><h2 id="管道方法"><a href="#管道方法" class="headerlink" title="管道方法"></a>管道方法</h2><p>你可以用Python内置的pandas函数和方法，用带有可调用对象的链式编程做许多工作。但是，有时你需要使用自己的函数，或是第三方库的函数。这时就要用到管道方法。</p><p>看下面的函数调用：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = f(df, arg1=v1)</span><br><span class="line">b = g(a, v2, arg3=v3)</span><br><span class="line">c = h(b, arg4=v4)</span><br></pre></td></tr></table></figure><p>当使用接收、返回Series或DataFrame对象的函数式，你可以调用pipe将其重写：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = (df.pipe(f, arg1=v1)</span><br><span class="line">          .pipe(g, v2, arg3=v3)</span><br><span class="line">          .pipe(h, arg4=v4))</span><br></pre></td></tr></table></figure><p>f(df)和df.pipe(f)是等价的，但是pipe使得链式声明更容易。</p><p>pipe的另一个有用的地方是提炼操作为可复用的函数。看一个从列减去分组方法的例子：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g = df.groupby([<span class="hljs-string">'key1'</span>, <span class="hljs-string">'key2'</span>])</span><br><span class="line">df[<span class="hljs-string">'col1'</span>] = df[<span class="hljs-string">'col1'</span>] - g.transform(<span class="hljs-string">'mean'</span>)</span><br></pre></td></tr></table></figure><p>假设你想转换多列，并修改分组的键。另外，你想用链式编程做这个转换。下面就是一个方法：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">group_demean</span><span class="hljs-params">(df, by, cols)</span>:</span></span><br><span class="line">    result = df.copy()</span><br><span class="line">    g = df.groupby(by)</span><br><span class="line">    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> cols:</span><br><span class="line">        result[c] = df[c] - g[c].transform(<span class="hljs-string">'mean'</span>)</span><br><span class="line">    <span class="hljs-keyword">return</span> result</span><br></pre></td></tr></table></figure><p>然后可以写为：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = (df[df.col1 &lt; <span class="hljs-number">0</span>]</span><br><span class="line">          .pipe(group_demean, [<span class="hljs-string">'key1'</span>, <span class="hljs-string">'key2'</span>], [<span class="hljs-string">'col1'</span>]))</span><br></pre></td></tr></table></figure><h1 id="12-4-总结"><a href="#12-4-总结" class="headerlink" title="12.4 总结"></a>12.4 总结</h1><p>和其它许多开源项目一样，pandas仍然在不断的变化和进步中。和本书中其它地方一样，这里的重点是放在接下来几年不会发生什么改变且稳定的功能。</p><p>为了深入学习pandas的知识，我建议你学习官方文档，并阅读开发团队发布的文档更新。我们还邀请你加入pandas的开发工作：修改bug、创建新功能、完善文档。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载自&lt;a href=&quot;https://www.jianshu.com/p/9d093ebcc5d8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;../《利用Python进行数据分析·第2版》第1章%20准备工作&quot;&gt;第1章 准备工作&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第2章%20Python语法基础，IPython和Jupyter%20Notebooks&quot;&gt;第2章 Python语法基础，IPython和Jupyter Notebooks&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第3章%20Python的数据结构、函数和文件&quot;&gt;第3章 Python的数据结构、函数和文件&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第4章%20NumPy基础：数组和矢量计算&quot;&gt;第4章 NumPy基础：数组和矢量计算&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第5章%20pandas入门&quot;&gt;第5章 pandas入门&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第6章%20数据加载、存储与文件格式&quot;&gt;第6章 数据加载、存储与文件格式&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第7章%20数据清洗和准备&quot;&gt;第7章 数据清洗和准备&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第8章%20数据规整：聚合、合并和重塑&quot;&gt;第8章 数据规整：聚合、合并和重塑&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第9章%20绘图和可视化&quot;&gt;第9章 绘图和可视化&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第10章%20数据聚合与分组运算&quot;&gt;第10章 数据聚合与分组运算&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第11章%20时间序列&quot;&gt;第11章 时间序列&lt;/a&gt;&lt;br&gt;第12章 pandas高级应用&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第13章%20Python建模库介绍&quot;&gt;第13章 Python建模库介绍&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第14章%20数据分析案例&quot;&gt;第14章 数据分析案例&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》附录A%20NumPy高级应用&quot;&gt;附录A NumPy高级应用&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》附录B%20更多关于IPython的内容（完）&quot;&gt;附录B 更多关于IPython的内容（完）&lt;/a&gt;      &lt;/p&gt;
    
    </summary>
    
    
      <category term="数据分析" scheme="https://glanhoo.coding.me/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="https://glanhoo.coding.me/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="pandas" scheme="https://glanhoo.coding.me/tags/pandas/"/>
    
      <category term="python" scheme="https://glanhoo.coding.me/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>《利用Python进行数据分析·第2版》第11章 时间序列</title>
    <link href="https://glanhoo.coding.me/2019/11/05/%E3%80%8A%E5%88%A9%E7%94%A8Python%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%C2%B7%E7%AC%AC2%E7%89%88%E3%80%8B%E7%AC%AC11%E7%AB%A0%20%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97/"/>
    <id>https://glanhoo.coding.me/2019/11/05/%E3%80%8A%E5%88%A9%E7%94%A8Python%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%C2%B7%E7%AC%AC2%E7%89%88%E3%80%8B%E7%AC%AC11%E7%AB%A0%20%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97/</id>
    <published>2019-11-05T02:00:38.000Z</published>
    <updated>2019-12-11T02:21:24.206Z</updated>
    
    <content type="html"><![CDATA[<p>转载自<a href="https://www.jianshu.com/p/29ece4592178" target="_blank" rel="noopener">简书</a></p><p><a href="../《利用Python进行数据分析·第2版》第1章%20准备工作">第1章 准备工作</a><br> <a href="../《利用Python进行数据分析·第2版》第2章%20Python语法基础，IPython和Jupyter%20Notebooks">第2章 Python语法基础，IPython和Jupyter Notebooks</a><br> <a href="../《利用Python进行数据分析·第2版》第3章%20Python的数据结构、函数和文件">第3章 Python的数据结构、函数和文件</a><br> <a href="../《利用Python进行数据分析·第2版》第4章%20NumPy基础：数组和矢量计算">第4章 NumPy基础：数组和矢量计算</a><br> <a href="../《利用Python进行数据分析·第2版》第5章%20pandas入门">第5章 pandas入门</a><br> <a href="../《利用Python进行数据分析·第2版》第6章%20数据加载、存储与文件格式">第6章 数据加载、存储与文件格式</a><br> <a href="../《利用Python进行数据分析·第2版》第7章%20数据清洗和准备">第7章 数据清洗和准备</a><br> <a href="../《利用Python进行数据分析·第2版》第8章%20数据规整：聚合、合并和重塑">第8章 数据规整：聚合、合并和重塑</a><br> <a href="../《利用Python进行数据分析·第2版》第9章%20绘图和可视化">第9章 绘图和可视化</a><br> <a href="../《利用Python进行数据分析·第2版》第10章%20数据聚合与分组运算">第10章 数据聚合与分组运算</a><br>第11章 时间序列<br> <a href="../《利用Python进行数据分析·第2版》第12章%20pandas高级应用">第12章 pandas高级应用</a><br> <a href="../《利用Python进行数据分析·第2版》第13章%20Python建模库介绍">第13章 Python建模库介绍</a><br> <a href="../《利用Python进行数据分析·第2版》第14章%20数据分析案例">第14章 数据分析案例</a><br> <a href="../《利用Python进行数据分析·第2版》附录A%20NumPy高级应用">附录A NumPy高级应用</a><br> <a href="../《利用Python进行数据分析·第2版》附录B%20更多关于IPython的内容（完）">附录B 更多关于IPython的内容（完）</a>      </p><a id="more"></a><hr><p>时间序列（time series）数据是一种重要的结构化数据形式，应用于多个领域，包括金融学、经济学、生态学、神经科学、物理学等。在多个时间点观察或测量到的任何事物都可以形成一段时间序列。很多时间序列是固定频率的，也就是说，数据点是根据某种规律定期出现的（比如每15秒、每5分钟、每月出现一次）。时间序列也可以是不定期的，没有固定的时间单位或单位之间的偏移量。时间序列数据的意义取决于具体的应用场景，主要有以下几种：</p><ul><li>时间戳（timestamp），特定的时刻。</li><li>固定时期（period），如2007年1月或2010年全年。</li><li>时间间隔（interval），由起始和结束时间戳表示。时期（period）可以被看做间隔（interval）的特例。</li><li>实验或过程时间，每个时间点都是相对于特定起始时间的一个度量。例如，从放入烤箱时起，每秒钟饼干的直径。</li></ul><p>本章主要讲解前3种时间序列。许多技术都可用于处理实验型时间序列，其索引可能是一个整数或浮点数（表示从实验开始算起已经过去的时间）。最简单也最常见的时间序列都是用时间戳进行索引的。</p><blockquote><p>提示：pandas也支持基于timedeltas的指数，它可以有效代表实验或经过的时间。这本书不涉及timedelta指数，但你可以学习pandas的文档（<a href="http://pandas.pydata.org/）。" target="_blank" rel="noopener">http://pandas.pydata.org/）。</a></p></blockquote><p>pandas提供了许多内置的时间序列处理工具和数据算法。因此，你可以高效处理非常大的时间序列，轻松地进行切片/切块、聚合、对定期/不定期的时间序列进行重采样等。有些工具特别适合金融和经济应用，你当然也可以用它们来分析服务器日志数据。</p><h1 id="11-1-日期和时间数据类型及工具"><a href="#11-1-日期和时间数据类型及工具" class="headerlink" title="11.1 日期和时间数据类型及工具"></a>11.1 日期和时间数据类型及工具</h1><p>Python标准库包含用于日期（date）和时间（time）数据的数据类型，而且还有日历方面的功能。我们主要会用到datetime、time以及calendar模块。datetime.datetime（也可以简写为datetime）是用得最多的数据类型：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">10</span>]: <span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">11</span>]: now = datetime.now()</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">12</span>]: now</span><br><span class="line">Out[<span class="hljs-number">12</span>]: datetime.datetime(<span class="hljs-number">2017</span>, <span class="hljs-number">9</span>, <span class="hljs-number">25</span>, <span class="hljs-number">14</span>, <span class="hljs-number">5</span>, <span class="hljs-number">52</span>, <span class="hljs-number">72973</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">13</span>]: now.year, now.month, now.day</span><br><span class="line">Out[<span class="hljs-number">13</span>]: (<span class="hljs-number">2017</span>, <span class="hljs-number">9</span>, <span class="hljs-number">25</span>)</span><br></pre></td></tr></table></figure><p>datetime以毫秒形式存储日期和时间。timedelta表示两个datetime对象之间的时间差：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">14</span>]: delta = datetime(<span class="hljs-number">2011</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>) - datetime(<span class="hljs-number">2008</span>, <span class="hljs-number">6</span>, <span class="hljs-number">24</span>, <span class="hljs-number">8</span>, <span class="hljs-number">15</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">15</span>]: delta</span><br><span class="line">Out[<span class="hljs-number">15</span>]: datetime.timedelta(<span class="hljs-number">926</span>, <span class="hljs-number">56700</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">16</span>]: delta.days</span><br><span class="line">Out[<span class="hljs-number">16</span>]: <span class="hljs-number">926</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">17</span>]: delta.seconds</span><br><span class="line">Out[<span class="hljs-number">17</span>]: <span class="hljs-number">56700</span></span><br></pre></td></tr></table></figure><p>可以给datetime对象加上（或减去）一个或多个timedelta，这样会产生一个新对象：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">18</span>]: <span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> timedelta</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">19</span>]: start = datetime(<span class="hljs-number">2011</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">20</span>]: start + timedelta(<span class="hljs-number">12</span>)</span><br><span class="line">Out[<span class="hljs-number">20</span>]: datetime.datetime(<span class="hljs-number">2011</span>, <span class="hljs-number">1</span>, <span class="hljs-number">19</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">21</span>]: start - <span class="hljs-number">2</span> * timedelta(<span class="hljs-number">12</span>)</span><br><span class="line">Out[<span class="hljs-number">21</span>]: datetime.datetime(<span class="hljs-number">2010</span>, <span class="hljs-number">12</span>, <span class="hljs-number">14</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)</span><br></pre></td></tr></table></figure><p>datetime模块中的数据类型参见表10-1。虽然本章主要讲的是pandas数据类型和高级时间序列处理，但你肯定会在Python的其他地方遇到有关datetime的数据类型。</p><p>表11-1 datetime模块中的数据类型</p><p><img src="/images/blog/7178691-4af261a305a70aeb.webp" alt="img"></p><p>tzinfo 存储时区信息的基本类型</p><h2 id="字符串和datetime的相互转换"><a href="#字符串和datetime的相互转换" class="headerlink" title="字符串和datetime的相互转换"></a>字符串和datetime的相互转换</h2><p>利用str或strftime方法（传入一个格式化字符串），datetime对象和pandas的Timestamp对象（稍后就会介绍）可以被格式化为字符串：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">22</span>]: stamp = datetime(<span class="hljs-number">2011</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">23</span>]: str(stamp)</span><br><span class="line">Out[<span class="hljs-number">23</span>]: <span class="hljs-string">'2011-01-03 00:00:00'</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">24</span>]: stamp.strftime(<span class="hljs-string">'%Y-%m-%d'</span>)</span><br><span class="line">Out[<span class="hljs-number">24</span>]: <span class="hljs-string">'2011-01-03'</span></span><br></pre></td></tr></table></figure><p>表11-2列出了全部的格式化编码。</p><p>表11-2 datetime格式定义（兼容ISO C89）</p><p><img src="/images/blog/7178691-50c751823754df58.webp" alt="img"></p><p><img src="/images/blog/7178691-de0181e1f6b45eaf.webp" alt="img"></p><p>datetime.strptime可以用这些格式化编码将字符串转换为日期：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">25</span>]: value = <span class="hljs-string">'2011-01-03'</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">26</span>]: datetime.strptime(value, <span class="hljs-string">'%Y-%m-%d'</span>)</span><br><span class="line">Out[<span class="hljs-number">26</span>]: datetime.datetime(<span class="hljs-number">2011</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">27</span>]: datestrs = [<span class="hljs-string">'7/6/2011'</span>, <span class="hljs-string">'8/6/2011'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">28</span>]: [datetime.strptime(x, <span class="hljs-string">'%m/%d/%Y'</span>) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> datestrs]</span><br><span class="line">Out[<span class="hljs-number">28</span>]: </span><br><span class="line">[datetime.datetime(<span class="hljs-number">2011</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>),</span><br><span class="line"> datetime.datetime(<span class="hljs-number">2011</span>, <span class="hljs-number">8</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)]</span><br></pre></td></tr></table></figure><p>datetime.strptime是通过已知格式进行日期解析的最佳方式。但是每次都要编写格式定义是很麻烦的事情，尤其是对于一些常见的日期格式。这种情况下，你可以用dateutil这个第三方包中的parser.parse方法（pandas中已经自动安装好了）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">29</span>]: <span class="hljs-keyword">from</span> dateutil.parser <span class="hljs-keyword">import</span> parse</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">30</span>]: parse(<span class="hljs-string">'2011-01-03'</span>)</span><br><span class="line">Out[<span class="hljs-number">30</span>]: datetime.datetime(<span class="hljs-number">2011</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)</span><br></pre></td></tr></table></figure><p>dateutil可以解析几乎所有人类能够理解的日期表示形式：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">31</span>]: parse(<span class="hljs-string">'Jan 31, 1997 10:45 PM'</span>)</span><br><span class="line">Out[<span class="hljs-number">31</span>]: datetime.datetime(<span class="hljs-number">1997</span>, <span class="hljs-number">1</span>, <span class="hljs-number">31</span>, <span class="hljs-number">22</span>, <span class="hljs-number">45</span>)</span><br></pre></td></tr></table></figure><p>在国际通用的格式中，日出现在月的前面很普遍，传入dayfirst=True即可解决这个问题：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">32</span>]: parse(<span class="hljs-string">'6/12/2011'</span>, dayfirst=<span class="hljs-literal">True</span>)</span><br><span class="line">Out[<span class="hljs-number">32</span>]: datetime.datetime(<span class="hljs-number">2011</span>, <span class="hljs-number">12</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)</span><br></pre></td></tr></table></figure><p>pandas通常是用于处理成组日期的，不管这些日期是DataFrame的轴索引还是列。to_datetime方法可以解析多种不同的日期表示形式。对标准日期格式（如ISO8601）的解析非常快：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">33</span>]: datestrs = [<span class="hljs-string">'2011-07-06 12:00:00'</span>, <span class="hljs-string">'2011-08-06 00:00:00'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">34</span>]: pd.to_datetime(datestrs)</span><br><span class="line">Out[<span class="hljs-number">34</span>]: DatetimeIndex([<span class="hljs-string">'2011-07-06 12:00:00'</span>, <span class="hljs-string">'2011-08-06 00:00:00'</span>], dtype=<span class="hljs-string">'dat</span></span><br><span class="line"><span class="hljs-string">etime64[ns]'</span>, freq=<span class="hljs-literal">None</span>)</span><br></pre></td></tr></table></figure><p>它还可以处理缺失值（None、空字符串等）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">35</span>]: idx = pd.to_datetime(datestrs + [<span class="hljs-literal">None</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">36</span>]: idx</span><br><span class="line">Out[<span class="hljs-number">36</span>]: DatetimeIndex([<span class="hljs-string">'2011-07-06 12:00:00'</span>, <span class="hljs-string">'2011-08-06 00:00:00'</span>, <span class="hljs-string">'NaT'</span>], dty</span><br><span class="line">pe=<span class="hljs-string">'datetime64[ns]'</span>, freq=<span class="hljs-literal">None</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">37</span>]: idx[<span class="hljs-number">2</span>]</span><br><span class="line">Out[<span class="hljs-number">37</span>]: NaT</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">38</span>]: pd.isnull(idx)</span><br><span class="line">Out[<span class="hljs-number">38</span>]: array([<span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>,  <span class="hljs-literal">True</span>], dtype=bool)</span><br></pre></td></tr></table></figure><p>NaT（Not a Time）是pandas中时间戳数据的null值。</p><blockquote><p>注意：dateutil.parser是一个实用但不完美的工具。比如说，它会把一些原本不是日期的字符串认作是日期（比如”42”会被解析为2042年的今天）。</p></blockquote><p>datetime对象还有一些特定于当前环境（位于不同国家或使用不同语言的系统）的格式化选项。例如，德语或法语系统所用的月份简写就与英语系统所用的不同。表11-3进行了总结。</p><p>表11-3 特定于当前环境的日期格式</p><p><img src="/images/blog/7178691-cf0119398273e2b0.webp" alt="img"></p><h1 id="11-2-时间序列基础"><a href="#11-2-时间序列基础" class="headerlink" title="11.2 时间序列基础"></a>11.2 时间序列基础</h1><p>pandas最基本的时间序列类型就是以时间戳（通常以Python字符串或datatime对象表示）为索引的Series：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">39</span>]: <span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">40</span>]: dates = [datetime(<span class="hljs-number">2011</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>), datetime(<span class="hljs-number">2011</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>),</span><br><span class="line">   ....:          datetime(<span class="hljs-number">2011</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>), datetime(<span class="hljs-number">2011</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>),</span><br><span class="line">   ....:          datetime(<span class="hljs-number">2011</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>), datetime(<span class="hljs-number">2011</span>, <span class="hljs-number">1</span>, <span class="hljs-number">12</span>)]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">41</span>]: ts = pd.Series(np.random.randn(<span class="hljs-number">6</span>), index=dates)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">42</span>]: ts</span><br><span class="line">Out[<span class="hljs-number">42</span>]: </span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-01</span><span class="hljs-number">-02</span>   <span class="hljs-number">-0.204708</span></span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-01</span><span class="hljs-number">-05</span>    <span class="hljs-number">0.478943</span></span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-01</span><span class="hljs-number">-07</span>   <span class="hljs-number">-0.519439</span></span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-01</span><span class="hljs-number">-08</span>   <span class="hljs-number">-0.555730</span></span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-01</span><span class="hljs-number">-10</span>    <span class="hljs-number">1.965781</span></span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-01</span><span class="hljs-number">-12</span>    <span class="hljs-number">1.393406</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><p>这些datetime对象实际上是被放在一个DatetimeIndex中的：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">43</span>]: ts.index</span><br><span class="line">Out[<span class="hljs-number">43</span>]: </span><br><span class="line">DatetimeIndex([<span class="hljs-string">'2011-01-02'</span>, <span class="hljs-string">'2011-01-05'</span>, <span class="hljs-string">'2011-01-07'</span>, <span class="hljs-string">'2011-01-08'</span>,</span><br><span class="line">               <span class="hljs-string">'2011-01-10'</span>, <span class="hljs-string">'2011-01-12'</span>],</span><br><span class="line">              dtype=<span class="hljs-string">'datetime64[ns]'</span>, freq=<span class="hljs-literal">None</span>)</span><br></pre></td></tr></table></figure><p>跟其他Series一样，不同索引的时间序列之间的算术运算会自动按日期对齐：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">44</span>]: ts + ts[::<span class="hljs-number">2</span>]</span><br><span class="line">Out[<span class="hljs-number">44</span>]: </span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-01</span><span class="hljs-number">-02</span>   <span class="hljs-number">-0.409415</span></span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-01</span><span class="hljs-number">-05</span>         NaN</span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-01</span><span class="hljs-number">-07</span>   <span class="hljs-number">-1.038877</span></span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-01</span><span class="hljs-number">-08</span>         NaN</span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-01</span><span class="hljs-number">-10</span>    <span class="hljs-number">3.931561</span></span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-01</span><span class="hljs-number">-12</span>         NaN</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><p>ts[::2] 是每隔两个取一个。</p><p>pandas用NumPy的datetime64数据类型以纳秒形式存储时间戳：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">45</span>]: ts.index.dtype</span><br><span class="line">Out[<span class="hljs-number">45</span>]: dtype(<span class="hljs-string">'&lt;M8[ns]'</span>)</span><br></pre></td></tr></table></figure><p>DatetimeIndex中的各个标量值是pandas的Timestamp对象：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">46</span>]: stamp = ts.index[<span class="hljs-number">0</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">47</span>]: stamp</span><br><span class="line">Out[<span class="hljs-number">47</span>]: Timestamp(<span class="hljs-string">'2011-01-02 00:00:00'</span>)</span><br></pre></td></tr></table></figure><p>只要有需要，TimeStamp可以随时自动转换为datetime对象。此外，它还可以存储频率信息（如果有的话），且知道如何执行时区转换以及其他操作。稍后将对此进行详细讲解。</p><h2 id="索引、选取、子集构造"><a href="#索引、选取、子集构造" class="headerlink" title="索引、选取、子集构造"></a>索引、选取、子集构造</h2><p>当你根据标签索引选取数据时，时间序列和其它的pandas.Series很像：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">48</span>]: stamp = ts.index[<span class="hljs-number">2</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">49</span>]: ts[stamp]</span><br><span class="line">Out[<span class="hljs-number">49</span>]: <span class="hljs-number">-0.51943871505673811</span></span><br></pre></td></tr></table></figure><p>还有一种更为方便的用法：传入一个可以被解释为日期的字符串：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">50</span>]: ts[<span class="hljs-string">'1/10/2011'</span>]</span><br><span class="line">Out[<span class="hljs-number">50</span>]: <span class="hljs-number">1.9657805725027142</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">51</span>]: ts[<span class="hljs-string">'20110110'</span>]</span><br><span class="line">Out[<span class="hljs-number">51</span>]: <span class="hljs-number">1.9657805725027142</span></span><br></pre></td></tr></table></figure><p>对于较长的时间序列，只需传入“年”或“年月”即可轻松选取数据的切片：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">52</span>]: longer_ts = pd.Series(np.random.randn(<span class="hljs-number">1000</span>),</span><br><span class="line">   ....:                       index=pd.date_range(<span class="hljs-string">'1/1/2000'</span>, periods=<span class="hljs-number">1000</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">53</span>]: longer_ts</span><br><span class="line">Out[<span class="hljs-number">53</span>]: </span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span>    <span class="hljs-number">0.092908</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-02</span>    <span class="hljs-number">0.281746</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-03</span>    <span class="hljs-number">0.769023</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-04</span>    <span class="hljs-number">1.246435</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-05</span>    <span class="hljs-number">1.007189</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-06</span>   <span class="hljs-number">-1.296221</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-07</span>    <span class="hljs-number">0.274992</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-08</span>    <span class="hljs-number">0.228913</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-09</span>    <span class="hljs-number">1.352917</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-10</span>    <span class="hljs-number">0.886429</span></span><br><span class="line">                ...   </span><br><span class="line"><span class="hljs-number">2002</span><span class="hljs-number">-09</span><span class="hljs-number">-17</span>   <span class="hljs-number">-0.139298</span></span><br><span class="line"><span class="hljs-number">2002</span><span class="hljs-number">-09</span><span class="hljs-number">-18</span>   <span class="hljs-number">-1.159926</span></span><br><span class="line"><span class="hljs-number">2002</span><span class="hljs-number">-09</span><span class="hljs-number">-19</span>    <span class="hljs-number">0.618965</span></span><br><span class="line"><span class="hljs-number">2002</span><span class="hljs-number">-09</span><span class="hljs-number">-20</span>    <span class="hljs-number">1.373890</span></span><br><span class="line"><span class="hljs-number">2002</span><span class="hljs-number">-09</span><span class="hljs-number">-21</span>   <span class="hljs-number">-0.983505</span></span><br><span class="line"><span class="hljs-number">2002</span><span class="hljs-number">-09</span><span class="hljs-number">-22</span>    <span class="hljs-number">0.930944</span></span><br><span class="line"><span class="hljs-number">2002</span><span class="hljs-number">-09</span><span class="hljs-number">-23</span>   <span class="hljs-number">-0.811676</span></span><br><span class="line"><span class="hljs-number">2002</span><span class="hljs-number">-09</span><span class="hljs-number">-24</span>   <span class="hljs-number">-1.830156</span></span><br><span class="line"><span class="hljs-number">2002</span><span class="hljs-number">-09</span><span class="hljs-number">-25</span>   <span class="hljs-number">-0.138730</span></span><br><span class="line"><span class="hljs-number">2002</span><span class="hljs-number">-09</span><span class="hljs-number">-26</span>    <span class="hljs-number">0.334088</span></span><br><span class="line">Freq: D, Length: <span class="hljs-number">1000</span>, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">54</span>]: longer_ts[<span class="hljs-string">'2001'</span>]</span><br><span class="line">Out[<span class="hljs-number">54</span>]: </span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span>    <span class="hljs-number">1.599534</span></span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-01</span><span class="hljs-number">-02</span>    <span class="hljs-number">0.474071</span></span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-01</span><span class="hljs-number">-03</span>    <span class="hljs-number">0.151326</span></span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-01</span><span class="hljs-number">-04</span>   <span class="hljs-number">-0.542173</span></span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-01</span><span class="hljs-number">-05</span>   <span class="hljs-number">-0.475496</span></span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-01</span><span class="hljs-number">-06</span>    <span class="hljs-number">0.106403</span></span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-01</span><span class="hljs-number">-07</span>   <span class="hljs-number">-1.308228</span></span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-01</span><span class="hljs-number">-08</span>    <span class="hljs-number">2.173185</span></span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-01</span><span class="hljs-number">-09</span>    <span class="hljs-number">0.564561</span></span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-01</span><span class="hljs-number">-10</span>   <span class="hljs-number">-0.190481</span></span><br><span class="line">                ...   </span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-12</span><span class="hljs-number">-22</span>    <span class="hljs-number">0.000369</span></span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-12</span><span class="hljs-number">-23</span>    <span class="hljs-number">0.900885</span></span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-12</span><span class="hljs-number">-24</span>   <span class="hljs-number">-0.454869</span></span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-12</span><span class="hljs-number">-25</span>   <span class="hljs-number">-0.864547</span></span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-12</span><span class="hljs-number">-26</span>    <span class="hljs-number">1.129120</span></span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-12</span><span class="hljs-number">-27</span>    <span class="hljs-number">0.057874</span></span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-12</span><span class="hljs-number">-28</span>   <span class="hljs-number">-0.433739</span></span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-12</span><span class="hljs-number">-29</span>    <span class="hljs-number">0.092698</span></span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-12</span><span class="hljs-number">-30</span>   <span class="hljs-number">-1.397820</span></span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-12</span><span class="hljs-number">-31</span>    <span class="hljs-number">1.457823</span></span><br><span class="line">Freq: D, Length: <span class="hljs-number">365</span>, dtype: float64</span><br></pre></td></tr></table></figure><p>这里，字符串“2001”被解释成年，并根据它选取时间区间。指定月也同样奏效：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">55</span>]: longer_ts[<span class="hljs-string">'2001-05'</span>]</span><br><span class="line">Out[<span class="hljs-number">55</span>]: </span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-05</span><span class="hljs-number">-01</span>   <span class="hljs-number">-0.622547</span></span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-05</span><span class="hljs-number">-02</span>    <span class="hljs-number">0.936289</span></span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-05</span><span class="hljs-number">-03</span>    <span class="hljs-number">0.750018</span></span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-05</span><span class="hljs-number">-04</span>   <span class="hljs-number">-0.056715</span></span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-05</span><span class="hljs-number">-05</span>    <span class="hljs-number">2.300675</span></span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-05</span><span class="hljs-number">-06</span>    <span class="hljs-number">0.569497</span></span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-05</span><span class="hljs-number">-07</span>    <span class="hljs-number">1.489410</span></span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-05</span><span class="hljs-number">-08</span>    <span class="hljs-number">1.264250</span></span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-05</span><span class="hljs-number">-09</span>   <span class="hljs-number">-0.761837</span></span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-05</span><span class="hljs-number">-10</span>   <span class="hljs-number">-0.331617</span></span><br><span class="line">                ...   </span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-05</span><span class="hljs-number">-22</span>    <span class="hljs-number">0.503699</span></span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-05</span><span class="hljs-number">-23</span>   <span class="hljs-number">-1.387874</span></span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-05</span><span class="hljs-number">-24</span>    <span class="hljs-number">0.204851</span></span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-05</span><span class="hljs-number">-25</span>    <span class="hljs-number">0.603705</span></span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-05</span><span class="hljs-number">-26</span>    <span class="hljs-number">0.545680</span></span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-05</span><span class="hljs-number">-27</span>    <span class="hljs-number">0.235477</span></span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-05</span><span class="hljs-number">-28</span>    <span class="hljs-number">0.111835</span></span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-05</span><span class="hljs-number">-29</span>   <span class="hljs-number">-1.251504</span></span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-05</span><span class="hljs-number">-30</span>   <span class="hljs-number">-2.949343</span></span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-05</span><span class="hljs-number">-31</span>    <span class="hljs-number">0.634634</span></span><br><span class="line">Freq: D, Length: <span class="hljs-number">31</span>, dtype: float64</span><br></pre></td></tr></table></figure><p>datetime对象也可以进行切片：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">56</span>]: ts[datetime(<span class="hljs-number">2011</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>):]</span><br><span class="line">Out[<span class="hljs-number">56</span>]: </span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-01</span><span class="hljs-number">-07</span>   <span class="hljs-number">-0.519439</span></span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-01</span><span class="hljs-number">-08</span>   <span class="hljs-number">-0.555730</span></span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-01</span><span class="hljs-number">-10</span>    <span class="hljs-number">1.965781</span></span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-01</span><span class="hljs-number">-12</span>    <span class="hljs-number">1.393406</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><p>由于大部分时间序列数据都是按照时间先后排序的，因此你也可以用不存在于该时间序列中的时间戳对其进行切片（即范围查询）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">57</span>]: ts</span><br><span class="line">Out[<span class="hljs-number">57</span>]: </span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-01</span><span class="hljs-number">-02</span>   <span class="hljs-number">-0.204708</span></span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-01</span><span class="hljs-number">-05</span>    <span class="hljs-number">0.478943</span></span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-01</span><span class="hljs-number">-07</span>   <span class="hljs-number">-0.519439</span></span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-01</span><span class="hljs-number">-08</span>   <span class="hljs-number">-0.555730</span></span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-01</span><span class="hljs-number">-10</span>    <span class="hljs-number">1.965781</span></span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-01</span><span class="hljs-number">-12</span>    <span class="hljs-number">1.393406</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">58</span>]: ts[<span class="hljs-string">'1/6/2011'</span>:<span class="hljs-string">'1/11/2011'</span>]</span><br><span class="line">Out[<span class="hljs-number">58</span>]: </span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-01</span><span class="hljs-number">-07</span>   <span class="hljs-number">-0.519439</span></span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-01</span><span class="hljs-number">-08</span>   <span class="hljs-number">-0.555730</span></span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-01</span><span class="hljs-number">-10</span>    <span class="hljs-number">1.965781</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><p>跟之前一样，你可以传入字符串日期、datetime或Timestamp。注意，这样切片所产生的是原时间序列的视图，跟NumPy数组的切片运算是一样的。</p><p>这意味着，没有数据被复制，对切片进行修改会反映到原始数据上。</p><p>此外，还有一个等价的实例方法也可以截取两个日期之间TimeSeries：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">59</span>]: ts.truncate(after=<span class="hljs-string">'1/9/2011'</span>)</span><br><span class="line">Out[<span class="hljs-number">59</span>]: </span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-01</span><span class="hljs-number">-02</span>   <span class="hljs-number">-0.204708</span></span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-01</span><span class="hljs-number">-05</span>    <span class="hljs-number">0.478943</span></span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-01</span><span class="hljs-number">-07</span>   <span class="hljs-number">-0.519439</span></span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-01</span><span class="hljs-number">-08</span>   <span class="hljs-number">-0.555730</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><p>面这些操作对DataFrame也有效。例如，对DataFrame的行进行索引：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">60</span>]: dates = pd.date_range(<span class="hljs-string">'1/1/2000'</span>, periods=<span class="hljs-number">100</span>, freq=<span class="hljs-string">'W-WED'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">61</span>]: long_df = pd.DataFrame(np.random.randn(<span class="hljs-number">100</span>, <span class="hljs-number">4</span>),</span><br><span class="line">   ....:                        index=dates,</span><br><span class="line">   ....:                        columns=[<span class="hljs-string">'Colorado'</span>, <span class="hljs-string">'Texas'</span>,</span><br><span class="line">   ....:                                 <span class="hljs-string">'New York'</span>, <span class="hljs-string">'Ohio'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">62</span>]: long_df.loc[<span class="hljs-string">'5-2001'</span>]</span><br><span class="line">Out[<span class="hljs-number">62</span>]: </span><br><span class="line">            Colorado     Texas  New York      Ohio</span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-05</span><span class="hljs-number">-02</span> <span class="hljs-number">-0.006045</span>  <span class="hljs-number">0.490094</span> <span class="hljs-number">-0.277186</span> <span class="hljs-number">-0.707213</span></span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-05</span><span class="hljs-number">-09</span> <span class="hljs-number">-0.560107</span>  <span class="hljs-number">2.735527</span>  <span class="hljs-number">0.927335</span>  <span class="hljs-number">1.513906</span></span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-05</span><span class="hljs-number">-16</span>  <span class="hljs-number">0.538600</span>  <span class="hljs-number">1.273768</span>  <span class="hljs-number">0.667876</span> <span class="hljs-number">-0.969206</span></span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-05</span><span class="hljs-number">-23</span>  <span class="hljs-number">1.676091</span> <span class="hljs-number">-0.817649</span>  <span class="hljs-number">0.050188</span>  <span class="hljs-number">1.951312</span></span><br><span class="line"><span class="hljs-number">2001</span><span class="hljs-number">-05</span><span class="hljs-number">-30</span>  <span class="hljs-number">3.260383</span>  <span class="hljs-number">0.963301</span>  <span class="hljs-number">1.201206</span> <span class="hljs-number">-1.852001</span></span><br></pre></td></tr></table></figure><h2 id="带有重复索引的时间序列"><a href="#带有重复索引的时间序列" class="headerlink" title="带有重复索引的时间序列"></a>带有重复索引的时间序列</h2><p>在某些应用场景中，可能会存在多个观测数据落在同一个时间点上的情况。下面就是一个例子：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">63</span>]: dates = pd.DatetimeIndex([<span class="hljs-string">'1/1/2000'</span>, <span class="hljs-string">'1/2/2000'</span>, <span class="hljs-string">'1/2/2000'</span>,</span><br><span class="line">   ....:                           <span class="hljs-string">'1/2/2000'</span>, <span class="hljs-string">'1/3/2000'</span>])</span><br><span class="line">In [<span class="hljs-number">64</span>]: dup_ts = pd.Series(np.arange(<span class="hljs-number">5</span>), index=dates)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">65</span>]: dup_ts</span><br><span class="line">Out[<span class="hljs-number">65</span>]: </span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span>    <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-02</span>    <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-02</span>    <span class="hljs-number">2</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-02</span>    <span class="hljs-number">3</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-03</span>    <span class="hljs-number">4</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><p>通过检查索引的is_unique属性，我们就可以知道它是不是唯一的：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">66</span>]: dup_ts.index.is_unique</span><br><span class="line">Out[<span class="hljs-number">66</span>]: <span class="hljs-literal">False</span></span><br></pre></td></tr></table></figure><p>对这个时间序列进行索引，要么产生标量值，要么产生切片，具体要看所选的时间点是否重复：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">67</span>]: dup_ts[<span class="hljs-string">'1/3/2000'</span>]  <span class="hljs-comment"># not duplicated</span></span><br><span class="line">Out[<span class="hljs-number">67</span>]: <span class="hljs-number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">68</span>]: dup_ts[<span class="hljs-string">'1/2/2000'</span>]  <span class="hljs-comment"># duplicated</span></span><br><span class="line">Out[<span class="hljs-number">68</span>]: </span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-02</span>    <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-02</span>    <span class="hljs-number">2</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-02</span>    <span class="hljs-number">3</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><p>假设你想要对具有非唯一时间戳的数据进行聚合。一个办法是使用groupby，并传入level=0：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">69</span>]: grouped = dup_ts.groupby(level=<span class="hljs-number">0</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">70</span>]: grouped.mean()</span><br><span class="line">Out[<span class="hljs-number">70</span>]: </span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span>    <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-02</span>    <span class="hljs-number">2</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-03</span>    <span class="hljs-number">4</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">71</span>]: grouped.count()</span><br><span class="line">Out[<span class="hljs-number">71</span>]: </span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span>    <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-02</span>    <span class="hljs-number">3</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-03</span>    <span class="hljs-number">1</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><h1 id="11-3-日期的范围、频率以及移动"><a href="#11-3-日期的范围、频率以及移动" class="headerlink" title="11.3 日期的范围、频率以及移动"></a>11.3 日期的范围、频率以及移动</h1><p>pandas中的原生时间序列一般被认为是不规则的，也就是说，它们没有固定的频率。对于大部分应用程序而言，这是无所谓的。但是，它常常需要以某种相对固定的频率进行分析，比如每日、每月、每15分钟等（这样自然会在时间序列中引入缺失值）。幸运的是，pandas有一整套标准时间序列频率以及用于重采样、频率推断、生成固定频率日期范围的工具。例如，我们可以将之前那个时间序列转换为一个具有固定频率（每日）的时间序列，只需调用resample即可：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">72</span>]: ts</span><br><span class="line">Out[<span class="hljs-number">72</span>]: </span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-01</span><span class="hljs-number">-02</span>   <span class="hljs-number">-0.204708</span></span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-01</span><span class="hljs-number">-05</span>    <span class="hljs-number">0.478943</span></span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-01</span><span class="hljs-number">-07</span>   <span class="hljs-number">-0.519439</span></span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-01</span><span class="hljs-number">-08</span>   <span class="hljs-number">-0.555730</span></span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-01</span><span class="hljs-number">-10</span>    <span class="hljs-number">1.965781</span></span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-01</span><span class="hljs-number">-12</span>    <span class="hljs-number">1.393406</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">73</span>]: resampler = ts.resample(<span class="hljs-string">'D'</span>)</span><br></pre></td></tr></table></figure><p>字符串“D”是每天的意思。</p><p>频率的转换（或重采样）是一个比较大的主题，稍后将专门用一节来进行讨论（11.6小节）。这里，我将告诉你如何使用基本的频率和它的倍数。</p><h2 id="生成日期范围"><a href="#生成日期范围" class="headerlink" title="生成日期范围"></a>生成日期范围</h2><p>虽然我之前用的时候没有明说，但你可能已经猜到pandas.date_range可用于根据指定的频率生成指定长度的DatetimeIndex：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">74</span>]: index = pd.date_range(<span class="hljs-string">'2012-04-01'</span>, <span class="hljs-string">'2012-06-01'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">75</span>]: index</span><br><span class="line">Out[<span class="hljs-number">75</span>]: </span><br><span class="line">DatetimeIndex([<span class="hljs-string">'2012-04-01'</span>, <span class="hljs-string">'2012-04-02'</span>, <span class="hljs-string">'2012-04-03'</span>, <span class="hljs-string">'2012-04-04'</span>,</span><br><span class="line">               <span class="hljs-string">'2012-04-05'</span>, <span class="hljs-string">'2012-04-06'</span>, <span class="hljs-string">'2012-04-07'</span>, <span class="hljs-string">'2012-04-08'</span>,</span><br><span class="line">               <span class="hljs-string">'2012-04-09'</span>, <span class="hljs-string">'2012-04-10'</span>, <span class="hljs-string">'2012-04-11'</span>, <span class="hljs-string">'2012-04-12'</span>,</span><br><span class="line">               <span class="hljs-string">'2012-04-13'</span>, <span class="hljs-string">'2012-04-14'</span>, <span class="hljs-string">'2012-04-15'</span>, <span class="hljs-string">'2012-04-16'</span>,</span><br><span class="line">               <span class="hljs-string">'2012-04-17'</span>, <span class="hljs-string">'2012-04-18'</span>, <span class="hljs-string">'2012-04-19'</span>, <span class="hljs-string">'2012-04-20'</span>,</span><br><span class="line">               <span class="hljs-string">'2012-04-21'</span>, <span class="hljs-string">'2012-04-22'</span>, <span class="hljs-string">'2012-04-23'</span>, <span class="hljs-string">'2012-04-24'</span>,</span><br><span class="line">               <span class="hljs-string">'2012-04-25'</span>, <span class="hljs-string">'2012-04-26'</span>, <span class="hljs-string">'2012-04-27'</span>, <span class="hljs-string">'2012-04-28'</span>,</span><br><span class="line">               <span class="hljs-string">'2012-04-29'</span>, <span class="hljs-string">'2012-04-30'</span>, <span class="hljs-string">'2012-05-01'</span>, <span class="hljs-string">'2012-05-02'</span>,</span><br><span class="line">               <span class="hljs-string">'2012-05-03'</span>, <span class="hljs-string">'2012-05-04'</span>, <span class="hljs-string">'2012-05-05'</span>, <span class="hljs-string">'2012-05-06'</span>,</span><br><span class="line">               <span class="hljs-string">'2012-05-07'</span>, <span class="hljs-string">'2012-05-08'</span>, <span class="hljs-string">'2012-05-09'</span>, <span class="hljs-string">'2012-05-10'</span>,</span><br><span class="line">               <span class="hljs-string">'2012-05-11'</span>, <span class="hljs-string">'2012-05-12'</span>, <span class="hljs-string">'2012-05-13'</span>, <span class="hljs-string">'2012-05-14'</span>,</span><br><span class="line">               <span class="hljs-string">'2012-05-15'</span>, <span class="hljs-string">'2012-05-16'</span>, <span class="hljs-string">'2012-05-17'</span>, <span class="hljs-string">'2012-05-18'</span>,</span><br><span class="line">               <span class="hljs-string">'2012-05-19'</span>, <span class="hljs-string">'2012-05-20'</span>, <span class="hljs-string">'2012-05-21'</span>, <span class="hljs-string">'2012-05-22'</span>,</span><br><span class="line">               <span class="hljs-string">'2012-05-23'</span>, <span class="hljs-string">'2012-05-24'</span>, <span class="hljs-string">'2012-05-25'</span>, <span class="hljs-string">'2012-05-26'</span>,</span><br><span class="line">               <span class="hljs-string">'2012-05-27'</span>, <span class="hljs-string">'2012-05-28'</span>, <span class="hljs-string">'2012-05-29'</span>, <span class="hljs-string">'2012-05-30'</span>,</span><br><span class="line">               <span class="hljs-string">'2012-05-31'</span>, <span class="hljs-string">'2012-06-01'</span>],</span><br><span class="line">              dtype=<span class="hljs-string">'datetime64[ns]'</span>, freq=<span class="hljs-string">'D'</span>)</span><br></pre></td></tr></table></figure><p>默认情况下，date_range会产生按天计算的时间点。如果只传入起始或结束日期，那就还得传入一个表示一段时间的数字：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">76</span>]: pd.date_range(start=<span class="hljs-string">'2012-04-01'</span>, periods=<span class="hljs-number">20</span>)</span><br><span class="line">Out[<span class="hljs-number">76</span>]: </span><br><span class="line">DatetimeIndex([<span class="hljs-string">'2012-04-01'</span>, <span class="hljs-string">'2012-04-02'</span>, <span class="hljs-string">'2012-04-03'</span>, <span class="hljs-string">'2012-04-04'</span>,</span><br><span class="line">               <span class="hljs-string">'2012-04-05'</span>, <span class="hljs-string">'2012-04-06'</span>, <span class="hljs-string">'2012-04-07'</span>, <span class="hljs-string">'2012-04-08'</span>,</span><br><span class="line">               <span class="hljs-string">'2012-04-09'</span>, <span class="hljs-string">'2012-04-10'</span>, <span class="hljs-string">'2012-04-11'</span>, <span class="hljs-string">'2012-04-12'</span>,</span><br><span class="line">               <span class="hljs-string">'2012-04-13'</span>, <span class="hljs-string">'2012-04-14'</span>, <span class="hljs-string">'2012-04-15'</span>, <span class="hljs-string">'2012-04-16'</span>,</span><br><span class="line">               <span class="hljs-string">'2012-04-17'</span>, <span class="hljs-string">'2012-04-18'</span>, <span class="hljs-string">'2012-04-19'</span>, <span class="hljs-string">'2012-04-20'</span>],</span><br><span class="line">              dtype=<span class="hljs-string">'datetime64[ns]'</span>, freq=<span class="hljs-string">'D'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">77</span>]: pd.date_range(end=<span class="hljs-string">'2012-06-01'</span>, periods=<span class="hljs-number">20</span>)</span><br><span class="line">Out[<span class="hljs-number">77</span>]: </span><br><span class="line">DatetimeIndex([<span class="hljs-string">'2012-05-13'</span>, <span class="hljs-string">'2012-05-14'</span>, <span class="hljs-string">'2012-05-15'</span>, <span class="hljs-string">'2012-05-16'</span>,</span><br><span class="line">               <span class="hljs-string">'2012-05-17'</span>, <span class="hljs-string">'2012-05-18'</span>, <span class="hljs-string">'2012-05-19'</span>, <span class="hljs-string">'2012-05-20'</span>,</span><br><span class="line">               <span class="hljs-string">'2012-05-21'</span>, <span class="hljs-string">'2012-05-22'</span>, <span class="hljs-string">'2012-05-23'</span>, <span class="hljs-string">'2012-05-24'</span>,</span><br><span class="line">               <span class="hljs-string">'2012-05-25'</span>, <span class="hljs-string">'2012-05-26'</span>, <span class="hljs-string">'2012-05-27'</span>,<span class="hljs-string">'2012-05-28'</span>,</span><br><span class="line">               <span class="hljs-string">'2012-05-29'</span>, <span class="hljs-string">'2012-05-30'</span>, <span class="hljs-string">'2012-05-31'</span>, <span class="hljs-string">'2012-06-01'</span>],</span><br><span class="line">              dtype=<span class="hljs-string">'datetime64[ns]'</span>, freq=<span class="hljs-string">'D'</span>)</span><br></pre></td></tr></table></figure><p>起始和结束日期定义了日期索引的严格边界。例如，如果你想要生成一个由每月最后一个工作日组成的日期索引，可以传入”BM”频率（表示business end of month，表11-4是频率列表），这样就只会包含时间间隔内（或刚好在边界上的）符合频率要求的日期：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">78</span>]: pd.date_range(<span class="hljs-string">'2000-01-01'</span>, <span class="hljs-string">'2000-12-01'</span>, freq=<span class="hljs-string">'BM'</span>)</span><br><span class="line">Out[<span class="hljs-number">78</span>]: </span><br><span class="line">DatetimeIndex([<span class="hljs-string">'2000-01-31'</span>, <span class="hljs-string">'2000-02-29'</span>, <span class="hljs-string">'2000-03-31'</span>, <span class="hljs-string">'2000-04-28'</span>,</span><br><span class="line">               <span class="hljs-string">'2000-05-31'</span>, <span class="hljs-string">'2000-06-30'</span>, <span class="hljs-string">'2000-07-31'</span>, <span class="hljs-string">'2000-08-31'</span>,</span><br><span class="line">               <span class="hljs-string">'2000-09-29'</span>, <span class="hljs-string">'2000-10-31'</span>, <span class="hljs-string">'2000-11-30'</span>],</span><br><span class="line">              dtype=<span class="hljs-string">'datetime64[ns]'</span>, freq=<span class="hljs-string">'BM'</span>)</span><br></pre></td></tr></table></figure><p>表11-4 基本的时间序列频率（不完整）</p><p><img src="/images/blog/7178691-c8614ddbd10793ca.webp" alt="img"></p><p><img src="/images/blog/7178691-8da46ba96544b071.webp" alt="img"></p><p><img src="/images/blog/7178691-3ca410609195edc4.webp" alt="img"></p><p>date_range默认会保留起始和结束时间戳的时间信息（如果有的话）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">79</span>]: pd.date_range(<span class="hljs-string">'2012-05-02 12:56:31'</span>, periods=<span class="hljs-number">5</span>)</span><br><span class="line">Out[<span class="hljs-number">79</span>]: </span><br><span class="line">DatetimeIndex([<span class="hljs-string">'2012-05-02 12:56:31'</span>, <span class="hljs-string">'2012-05-03 12:56:31'</span>,</span><br><span class="line">               <span class="hljs-string">'2012-05-04 12:56:31'</span>, <span class="hljs-string">'2012-05-05 12:56:31'</span>,</span><br><span class="line">               <span class="hljs-string">'2012-05-06 12:56:31'</span>],</span><br><span class="line">              dtype=<span class="hljs-string">'datetime64[ns]'</span>, freq=<span class="hljs-string">'D'</span>)</span><br></pre></td></tr></table></figure><p>有时，虽然起始和结束日期带有时间信息，但你希望产生一组被规范化（normalize）到午夜的时间戳。normalize选项即可实现该功能：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">80</span>]: pd.date_range(<span class="hljs-string">'2012-05-02 12:56:31'</span>, periods=<span class="hljs-number">5</span>, normalize=<span class="hljs-literal">True</span>)</span><br><span class="line">Out[<span class="hljs-number">80</span>]: </span><br><span class="line">DatetimeIndex([<span class="hljs-string">'2012-05-02'</span>, <span class="hljs-string">'2012-05-03'</span>, <span class="hljs-string">'2012-05-04'</span>, <span class="hljs-string">'2012-05-05'</span>,</span><br><span class="line">               <span class="hljs-string">'2012-05-06'</span>],</span><br><span class="line">              dtype=<span class="hljs-string">'datetime64[ns]'</span>, freq=<span class="hljs-string">'D'</span>)</span><br></pre></td></tr></table></figure><h2 id="频率和日期偏移量"><a href="#频率和日期偏移量" class="headerlink" title="频率和日期偏移量"></a>频率和日期偏移量</h2><p>pandas中的频率是由一个基础频率（base frequency）和一个乘数组成的。基础频率通常以一个字符串别名表示，比如”M”表示每月，”H”表示每小时。对于每个基础频率，都有一个被称为日期偏移量（date offset）的对象与之对应。例如，按小时计算的频率可以用Hour类表示：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">81</span>]: <span class="hljs-keyword">from</span> pandas.tseries.offsets <span class="hljs-keyword">import</span> Hour, Minute</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">82</span>]: hour = Hour()</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">83</span>]: hour</span><br><span class="line">Out[<span class="hljs-number">83</span>]: &lt;Hour&gt;</span><br></pre></td></tr></table></figure><p>传入一个整数即可定义偏移量的倍数：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">84</span>]: four_hours = Hour(<span class="hljs-number">4</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">85</span>]: four_hours</span><br><span class="line">Out[<span class="hljs-number">85</span>]: &lt;<span class="hljs-number">4</span> * Hours&gt;</span><br></pre></td></tr></table></figure><p>一般来说，无需明确创建这样的对象，只需使用诸如”H”或”4H”这样的字符串别名即可。在基础频率前面放上一个整数即可创建倍数：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">86</span>]: pd.date_range(<span class="hljs-string">'2000-01-01'</span>, <span class="hljs-string">'2000-01-03 23:59'</span>, freq=<span class="hljs-string">'4h'</span>)</span><br><span class="line">Out[<span class="hljs-number">86</span>]: </span><br><span class="line">DatetimeIndex([<span class="hljs-string">'2000-01-01 00:00:00'</span>, <span class="hljs-string">'2000-01-01 04:00:00'</span>,</span><br><span class="line">               <span class="hljs-string">'2000-01-01 08:00:00'</span>, <span class="hljs-string">'2000-01-01 12:00:00'</span>,</span><br><span class="line">               <span class="hljs-string">'2000-01-01 16:00:00'</span>, <span class="hljs-string">'2000-01-01 20:00:00'</span>,</span><br><span class="line">               <span class="hljs-string">'2000-01-02 00:00:00'</span>, <span class="hljs-string">'2000-01-02 04:00:00'</span>,</span><br><span class="line">               <span class="hljs-string">'2000-01-02 08:00:00'</span>, <span class="hljs-string">'2000-01-02 12:00:00'</span>,</span><br><span class="line">               <span class="hljs-string">'2000-01-02 16:00:00'</span>, <span class="hljs-string">'2000-01-02 20:00:00'</span>,</span><br><span class="line">               <span class="hljs-string">'2000-01-03 00:00:00'</span>, <span class="hljs-string">'2000-01-03 04:00:00'</span>,</span><br><span class="line">               <span class="hljs-string">'2000-01-03 08:00:00'</span>, <span class="hljs-string">'2000-01-03 12:00:00'</span>,</span><br><span class="line">               <span class="hljs-string">'2000-01-03 16:00:00'</span>, <span class="hljs-string">'2000-01-03 20:00:00'</span>],</span><br><span class="line">              dtype=<span class="hljs-string">'datetime64[ns]'</span>, freq=<span class="hljs-string">'4H'</span>)</span><br></pre></td></tr></table></figure><p>大部分偏移量对象都可通过加法进行连接：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">87</span>]: Hour(<span class="hljs-number">2</span>) + Minute(<span class="hljs-number">30</span>)</span><br><span class="line">Out[<span class="hljs-number">87</span>]: &lt;<span class="hljs-number">150</span> * Minutes&gt;</span><br></pre></td></tr></table></figure><p>同理，你也可以传入频率字符串（如”2h30min”），这种字符串可以被高效地解析为等效的表达式：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">88</span>]: pd.date_range(<span class="hljs-string">'2000-01-01'</span>, periods=<span class="hljs-number">10</span>, freq=<span class="hljs-string">'1h30min'</span>)</span><br><span class="line">Out[<span class="hljs-number">88</span>]: </span><br><span class="line">DatetimeIndex([<span class="hljs-string">'2000-01-01 00:00:00'</span>, <span class="hljs-string">'2000-01-01 01:30:00'</span>,</span><br><span class="line">               <span class="hljs-string">'2000-01-01 03:00:00'</span>, <span class="hljs-string">'2000-01-01 04:30:00'</span>,</span><br><span class="line">               <span class="hljs-string">'2000-01-01 06:00:00'</span>, <span class="hljs-string">'2000-01-01 07:30:00'</span>,</span><br><span class="line">               <span class="hljs-string">'2000-01-01 09:00:00'</span>, <span class="hljs-string">'2000-01-01 10:30:00'</span>,</span><br><span class="line">               <span class="hljs-string">'2000-01-01 12:00:00'</span>, <span class="hljs-string">'2000-01-01 13:30:00'</span>],</span><br><span class="line">              dtype=<span class="hljs-string">'datetime64[ns]'</span>, freq=<span class="hljs-string">'90T'</span>)</span><br></pre></td></tr></table></figure><p>有些频率所描述的时间点并不是均匀分隔的。例如，”M”（日历月末）和”BM”（每月最后一个工作日）就取决于每月的天数，对于后者，还要考虑月末是不是周末。由于没有更好的术语，我将这些称为锚点偏移量（anchored offset）。</p><p>表11-4列出了pandas中的频率代码和日期偏移量类。</p><blockquote><p>笔记：用户可以根据实际需求自定义一些频率类以便提供pandas所没有的日期逻辑，但具体的细节超出了本书的范围。</p></blockquote><p>表11-4 时间序列的基础频率</p><p><img src="/images/blog/7178691-ff139312cd972204.webp" alt="img"></p><p><img src="/images/blog/7178691-adfa57a998c0296e.webp" alt="img"></p><p><img src="/images/blog/7178691-d09e577a10d0e6eb.webp" alt="img"></p><h2 id="WOM日期"><a href="#WOM日期" class="headerlink" title="WOM日期"></a>WOM日期</h2><p>WOM（Week Of Month）是一种非常实用的频率类，它以WOM开头。它使你能获得诸如“每月第3个星期五”之类的日期：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">89</span>]: rng = pd.date_range(<span class="hljs-string">'2012-01-01'</span>, <span class="hljs-string">'2012-09-01'</span>, freq=<span class="hljs-string">'WOM-3FRI'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">90</span>]: list(rng)</span><br><span class="line">Out[<span class="hljs-number">90</span>]: </span><br><span class="line">[Timestamp(<span class="hljs-string">'2012-01-20 00:00:00'</span>, freq=<span class="hljs-string">'WOM-3FRI'</span>),</span><br><span class="line"> Timestamp(<span class="hljs-string">'2012-02-17 00:00:00'</span>, freq=<span class="hljs-string">'WOM-3FRI'</span>),</span><br><span class="line"> Timestamp(<span class="hljs-string">'2012-03-16 00:00:00'</span>, freq=<span class="hljs-string">'WOM-3FRI'</span>),</span><br><span class="line"> Timestamp(<span class="hljs-string">'2012-04-20 00:00:00'</span>, freq=<span class="hljs-string">'WOM-3FRI'</span>),</span><br><span class="line"> Timestamp(<span class="hljs-string">'2012-05-18 00:00:00'</span>, freq=<span class="hljs-string">'WOM-3FRI'</span>),</span><br><span class="line"> Timestamp(<span class="hljs-string">'2012-06-15 00:00:00'</span>, freq=<span class="hljs-string">'WOM-3FRI'</span>),</span><br><span class="line"> Timestamp(<span class="hljs-string">'2012-07-20 00:00:00'</span>, freq=<span class="hljs-string">'WOM-3FRI'</span>),</span><br><span class="line"> Timestamp(<span class="hljs-string">'2012-08-17 00:00:00'</span>, freq=<span class="hljs-string">'WOM-3FRI'</span>)]</span><br></pre></td></tr></table></figure><h2 id="移动（超前和滞后）数据"><a href="#移动（超前和滞后）数据" class="headerlink" title="移动（超前和滞后）数据"></a>移动（超前和滞后）数据</h2><p>移动（shifting）指的是沿着时间轴将数据前移或后移。Series和DataFrame都有一个shift方法用于执行单纯的前移或后移操作，保持索引不变：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">91</span>]: ts = pd.Series(np.random.randn(<span class="hljs-number">4</span>),</span><br><span class="line">   ....:                index=pd.date_range(<span class="hljs-string">'1/1/2000'</span>, periods=<span class="hljs-number">4</span>, freq=<span class="hljs-string">'M'</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">92</span>]: ts</span><br><span class="line">Out[<span class="hljs-number">92</span>]: </span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-31</span>   <span class="hljs-number">-0.066748</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-02</span><span class="hljs-number">-29</span>    <span class="hljs-number">0.838639</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-03</span><span class="hljs-number">-31</span>   <span class="hljs-number">-0.117388</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-04</span><span class="hljs-number">-30</span>   <span class="hljs-number">-0.517795</span></span><br><span class="line">Freq: M, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">93</span>]: ts.shift(<span class="hljs-number">2</span>)</span><br><span class="line">Out[<span class="hljs-number">93</span>]: </span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-31</span>         NaN</span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-02</span><span class="hljs-number">-29</span>         NaN</span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-03</span><span class="hljs-number">-31</span>   <span class="hljs-number">-0.066748</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-04</span><span class="hljs-number">-30</span>    <span class="hljs-number">0.838639</span></span><br><span class="line">Freq: M, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">94</span>]: ts.shift(<span class="hljs-number">-2</span>)</span><br><span class="line">Out[<span class="hljs-number">94</span>]: </span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-31</span>   <span class="hljs-number">-0.117388</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-02</span><span class="hljs-number">-29</span>   <span class="hljs-number">-0.517795</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-03</span><span class="hljs-number">-31</span>         NaN</span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-04</span><span class="hljs-number">-30</span>         NaN</span><br><span class="line">Freq: M, dtype: float64</span><br></pre></td></tr></table></figure><p>当我们这样进行移动时，就会在时间序列的前面或后面产生缺失数据。</p><p>shift通常用于计算一个时间序列或多个时间序列（如DataFrame的列）中的百分比变化。可以这样表达：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ts / ts.shift(<span class="hljs-number">1</span>) - <span class="hljs-number">1</span></span><br></pre></td></tr></table></figure><p>由于单纯的移位操作不会修改索引，所以部分数据会被丢弃。因此，如果频率已知，则可以将其传给shift以便实现对时间戳进行位移而不是对数据进行简单位移：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">95</span>]: ts.shift(<span class="hljs-number">2</span>, freq=<span class="hljs-string">'M'</span>)</span><br><span class="line">Out[<span class="hljs-number">95</span>]: </span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-03</span><span class="hljs-number">-31</span>   <span class="hljs-number">-0.066748</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-04</span><span class="hljs-number">-30</span>    <span class="hljs-number">0.838639</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-05</span><span class="hljs-number">-31</span>   <span class="hljs-number">-0.117388</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-06</span><span class="hljs-number">-30</span>   <span class="hljs-number">-0.517795</span></span><br><span class="line">Freq: M, dtype: float64</span><br></pre></td></tr></table></figure><p>这里还可以使用其他频率，于是你就能非常灵活地对数据进行超前和滞后处理了：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">96</span>]: ts.shift(<span class="hljs-number">3</span>, freq=<span class="hljs-string">'D'</span>)</span><br><span class="line">Out[<span class="hljs-number">96</span>]: </span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-02</span><span class="hljs-number">-03</span>   <span class="hljs-number">-0.066748</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-03</span><span class="hljs-number">-03</span>    <span class="hljs-number">0.838639</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-04</span><span class="hljs-number">-03</span>   <span class="hljs-number">-0.117388</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-05</span><span class="hljs-number">-03</span>   <span class="hljs-number">-0.517795</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">97</span>]: ts.shift(<span class="hljs-number">1</span>, freq=<span class="hljs-string">'90T'</span>)</span><br><span class="line">Out[<span class="hljs-number">97</span>]: </span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-31</span> <span class="hljs-number">01</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>   <span class="hljs-number">-0.066748</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-02</span><span class="hljs-number">-29</span> <span class="hljs-number">01</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0.838639</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-03</span><span class="hljs-number">-31</span> <span class="hljs-number">01</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>   <span class="hljs-number">-0.117388</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-04</span><span class="hljs-number">-30</span> <span class="hljs-number">01</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>   <span class="hljs-number">-0.517795</span></span><br><span class="line">Freq: M, dtype: float64</span><br></pre></td></tr></table></figure><h2 id="通过偏移量对日期进行位移"><a href="#通过偏移量对日期进行位移" class="headerlink" title="通过偏移量对日期进行位移"></a>通过偏移量对日期进行位移</h2><p>pandas的日期偏移量还可以用在datetime或Timestamp对象上：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">98</span>]: <span class="hljs-keyword">from</span> pandas.tseries.offsets <span class="hljs-keyword">import</span> Day, MonthEnd</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">99</span>]: now = datetime(<span class="hljs-number">2011</span>, <span class="hljs-number">11</span>, <span class="hljs-number">17</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">100</span>]: now + <span class="hljs-number">3</span> * Day()</span><br><span class="line">Out[<span class="hljs-number">100</span>]: Timestamp(<span class="hljs-string">'2011-11-20 00:00:00'</span>)</span><br></pre></td></tr></table></figure><p>如果加的是锚点偏移量（比如MonthEnd），第一次增量会将原日期向前滚动到符合频率规则的下一个日期：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">101</span>]: now + MonthEnd()</span><br><span class="line">Out[<span class="hljs-number">101</span>]: Timestamp(<span class="hljs-string">'2011-11-30 00:00:00'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">102</span>]: now + MonthEnd(<span class="hljs-number">2</span>)</span><br><span class="line">Out[<span class="hljs-number">102</span>]: Timestamp(<span class="hljs-string">'2011-12-31 00:00:00'</span>)</span><br></pre></td></tr></table></figure><p>通过锚点偏移量的rollforward和rollback方法，可明确地将日期向前或向后“滚动”：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">103</span>]: offset = MonthEnd()</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">104</span>]: offset.rollforward(now)</span><br><span class="line">Out[<span class="hljs-number">104</span>]: Timestamp(<span class="hljs-string">'2011-11-30 00:00:00'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">105</span>]: offset.rollback(now)</span><br><span class="line">Out[<span class="hljs-number">105</span>]: Timestamp(<span class="hljs-string">'2011-10-31 00:00:00'</span>)</span><br></pre></td></tr></table></figure><p>日期偏移量还有一个巧妙的用法，即结合groupby使用这两个“滚动”方法：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">106</span>]: ts = pd.Series(np.random.randn(<span class="hljs-number">20</span>),</span><br><span class="line">   .....:                index=pd.date_range(<span class="hljs-string">'1/15/2000'</span>, periods=<span class="hljs-number">20</span>, freq=<span class="hljs-string">'4d'</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">107</span>]: ts</span><br><span class="line">Out[<span class="hljs-number">107</span>]: </span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-15</span>   <span class="hljs-number">-0.116696</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-19</span>    <span class="hljs-number">2.389645</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-23</span>   <span class="hljs-number">-0.932454</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-27</span>   <span class="hljs-number">-0.229331</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-31</span>   <span class="hljs-number">-1.140330</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-02</span><span class="hljs-number">-04</span>    <span class="hljs-number">0.439920</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-02</span><span class="hljs-number">-08</span>   <span class="hljs-number">-0.823758</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-02</span><span class="hljs-number">-12</span>   <span class="hljs-number">-0.520930</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-02</span><span class="hljs-number">-16</span>    <span class="hljs-number">0.350282</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-02</span><span class="hljs-number">-20</span>    <span class="hljs-number">0.204395</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-02</span><span class="hljs-number">-24</span>    <span class="hljs-number">0.133445</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-02</span><span class="hljs-number">-28</span>    <span class="hljs-number">0.327905</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-03</span><span class="hljs-number">-03</span>    <span class="hljs-number">0.072153</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-03</span><span class="hljs-number">-07</span>    <span class="hljs-number">0.131678</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-03</span><span class="hljs-number">-11</span>   <span class="hljs-number">-1.297459</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-03</span><span class="hljs-number">-15</span>    <span class="hljs-number">0.997747</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-03</span><span class="hljs-number">-19</span>    <span class="hljs-number">0.870955</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-03</span><span class="hljs-number">-23</span>   <span class="hljs-number">-0.991253</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-03</span><span class="hljs-number">-27</span>    <span class="hljs-number">0.151699</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-03</span><span class="hljs-number">-31</span>    <span class="hljs-number">1.266151</span></span><br><span class="line">Freq: <span class="hljs-number">4</span>D, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">108</span>]: ts.groupby(offset.rollforward).mean()</span><br><span class="line">Out[<span class="hljs-number">108</span>]: </span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-31</span>   <span class="hljs-number">-0.005833</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-02</span><span class="hljs-number">-29</span>    <span class="hljs-number">0.015894</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-03</span><span class="hljs-number">-31</span>    <span class="hljs-number">0.150209</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><p>当然，更简单、更快速地实现该功能的办法是使用resample（11.6小节将对此进行详细介绍）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">109</span>]: ts.resample(<span class="hljs-string">'M'</span>).mean()</span><br><span class="line">Out[<span class="hljs-number">109</span>]: </span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-31</span>   <span class="hljs-number">-0.005833</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-02</span><span class="hljs-number">-29</span>    <span class="hljs-number">0.015894</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-03</span><span class="hljs-number">-31</span>    <span class="hljs-number">0.150209</span></span><br><span class="line">Freq: M, dtype: float64</span><br></pre></td></tr></table></figure><h1 id="11-4-时区处理"><a href="#11-4-时区处理" class="headerlink" title="11.4 时区处理"></a>11.4 时区处理</h1><p>时间序列处理工作中最让人不爽的就是对时区的处理。许多人都选择以协调世界时（UTC，它是格林尼治标准时间（Greenwich Mean Time）的接替者，目前已经是国际标准了）来处理时间序列。时区是以UTC偏移量的形式表示的。例如，夏令时期间，纽约比UTC慢4小时，而在全年其他时间则比UTC慢5小时。</p><p>在Python中，时区信息来自第三方库pytz，它使Python可以使用Olson数据库（汇编了世界时区信息）。这对历史数据非常重要，这是因为由于各地政府的各种突发奇想，夏令时转变日期（甚至UTC偏移量）已经发生过多次改变了。就拿美国来说，DST转变时间自1900年以来就改变过多次！</p><p>有关pytz库的更多信息，请查阅其文档。就本书而言，由于pandas包装了pytz的功能，因此你可以不用记忆其API，只要记得时区的名称即可。时区名可以在shell中看到，也可以通过文档查看：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">110</span>]: <span class="hljs-keyword">import</span> pytz</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">111</span>]: pytz.common_timezones[<span class="hljs-number">-5</span>:]</span><br><span class="line">Out[<span class="hljs-number">111</span>]: [<span class="hljs-string">'US/Eastern'</span>, <span class="hljs-string">'US/Hawaii'</span>, <span class="hljs-string">'US/Mountain'</span>, <span class="hljs-string">'US/Pacific'</span>, <span class="hljs-string">'UTC'</span>]</span><br></pre></td></tr></table></figure><p>要从pytz中获取时区对象，使用pytz.timezone即可：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">112</span>]: tz = pytz.timezone(<span class="hljs-string">'America/New_York'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">113</span>]: tz</span><br><span class="line">Out[<span class="hljs-number">113</span>]: &lt;DstTzInfo <span class="hljs-string">'America/New_York'</span> LMT<span class="hljs-number">-1</span> day, <span class="hljs-number">19</span>:<span class="hljs-number">04</span>:<span class="hljs-number">00</span> STD&gt;</span><br></pre></td></tr></table></figure><p>pandas中的方法既可以接受时区名也可以接受这些对象。</p><h1 id="时区本地化和转换"><a href="#时区本地化和转换" class="headerlink" title="时区本地化和转换"></a>时区本地化和转换</h1><p>默认情况下，pandas中的时间序列是单纯（naive）的时区。看看下面这个时间序列：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">114</span>]: rng = pd.date_range(<span class="hljs-string">'3/9/2012 9:30'</span>, periods=<span class="hljs-number">6</span>, freq=<span class="hljs-string">'D'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">115</span>]: ts = pd.Series(np.random.randn(len(rng)), index=rng)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">116</span>]: ts</span><br><span class="line">Out[<span class="hljs-number">116</span>]: </span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-09</span> <span class="hljs-number">09</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>   <span class="hljs-number">-0.202469</span></span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-10</span> <span class="hljs-number">09</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0.050718</span></span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-11</span> <span class="hljs-number">09</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0.639869</span></span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-12</span> <span class="hljs-number">09</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0.597594</span></span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-13</span> <span class="hljs-number">09</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>   <span class="hljs-number">-0.797246</span></span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-14</span> <span class="hljs-number">09</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0.472879</span></span><br><span class="line">Freq: D, dtype: float64</span><br></pre></td></tr></table></figure><p>其索引的tz字段为None：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">117</span>]: print(ts.index.tz)</span><br><span class="line"><span class="hljs-literal">None</span></span><br></pre></td></tr></table></figure><p>可以用时区集生成日期范围：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">118</span>]: pd.date_range(<span class="hljs-string">'3/9/2012 9:30'</span>, periods=<span class="hljs-number">10</span>, freq=<span class="hljs-string">'D'</span>, tz=<span class="hljs-string">'UTC'</span>)</span><br><span class="line">Out[<span class="hljs-number">118</span>]: </span><br><span class="line">DatetimeIndex([<span class="hljs-string">'2012-03-09 09:30:00+00:00'</span>, <span class="hljs-string">'2012-03-10 09:30:00+00:00'</span>,</span><br><span class="line">               <span class="hljs-string">'2012-03-11 09:30:00+00:00'</span>, <span class="hljs-string">'2012-03-12 09:30:00+00:00'</span>,</span><br><span class="line">               <span class="hljs-string">'2012-03-13 09:30:00+00:00'</span>, <span class="hljs-string">'2012-03-14 09:30:00+00:00'</span>,</span><br><span class="line">               <span class="hljs-string">'2012-03-15 09:30:00+00:00'</span>, <span class="hljs-string">'2012-03-16 09:30:00+00:00'</span>,</span><br><span class="line">               <span class="hljs-string">'2012-03-17 09:30:00+00:00'</span>, <span class="hljs-string">'2012-03-18 09:30:00+00:00'</span>],</span><br><span class="line">              dtype=<span class="hljs-string">'datetime64[ns, UTC]'</span>, freq=<span class="hljs-string">'D'</span>)</span><br></pre></td></tr></table></figure><p>从单纯到本地化的转换是通过tz_localize方法处理的：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">119</span>]: ts</span><br><span class="line">Out[<span class="hljs-number">119</span>]: </span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-09</span> <span class="hljs-number">09</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>   <span class="hljs-number">-0.202469</span></span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-10</span> <span class="hljs-number">09</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0.050718</span></span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-11</span> <span class="hljs-number">09</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0.639869</span></span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-12</span> <span class="hljs-number">09</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0.597594</span></span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-13</span> <span class="hljs-number">09</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>   <span class="hljs-number">-0.797246</span></span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-14</span> <span class="hljs-number">09</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0.472879</span></span><br><span class="line">Freq: D, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">120</span>]: ts_utc = ts.tz_localize(<span class="hljs-string">'UTC'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">121</span>]: ts_utc</span><br><span class="line">Out[<span class="hljs-number">121</span>]: </span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-09</span> <span class="hljs-number">09</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>+<span class="hljs-number">00</span>:<span class="hljs-number">00</span>   <span class="hljs-number">-0.202469</span></span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-10</span> <span class="hljs-number">09</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>+<span class="hljs-number">00</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0.050718</span></span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-11</span> <span class="hljs-number">09</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>+<span class="hljs-number">00</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0.639869</span></span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-12</span> <span class="hljs-number">09</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>+<span class="hljs-number">00</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0.597594</span></span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-13</span> <span class="hljs-number">09</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>+<span class="hljs-number">00</span>:<span class="hljs-number">00</span>   <span class="hljs-number">-0.797246</span></span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-14</span> <span class="hljs-number">09</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>+<span class="hljs-number">00</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0.472879</span></span><br><span class="line">Freq: D, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">122</span>]: ts_utc.index</span><br><span class="line">Out[<span class="hljs-number">122</span>]: </span><br><span class="line">DatetimeIndex([<span class="hljs-string">'2012-03-09 09:30:00+00:00'</span>, <span class="hljs-string">'2012-03-10 09:30:00+00:00'</span>,</span><br><span class="line">               <span class="hljs-string">'2012-03-11 09:30:00+00:00'</span>, <span class="hljs-string">'2012-03-12 09:30:00+00:00'</span>,</span><br><span class="line">               <span class="hljs-string">'2012-03-13 09:30:00+00:00'</span>, <span class="hljs-string">'2012-03-14 09:30:00+00:00'</span>],</span><br><span class="line">              dtype=<span class="hljs-string">'datetime64[ns, UTC]'</span>, freq=<span class="hljs-string">'D'</span>)</span><br></pre></td></tr></table></figure><p>一旦时间序列被本地化到某个特定时区，就可以用tz_convert将其转换到别的时区了：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">123</span>]: ts_utc.tz_convert(<span class="hljs-string">'America/New_York'</span>)</span><br><span class="line">Out[<span class="hljs-number">123</span>]: </span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-09</span> <span class="hljs-number">04</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span><span class="hljs-number">-05</span>:<span class="hljs-number">00</span>   <span class="hljs-number">-0.202469</span></span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-10</span> <span class="hljs-number">04</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span><span class="hljs-number">-05</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0.050718</span></span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-11</span> <span class="hljs-number">05</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span><span class="hljs-number">-04</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0.639869</span></span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-12</span> <span class="hljs-number">05</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span><span class="hljs-number">-04</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0.597594</span></span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-13</span> <span class="hljs-number">05</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span><span class="hljs-number">-04</span>:<span class="hljs-number">00</span>   <span class="hljs-number">-0.797246</span></span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-14</span> <span class="hljs-number">05</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span><span class="hljs-number">-04</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0.472879</span></span><br><span class="line">Freq: D, dtype: float64</span><br></pre></td></tr></table></figure><p>对于上面这种时间序列（它跨越了美国东部时区的夏令时转变期），我们可以将其本地化到EST，然后转换为UTC或柏林时间：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">124</span>]: ts_eastern = ts.tz_localize(<span class="hljs-string">'America/New_York'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">125</span>]: ts_eastern.tz_convert(<span class="hljs-string">'UTC'</span>)</span><br><span class="line">Out[<span class="hljs-number">125</span>]: </span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-09</span> <span class="hljs-number">14</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>+<span class="hljs-number">00</span>:<span class="hljs-number">00</span>   <span class="hljs-number">-0.202469</span></span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-10</span> <span class="hljs-number">14</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>+<span class="hljs-number">00</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0.050718</span></span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-11</span> <span class="hljs-number">13</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>+<span class="hljs-number">00</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0.639869</span></span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-12</span> <span class="hljs-number">13</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>+<span class="hljs-number">00</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0.597594</span></span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-13</span> <span class="hljs-number">13</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>+<span class="hljs-number">00</span>:<span class="hljs-number">00</span>   <span class="hljs-number">-0.797246</span></span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-14</span> <span class="hljs-number">13</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>+<span class="hljs-number">00</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0.472879</span></span><br><span class="line">Freq: D, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">126</span>]: ts_eastern.tz_convert(<span class="hljs-string">'Europe/Berlin'</span>)</span><br><span class="line">Out[<span class="hljs-number">126</span>]: </span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-09</span> <span class="hljs-number">15</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>+<span class="hljs-number">01</span>:<span class="hljs-number">00</span>   <span class="hljs-number">-0.202469</span></span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-10</span> <span class="hljs-number">15</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>+<span class="hljs-number">01</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0.050718</span></span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-11</span> <span class="hljs-number">14</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>+<span class="hljs-number">01</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0.639869</span></span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-12</span> <span class="hljs-number">14</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>+<span class="hljs-number">01</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0.597594</span></span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-13</span> <span class="hljs-number">14</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>+<span class="hljs-number">01</span>:<span class="hljs-number">00</span>   <span class="hljs-number">-0.797246</span></span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-14</span> <span class="hljs-number">14</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>+<span class="hljs-number">01</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0.472879</span></span><br><span class="line">Freq: D, dtype: float64</span><br></pre></td></tr></table></figure><p>tz_localize和tz_convert也是DatetimeIndex的实例方法：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">127</span>]: ts.index.tz_localize(<span class="hljs-string">'Asia/Shanghai'</span>)</span><br><span class="line">Out[<span class="hljs-number">127</span>]: </span><br><span class="line">DatetimeIndex([<span class="hljs-string">'2012-03-09 09:30:00+08:00'</span>, <span class="hljs-string">'2012-03-10 09:30:00+08:00'</span>,</span><br><span class="line">               <span class="hljs-string">'2012-03-11 09:30:00+08:00'</span>, <span class="hljs-string">'2012-03-12 09:30:00+08:00'</span>,</span><br><span class="line">               <span class="hljs-string">'2012-03-13 09:30:00+08:00'</span>, <span class="hljs-string">'2012-03-14 09:30:00+08:00'</span>],</span><br><span class="line">              dtype=<span class="hljs-string">'datetime64[ns, Asia/Shanghai]'</span>, freq=<span class="hljs-string">'D'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注意：对单纯时间戳的本地化操作还会检查夏令时转变期附近容易混淆或不存在的时间。</p></blockquote><h2 id="操作时区意识型Timestamp对象"><a href="#操作时区意识型Timestamp对象" class="headerlink" title="操作时区意识型Timestamp对象"></a>操作时区意识型Timestamp对象</h2><p>跟时间序列和日期范围差不多，独立的Timestamp对象也能被从单纯型（naive）本地化为时区意识型（time zone-aware），并从一个时区转换到另一个时区：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">128</span>]: stamp = pd.Timestamp(<span class="hljs-string">'2011-03-12 04:00'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">129</span>]: stamp_utc = stamp.tz_localize(<span class="hljs-string">'utc'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">130</span>]: stamp_utc.tz_convert(<span class="hljs-string">'America/New_York'</span>)</span><br><span class="line">Out[<span class="hljs-number">130</span>]: Timestamp(<span class="hljs-string">'2011-03-11 23:00:00-0500'</span>, tz=<span class="hljs-string">'America/New_York'</span>)</span><br></pre></td></tr></table></figure><p>在创建Timestamp时，还可以传入一个时区信息：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">131</span>]: stamp_moscow = pd.Timestamp(<span class="hljs-string">'2011-03-12 04:00'</span>, tz=<span class="hljs-string">'Europe/Moscow'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">132</span>]: stamp_moscow</span><br><span class="line">Out[<span class="hljs-number">132</span>]: Timestamp(<span class="hljs-string">'2011-03-12 04:00:00+0300'</span>, tz=<span class="hljs-string">'Europe/Moscow'</span>)</span><br></pre></td></tr></table></figure><p>时区意识型Timestamp对象在内部保存了一个UTC时间戳值（自UNIX纪元（1970年1月1日）算起的纳秒数）。这个UTC值在时区转换过程中是不会发生变化的：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">133</span>]: stamp_utc.value</span><br><span class="line">Out[<span class="hljs-number">133</span>]: <span class="hljs-number">1299902400000000000</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">134</span>]: stamp_utc.tz_convert(<span class="hljs-string">'America/New_York'</span>).value</span><br><span class="line">Out[<span class="hljs-number">134</span>]: <span class="hljs-number">1299902400000000000</span></span><br></pre></td></tr></table></figure><p>当使用pandas的DateOffset对象执行时间算术运算时，运算过程会自动关注是否存在夏令时转变期。这里，我们创建了在DST转变之前的时间戳。首先，来看夏令时转变前的30分钟：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">135</span>]: <span class="hljs-keyword">from</span> pandas.tseries.offsets <span class="hljs-keyword">import</span> Hour</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">136</span>]: stamp = pd.Timestamp(<span class="hljs-string">'2012-03-12 01:30'</span>, tz=<span class="hljs-string">'US/Eastern'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">137</span>]: stamp</span><br><span class="line">Out[<span class="hljs-number">137</span>]: Timestamp(<span class="hljs-string">'2012-03-12 01:30:00-0400'</span>, tz=<span class="hljs-string">'US/Eastern'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">138</span>]: stamp + Hour()</span><br><span class="line">Out[<span class="hljs-number">138</span>]: Timestamp(<span class="hljs-string">'2012-03-12 02:30:00-0400'</span>, tz=<span class="hljs-string">'US/Eastern'</span>)</span><br></pre></td></tr></table></figure><p>然后，夏令时转变前90分钟：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">139</span>]: stamp = pd.Timestamp(<span class="hljs-string">'2012-11-04 00:30'</span>, tz=<span class="hljs-string">'US/Eastern'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">140</span>]: stamp</span><br><span class="line">Out[<span class="hljs-number">140</span>]: Timestamp(<span class="hljs-string">'2012-11-04 00:30:00-0400'</span>, tz=<span class="hljs-string">'US/Eastern'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">141</span>]: stamp + <span class="hljs-number">2</span> * Hour()</span><br><span class="line">Out[<span class="hljs-number">141</span>]: Timestamp(<span class="hljs-string">'2012-11-04 01:30:00-0500'</span>, tz=<span class="hljs-string">'US/Eastern'</span>)</span><br></pre></td></tr></table></figure><h2 id="不同时区之间的运算"><a href="#不同时区之间的运算" class="headerlink" title="不同时区之间的运算"></a>不同时区之间的运算</h2><p>如果两个时间序列的时区不同，在将它们合并到一起时，最终结果就会是UTC。由于时间戳其实是以UTC存储的，所以这是一个很简单的运算，并不需要发生任何转换：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">142</span>]: rng = pd.date_range(<span class="hljs-string">'3/7/2012 9:30'</span>, periods=<span class="hljs-number">10</span>, freq=<span class="hljs-string">'B'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">143</span>]: ts = pd.Series(np.random.randn(len(rng)), index=rng)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">144</span>]: ts</span><br><span class="line">Out[<span class="hljs-number">144</span>]: </span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-07</span> <span class="hljs-number">09</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0.522356</span></span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-08</span> <span class="hljs-number">09</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>   <span class="hljs-number">-0.546348</span></span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-09</span> <span class="hljs-number">09</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>   <span class="hljs-number">-0.733537</span></span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-12</span> <span class="hljs-number">09</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>    <span class="hljs-number">1.302736</span></span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-13</span> <span class="hljs-number">09</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0.022199</span></span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-14</span> <span class="hljs-number">09</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0.364287</span></span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-15</span> <span class="hljs-number">09</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>   <span class="hljs-number">-0.922839</span></span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-16</span> <span class="hljs-number">09</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0.312656</span></span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-19</span> <span class="hljs-number">09</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>   <span class="hljs-number">-1.128497</span></span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-03</span><span class="hljs-number">-20</span> <span class="hljs-number">09</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span>   <span class="hljs-number">-0.333488</span></span><br><span class="line">Freq: B, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">145</span>]: ts1 = ts[:<span class="hljs-number">7</span>].tz_localize(<span class="hljs-string">'Europe/London'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">146</span>]: ts2 = ts1[<span class="hljs-number">2</span>:].tz_convert(<span class="hljs-string">'Europe/Moscow'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">147</span>]: result = ts1 + ts2</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">148</span>]: result.index</span><br><span class="line">Out[<span class="hljs-number">148</span>]: </span><br><span class="line">DatetimeIndex([<span class="hljs-string">'2012-03-07 09:30:00+00:00'</span>, <span class="hljs-string">'2012-03-08 09:30:00+00:00'</span>,</span><br><span class="line">               <span class="hljs-string">'2012-03-09 09:30:00+00:00'</span>, <span class="hljs-string">'2012-03-12 09:30:00+00:00'</span>,</span><br><span class="line">               <span class="hljs-string">'2012-03-13 09:30:00+00:00'</span>, <span class="hljs-string">'2012-03-14 09:30:00+00:00'</span>,</span><br><span class="line">               <span class="hljs-string">'2012-03-15 09:30:00+00:00'</span>],</span><br><span class="line">              dtype=<span class="hljs-string">'datetime64[ns, UTC]'</span>, freq=<span class="hljs-string">'B'</span>)</span><br></pre></td></tr></table></figure><h1 id="11-5-时期及其算术运算"><a href="#11-5-时期及其算术运算" class="headerlink" title="11.5 时期及其算术运算"></a>11.5 时期及其算术运算</h1><p>时期（period）表示的是时间区间，比如数日、数月、数季、数年等。Period类所表示的就是这种数据类型，其构造函数需要用到一个字符串或整数，以及表11-4中的频率：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">149</span>]: p = pd.Period(<span class="hljs-number">2007</span>, freq=<span class="hljs-string">'A-DEC'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">150</span>]: p</span><br><span class="line">Out[<span class="hljs-number">150</span>]: Period(<span class="hljs-string">'2007'</span>, <span class="hljs-string">'A-DEC'</span>)</span><br></pre></td></tr></table></figure><p>这里，这个Period对象表示的是从2007年1月1日到2007年12月31日之间的整段时间。只需对Period对象加上或减去一个整数即可达到根据其频率进行位移的效果：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">151</span>]: p + <span class="hljs-number">5</span></span><br><span class="line">Out[<span class="hljs-number">151</span>]: Period(<span class="hljs-string">'2012'</span>, <span class="hljs-string">'A-DEC'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">152</span>]: p - <span class="hljs-number">2</span></span><br><span class="line">Out[<span class="hljs-number">152</span>]: Period(<span class="hljs-string">'2005'</span>, <span class="hljs-string">'A-DEC'</span>)</span><br></pre></td></tr></table></figure><p>如果两个Period对象拥有相同的频率，则它们的差就是它们之间的单位数量：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">153</span>]: pd.Period(<span class="hljs-string">'2014'</span>, freq=<span class="hljs-string">'A-DEC'</span>) - p</span><br><span class="line">Out[<span class="hljs-number">153</span>]: <span class="hljs-number">7</span></span><br></pre></td></tr></table></figure><p>period_range函数可用于创建规则的时期范围：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">154</span>]: rng = pd.period_range(<span class="hljs-string">'2000-01-01'</span>, <span class="hljs-string">'2000-06-30'</span>, freq=<span class="hljs-string">'M'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">155</span>]: rng</span><br><span class="line">Out[<span class="hljs-number">155</span>]: PeriodIndex([<span class="hljs-string">'2000-01'</span>, <span class="hljs-string">'2000-02'</span>, <span class="hljs-string">'2000-03'</span>, <span class="hljs-string">'2000-04'</span>, <span class="hljs-string">'2000-05'</span>, <span class="hljs-string">'20</span></span><br><span class="line"><span class="hljs-string">00-06'</span>], dtype=<span class="hljs-string">'period[M]'</span>, freq=<span class="hljs-string">'M'</span>)</span><br></pre></td></tr></table></figure><p>PeriodIndex类保存了一组Period，它可以在任何pandas数据结构中被用作轴索引：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">156</span>]: pd.Series(np.random.randn(<span class="hljs-number">6</span>), index=rng)</span><br><span class="line">Out[<span class="hljs-number">156</span>]: </span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span>   <span class="hljs-number">-0.514551</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-02</span>   <span class="hljs-number">-0.559782</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-03</span>   <span class="hljs-number">-0.783408</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-04</span>   <span class="hljs-number">-1.797685</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-05</span>   <span class="hljs-number">-0.172670</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-06</span>    <span class="hljs-number">0.680215</span></span><br><span class="line">Freq: M, dtype: float64</span><br></pre></td></tr></table></figure><p>如果你有一个字符串数组，你也可以使用PeriodIndex类：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">157</span>]: values = [<span class="hljs-string">'2001Q3'</span>, <span class="hljs-string">'2002Q2'</span>, <span class="hljs-string">'2003Q1'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">158</span>]: index = pd.PeriodIndex(values, freq=<span class="hljs-string">'Q-DEC'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">159</span>]: index</span><br><span class="line">Out[<span class="hljs-number">159</span>]: PeriodIndex([<span class="hljs-string">'2001Q3'</span>, <span class="hljs-string">'2002Q2'</span>, <span class="hljs-string">'2003Q1'</span>], dtype=<span class="hljs-string">'period[Q-DEC]'</span>, freq</span><br><span class="line">=<span class="hljs-string">'Q-DEC'</span>)</span><br></pre></td></tr></table></figure><h2 id="时期的频率转换"><a href="#时期的频率转换" class="headerlink" title="时期的频率转换"></a>时期的频率转换</h2><p>Period和PeriodIndex对象都可以通过其asfreq方法被转换成别的频率。假设我们有一个年度时期，希望将其转换为当年年初或年末的一个月度时期。该任务非常简单：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">160</span>]: p = pd.Period(<span class="hljs-string">'2007'</span>, freq=<span class="hljs-string">'A-DEC'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">161</span>]: p</span><br><span class="line">Out[<span class="hljs-number">161</span>]: Period(<span class="hljs-string">'2007'</span>, <span class="hljs-string">'A-DEC'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">162</span>]: p.asfreq(<span class="hljs-string">'M'</span>, how=<span class="hljs-string">'start'</span>)</span><br><span class="line">Out[<span class="hljs-number">162</span>]: Period(<span class="hljs-string">'2007-01'</span>, <span class="hljs-string">'M'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">163</span>]: p.asfreq(<span class="hljs-string">'M'</span>, how=<span class="hljs-string">'end'</span>)</span><br><span class="line">Out[<span class="hljs-number">163</span>]: Period(<span class="hljs-string">'2007-12'</span>, <span class="hljs-string">'M'</span>)</span><br></pre></td></tr></table></figure><p>你可以将Period(‘2007’,’A-DEC’)看做一个被划分为多个月度时期的时间段中的游标。图11-1对此进行了说明。对于一个不以12月结束的财政年度，月度子时期的归属情况就不一样了：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">164</span>]: p = pd.Period(<span class="hljs-string">'2007'</span>, freq=<span class="hljs-string">'A-JUN'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">165</span>]: p</span><br><span class="line">Out[<span class="hljs-number">165</span>]: Period(<span class="hljs-string">'2007'</span>, <span class="hljs-string">'A-JUN'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">166</span>]: p.asfreq(<span class="hljs-string">'M'</span>, <span class="hljs-string">'start'</span>)</span><br><span class="line">Out[<span class="hljs-number">166</span>]: Period(<span class="hljs-string">'2006-07'</span>, <span class="hljs-string">'M'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">167</span>]: p.asfreq(<span class="hljs-string">'M'</span>, <span class="hljs-string">'end'</span>)</span><br><span class="line">Out[<span class="hljs-number">167</span>]: Period(<span class="hljs-string">'2007-06'</span>, <span class="hljs-string">'M'</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-d201200d0e65676f.webp" alt="img"></p><p>图11-1 Period频率转换示例</p><p>在将高频率转换为低频率时，超时期（superperiod）是由子时期（subperiod）所属的位置决定的。例如，在A-JUN频率中，月份“2007年8月”实际上是属于周期“2008年”的：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">168</span>]: p = pd.Period(<span class="hljs-string">'Aug-2007'</span>, <span class="hljs-string">'M'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">169</span>]: p.asfreq(<span class="hljs-string">'A-JUN'</span>)</span><br><span class="line">Out[<span class="hljs-number">169</span>]: Period(<span class="hljs-string">'2008'</span>, <span class="hljs-string">'A-JUN'</span>)</span><br></pre></td></tr></table></figure><p>完整的PeriodIndex或TimeSeries的频率转换方式也是如此：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">170</span>]: rng = pd.period_range(<span class="hljs-string">'2006'</span>, <span class="hljs-string">'2009'</span>, freq=<span class="hljs-string">'A-DEC'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">171</span>]: ts = pd.Series(np.random.randn(len(rng)), index=rng)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">172</span>]: ts</span><br><span class="line">Out[<span class="hljs-number">172</span>]: </span><br><span class="line"><span class="hljs-number">2006</span>    <span class="hljs-number">1.607578</span></span><br><span class="line"><span class="hljs-number">2007</span>    <span class="hljs-number">0.200381</span></span><br><span class="line"><span class="hljs-number">2008</span>   <span class="hljs-number">-0.834068</span></span><br><span class="line"><span class="hljs-number">2009</span>   <span class="hljs-number">-0.302988</span></span><br><span class="line">Freq: A-DEC, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">173</span>]: ts.asfreq(<span class="hljs-string">'M'</span>, how=<span class="hljs-string">'start'</span>)</span><br><span class="line">Out[<span class="hljs-number">173</span>]: </span><br><span class="line"><span class="hljs-number">2006</span><span class="hljs-number">-01</span>    <span class="hljs-number">1.607578</span></span><br><span class="line"><span class="hljs-number">2007</span><span class="hljs-number">-01</span>    <span class="hljs-number">0.200381</span></span><br><span class="line"><span class="hljs-number">2008</span><span class="hljs-number">-01</span>   <span class="hljs-number">-0.834068</span></span><br><span class="line"><span class="hljs-number">2009</span><span class="hljs-number">-01</span>   <span class="hljs-number">-0.302988</span></span><br><span class="line">Freq: M, dtype: float64</span><br></pre></td></tr></table></figure><p>这里，根据年度时期的第一个月，每年的时期被取代为每月的时期。如果我们想要每年的最后一个工作日，我们可以使用“B”频率，并指明想要该时期的末尾：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">174</span>]: ts.asfreq(<span class="hljs-string">'B'</span>, how=<span class="hljs-string">'end'</span>)</span><br><span class="line"></span><br><span class="line">Out[<span class="hljs-number">174</span>]: </span><br><span class="line"><span class="hljs-number">2006</span><span class="hljs-number">-12</span><span class="hljs-number">-29</span>    <span class="hljs-number">1.607578</span></span><br><span class="line"><span class="hljs-number">2007</span><span class="hljs-number">-12</span><span class="hljs-number">-31</span>    <span class="hljs-number">0.200381</span></span><br><span class="line"><span class="hljs-number">2008</span><span class="hljs-number">-12</span><span class="hljs-number">-31</span>   <span class="hljs-number">-0.834068</span></span><br><span class="line"><span class="hljs-number">2009</span><span class="hljs-number">-12</span><span class="hljs-number">-31</span>   <span class="hljs-number">-0.302988</span></span><br><span class="line">Freq: B, dtype: float64</span><br></pre></td></tr></table></figure><h2 id="按季度计算的时期频率"><a href="#按季度计算的时期频率" class="headerlink" title="按季度计算的时期频率"></a>按季度计算的时期频率</h2><p>季度型数据在会计、金融等领域中很常见。许多季度型数据都会涉及“财年末”的概念，通常是一年12个月中某月的最后一个日历日或工作日。就这一点来说，时期”2012Q4”根据财年末的不同会有不同的含义。pandas支持12种可能的季度型频率，即Q-JAN到Q-DEC：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">175</span>]: p = pd.Period(<span class="hljs-string">'2012Q4'</span>, freq=<span class="hljs-string">'Q-JAN'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">176</span>]: p</span><br><span class="line">Out[<span class="hljs-number">176</span>]: Period(<span class="hljs-string">'2012Q4'</span>, <span class="hljs-string">'Q-JAN'</span>)</span><br></pre></td></tr></table></figure><p>在以1月结束的财年中，2012Q4是从11月到1月（将其转换为日型频率就明白了）。图11-2对此进行了说明：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">177</span>]: p.asfreq(<span class="hljs-string">'D'</span>, <span class="hljs-string">'start'</span>)</span><br><span class="line">Out[<span class="hljs-number">177</span>]: Period(<span class="hljs-string">'2011-11-01'</span>, <span class="hljs-string">'D'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">178</span>]: p.asfreq(<span class="hljs-string">'D'</span>, <span class="hljs-string">'end'</span>)</span><br><span class="line">Out[<span class="hljs-number">178</span>]: Period(<span class="hljs-string">'2012-01-31'</span>, <span class="hljs-string">'D'</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-e2e1d52c9766f6ff.webp" alt="img"></p><p>图11.2 不同季度型频率之间的转换</p><p>因此，Period之间的算术运算会非常简单。例如，要获取该季度倒数第二个工作日下午4点的时间戳，你可以这样：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">179</span>]: p4pm = (p.asfreq(<span class="hljs-string">'B'</span>, <span class="hljs-string">'e'</span>) - <span class="hljs-number">1</span>).asfreq(<span class="hljs-string">'T'</span>, <span class="hljs-string">'s'</span>) + <span class="hljs-number">16</span> * <span class="hljs-number">60</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">180</span>]: p4pm</span><br><span class="line">Out[<span class="hljs-number">180</span>]: Period(<span class="hljs-string">'2012-01-30 16:00'</span>, <span class="hljs-string">'T'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">181</span>]: p4pm.to_timestamp()</span><br><span class="line">Out[<span class="hljs-number">181</span>]: Timestamp(<span class="hljs-string">'2012-01-30 16:00:00'</span>)</span><br></pre></td></tr></table></figure><p>period_range可用于生成季度型范围。季度型范围的算术运算也跟上面是一样的：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">182</span>]: rng = pd.period_range(<span class="hljs-string">'2011Q3'</span>, <span class="hljs-string">'2012Q4'</span>, freq=<span class="hljs-string">'Q-JAN'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">183</span>]: ts = pd.Series(np.arange(len(rng)), index=rng)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">184</span>]: ts</span><br><span class="line">Out[<span class="hljs-number">184</span>]: </span><br><span class="line"><span class="hljs-number">2011</span>Q3    <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-number">2011</span>Q4    <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-number">2012</span>Q1    <span class="hljs-number">2</span></span><br><span class="line"><span class="hljs-number">2012</span>Q2    <span class="hljs-number">3</span></span><br><span class="line"><span class="hljs-number">2012</span>Q3    <span class="hljs-number">4</span></span><br><span class="line"><span class="hljs-number">2012</span>Q4    <span class="hljs-number">5</span></span><br><span class="line">Freq: Q-JAN, dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">185</span>]: new_rng = (rng.asfreq(<span class="hljs-string">'B'</span>, <span class="hljs-string">'e'</span>) - <span class="hljs-number">1</span>).asfreq(<span class="hljs-string">'T'</span>, <span class="hljs-string">'s'</span>) + <span class="hljs-number">16</span> * <span class="hljs-number">60</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">186</span>]: ts.index = new_rng.to_timestamp()</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">187</span>]: ts</span><br><span class="line">Out[<span class="hljs-number">187</span>]:</span><br><span class="line"><span class="hljs-number">2010</span><span class="hljs-number">-10</span><span class="hljs-number">-28</span> <span class="hljs-number">16</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>    <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-01</span><span class="hljs-number">-28</span> <span class="hljs-number">16</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>    <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-04</span><span class="hljs-number">-28</span> <span class="hljs-number">16</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>    <span class="hljs-number">2</span></span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-07</span><span class="hljs-number">-28</span> <span class="hljs-number">16</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>    <span class="hljs-number">3</span></span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-10</span><span class="hljs-number">-28</span> <span class="hljs-number">16</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>    <span class="hljs-number">4</span></span><br><span class="line"><span class="hljs-number">2012</span><span class="hljs-number">-01</span><span class="hljs-number">-30</span> <span class="hljs-number">16</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>    <span class="hljs-number">5</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><h2 id="将Timestamp转换为Period（及其反向过程）"><a href="#将Timestamp转换为Period（及其反向过程）" class="headerlink" title="将Timestamp转换为Period（及其反向过程）"></a>将Timestamp转换为Period（及其反向过程）</h2><p>通过使用to_period方法，可以将由时间戳索引的Series和DataFrame对象转换为以时期索引：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">188</span>]: rng = pd.date_range(<span class="hljs-string">'2000-01-01'</span>, periods=<span class="hljs-number">3</span>, freq=<span class="hljs-string">'M'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">189</span>]: ts = pd.Series(np.random.randn(<span class="hljs-number">3</span>), index=rng)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">190</span>]: ts</span><br><span class="line">Out[<span class="hljs-number">190</span>]: </span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-31</span>    <span class="hljs-number">1.663261</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-02</span><span class="hljs-number">-29</span>   <span class="hljs-number">-0.996206</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-03</span><span class="hljs-number">-31</span>    <span class="hljs-number">1.521760</span></span><br><span class="line">Freq: M, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">191</span>]: pts = ts.to_period()</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">192</span>]: pts</span><br><span class="line">Out[<span class="hljs-number">192</span>]: </span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span>    <span class="hljs-number">1.663261</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-02</span>   <span class="hljs-number">-0.996206</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-03</span>    <span class="hljs-number">1.521760</span></span><br><span class="line">Freq: M, dtype: float64</span><br></pre></td></tr></table></figure><p>由于时期指的是非重叠时间区间，因此对于给定的频率，一个时间戳只能属于一个时期。新PeriodIndex的频率默认是从时间戳推断而来的，你也可以指定任何别的频率。结果中允许存在重复时期：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">193</span>]: rng = pd.date_range(<span class="hljs-string">'1/29/2000'</span>, periods=<span class="hljs-number">6</span>, freq=<span class="hljs-string">'D'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">194</span>]: ts2 = pd.Series(np.random.randn(<span class="hljs-number">6</span>), index=rng)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">195</span>]: ts2</span><br><span class="line">Out[<span class="hljs-number">195</span>]: </span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-29</span>    <span class="hljs-number">0.244175</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-30</span>    <span class="hljs-number">0.423331</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-31</span>   <span class="hljs-number">-0.654040</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-02</span><span class="hljs-number">-01</span>    <span class="hljs-number">2.089154</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-02</span><span class="hljs-number">-02</span>   <span class="hljs-number">-0.060220</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-02</span><span class="hljs-number">-03</span>   <span class="hljs-number">-0.167933</span></span><br><span class="line">Freq: D, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">196</span>]: ts2.to_period(<span class="hljs-string">'M'</span>)</span><br><span class="line">Out[<span class="hljs-number">196</span>]: </span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span>    <span class="hljs-number">0.244175</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span>    <span class="hljs-number">0.423331</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span>   <span class="hljs-number">-0.654040</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-02</span>    <span class="hljs-number">2.089154</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-02</span>   <span class="hljs-number">-0.060220</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-02</span>   <span class="hljs-number">-0.167933</span></span><br><span class="line">Freq: M, dtype: float64</span><br></pre></td></tr></table></figure><p>要转换回时间戳，使用to_timestamp即可：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">197</span>]: pts = ts2.to_period()</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">198</span>]: pts</span><br><span class="line">Out[<span class="hljs-number">198</span>]: </span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-29</span>    <span class="hljs-number">0.244175</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-30</span>    <span class="hljs-number">0.423331</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-31</span>   <span class="hljs-number">-0.654040</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-02</span><span class="hljs-number">-01</span>    <span class="hljs-number">2.089154</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-02</span><span class="hljs-number">-02</span>   <span class="hljs-number">-0.060220</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-02</span><span class="hljs-number">-03</span>   <span class="hljs-number">-0.167933</span></span><br><span class="line">Freq: D, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">199</span>]: pts.to_timestamp(how=<span class="hljs-string">'end'</span>)</span><br><span class="line">Out[<span class="hljs-number">199</span>]: </span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-29</span>    <span class="hljs-number">0.244175</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-30</span>    <span class="hljs-number">0.423331</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-31</span>   <span class="hljs-number">-0.654040</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-02</span><span class="hljs-number">-01</span>    <span class="hljs-number">2.089154</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-02</span><span class="hljs-number">-02</span>   <span class="hljs-number">-0.060220</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-02</span><span class="hljs-number">-03</span>   <span class="hljs-number">-0.167933</span></span><br><span class="line">Freq: D, dtype: float64</span><br></pre></td></tr></table></figure><h2 id="通过数组创建PeriodIndex"><a href="#通过数组创建PeriodIndex" class="headerlink" title="通过数组创建PeriodIndex"></a>通过数组创建PeriodIndex</h2><p>固定频率的数据集通常会将时间信息分开存放在多个列中。例如，在下面这个宏观经济数据集中，年度和季度就分别存放在不同的列中：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">200</span>]: data = pd.read_csv(<span class="hljs-string">'examples/macrodata.csv'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">201</span>]: data.head(<span class="hljs-number">5</span>)</span><br><span class="line">Out[<span class="hljs-number">201</span>]: </span><br><span class="line">     year  quarter   realgdp  realcons  realinv  realgovt  realdpi    cpi  \</span><br><span class="line"><span class="hljs-number">0</span>  <span class="hljs-number">1959.0</span>      <span class="hljs-number">1.0</span>  <span class="hljs-number">2710.349</span>    <span class="hljs-number">1707.4</span>  <span class="hljs-number">286.898</span>   <span class="hljs-number">470.045</span>   <span class="hljs-number">1886.9</span>  <span class="hljs-number">28.98</span>   </span><br><span class="line"><span class="hljs-number">1</span>  <span class="hljs-number">1959.0</span>      <span class="hljs-number">2.0</span>  <span class="hljs-number">2778.801</span>    <span class="hljs-number">1733.7</span>  <span class="hljs-number">310.859</span>   <span class="hljs-number">481.301</span>   <span class="hljs-number">1919.7</span>  <span class="hljs-number">29.15</span>   </span><br><span class="line"><span class="hljs-number">2</span>  <span class="hljs-number">1959.0</span>      <span class="hljs-number">3.0</span>  <span class="hljs-number">2775.488</span>    <span class="hljs-number">1751.8</span>  <span class="hljs-number">289.226</span>   <span class="hljs-number">491.260</span>   <span class="hljs-number">1916.4</span>  <span class="hljs-number">29.35</span>   </span><br><span class="line"><span class="hljs-number">3</span>  <span class="hljs-number">1959.0</span>      <span class="hljs-number">4.0</span>  <span class="hljs-number">2785.204</span>    <span class="hljs-number">1753.7</span>  <span class="hljs-number">299.356</span>   <span class="hljs-number">484.052</span>   <span class="hljs-number">1931.3</span>  <span class="hljs-number">29.37</span>   </span><br><span class="line"><span class="hljs-number">4</span>  <span class="hljs-number">1960.0</span>      <span class="hljs-number">1.0</span>  <span class="hljs-number">2847.699</span>    <span class="hljs-number">1770.5</span>  <span class="hljs-number">331.722</span>   <span class="hljs-number">462.199</span>   <span class="hljs-number">1955.5</span>  <span class="hljs-number">29.54</span>   </span><br><span class="line">      m1  tbilrate  unemp      pop  infl  realint  </span><br><span class="line"><span class="hljs-number">0</span>  <span class="hljs-number">139.7</span>      <span class="hljs-number">2.82</span>    <span class="hljs-number">5.8</span>  <span class="hljs-number">177.146</span>  <span class="hljs-number">0.00</span>     <span class="hljs-number">0.00</span>  </span><br><span class="line"><span class="hljs-number">1</span>  <span class="hljs-number">141.7</span>      <span class="hljs-number">3.08</span>    <span class="hljs-number">5.1</span>  <span class="hljs-number">177.830</span>  <span class="hljs-number">2.34</span>     <span class="hljs-number">0.74</span>  </span><br><span class="line"><span class="hljs-number">2</span>  <span class="hljs-number">140.5</span>      <span class="hljs-number">3.82</span>    <span class="hljs-number">5.3</span>  <span class="hljs-number">178.657</span>  <span class="hljs-number">2.74</span>     <span class="hljs-number">1.09</span>  </span><br><span class="line"><span class="hljs-number">3</span>  <span class="hljs-number">140.0</span>      <span class="hljs-number">4.33</span>    <span class="hljs-number">5.6</span>  <span class="hljs-number">179.386</span>  <span class="hljs-number">0.27</span>     <span class="hljs-number">4.06</span>  </span><br><span class="line"><span class="hljs-number">4</span>  <span class="hljs-number">139.6</span>      <span class="hljs-number">3.50</span>    <span class="hljs-number">5.2</span>  <span class="hljs-number">180.007</span>  <span class="hljs-number">2.31</span>     <span class="hljs-number">1.19</span>  </span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">202</span>]: data.year</span><br><span class="line">Out[<span class="hljs-number">202</span>]: </span><br><span class="line"><span class="hljs-number">0</span>      <span class="hljs-number">1959.0</span></span><br><span class="line"><span class="hljs-number">1</span>      <span class="hljs-number">1959.0</span></span><br><span class="line"><span class="hljs-number">2</span>      <span class="hljs-number">1959.0</span></span><br><span class="line"><span class="hljs-number">3</span>      <span class="hljs-number">1959.0</span></span><br><span class="line"><span class="hljs-number">4</span>      <span class="hljs-number">1960.0</span></span><br><span class="line"><span class="hljs-number">5</span>      <span class="hljs-number">1960.0</span></span><br><span class="line"><span class="hljs-number">6</span>      <span class="hljs-number">1960.0</span></span><br><span class="line"><span class="hljs-number">7</span>      <span class="hljs-number">1960.0</span></span><br><span class="line"><span class="hljs-number">8</span>      <span class="hljs-number">1961.0</span></span><br><span class="line"><span class="hljs-number">9</span>      <span class="hljs-number">1961.0</span></span><br><span class="line">        ...  </span><br><span class="line"><span class="hljs-number">193</span>    <span class="hljs-number">2007.0</span></span><br><span class="line"><span class="hljs-number">194</span>    <span class="hljs-number">2007.0</span></span><br><span class="line"><span class="hljs-number">195</span>    <span class="hljs-number">2007.0</span></span><br><span class="line"><span class="hljs-number">196</span>    <span class="hljs-number">2008.0</span></span><br><span class="line"><span class="hljs-number">197</span>    <span class="hljs-number">2008.0</span></span><br><span class="line"><span class="hljs-number">198</span>    <span class="hljs-number">2008.0</span></span><br><span class="line"><span class="hljs-number">199</span>    <span class="hljs-number">2008.0</span></span><br><span class="line"><span class="hljs-number">200</span>    <span class="hljs-number">2009.0</span></span><br><span class="line"><span class="hljs-number">201</span>    <span class="hljs-number">2009.0</span></span><br><span class="line"><span class="hljs-number">202</span>    <span class="hljs-number">2009.0</span></span><br><span class="line">Name: year, Length: <span class="hljs-number">203</span>, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">203</span>]: data.quarter</span><br><span class="line">Out[<span class="hljs-number">203</span>]: </span><br><span class="line"><span class="hljs-number">0</span>      <span class="hljs-number">1.0</span></span><br><span class="line"><span class="hljs-number">1</span>      <span class="hljs-number">2.0</span></span><br><span class="line"><span class="hljs-number">2</span>      <span class="hljs-number">3.0</span></span><br><span class="line"><span class="hljs-number">3</span>      <span class="hljs-number">4.0</span></span><br><span class="line"><span class="hljs-number">4</span>      <span class="hljs-number">1.0</span></span><br><span class="line"><span class="hljs-number">5</span>      <span class="hljs-number">2.0</span></span><br><span class="line"><span class="hljs-number">6</span>      <span class="hljs-number">3.0</span></span><br><span class="line"><span class="hljs-number">7</span>      <span class="hljs-number">4.0</span></span><br><span class="line"><span class="hljs-number">8</span>      <span class="hljs-number">1.0</span></span><br><span class="line"><span class="hljs-number">9</span>      <span class="hljs-number">2.0</span></span><br><span class="line">      ... </span><br><span class="line"><span class="hljs-number">193</span>    <span class="hljs-number">2.0</span></span><br><span class="line"><span class="hljs-number">194</span>    <span class="hljs-number">3.0</span></span><br><span class="line"><span class="hljs-number">195</span>    <span class="hljs-number">4.0</span></span><br><span class="line"><span class="hljs-number">196</span>    <span class="hljs-number">1.0</span></span><br><span class="line"><span class="hljs-number">197</span>    <span class="hljs-number">2.0</span></span><br><span class="line"><span class="hljs-number">198</span>    <span class="hljs-number">3.0</span></span><br><span class="line"><span class="hljs-number">199</span>    <span class="hljs-number">4.0</span></span><br><span class="line"><span class="hljs-number">200</span>    <span class="hljs-number">1.0</span></span><br><span class="line"><span class="hljs-number">201</span>    <span class="hljs-number">2.0</span></span><br><span class="line"><span class="hljs-number">202</span>    <span class="hljs-number">3.0</span></span><br><span class="line">Name: quarter, Length: <span class="hljs-number">203</span>, dtype: float64</span><br></pre></td></tr></table></figure><p>通过将这些数组以及一个频率传入PeriodIndex，就可以将它们合并成DataFrame的一个索引：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">204</span>]: index = pd.PeriodIndex(year=data.year, quarter=data.quarter,</span><br><span class="line">   .....:                        freq=<span class="hljs-string">'Q-DEC'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">205</span>]: index</span><br><span class="line">Out[<span class="hljs-number">205</span>]: </span><br><span class="line">PeriodIndex([<span class="hljs-string">'1959Q1'</span>, <span class="hljs-string">'1959Q2'</span>, <span class="hljs-string">'1959Q3'</span>, <span class="hljs-string">'1959Q4'</span>, <span class="hljs-string">'1960Q1'</span>, <span class="hljs-string">'1960Q2'</span>,</span><br><span class="line">             <span class="hljs-string">'1960Q3'</span>, <span class="hljs-string">'1960Q4'</span>, <span class="hljs-string">'1961Q1'</span>, <span class="hljs-string">'1961Q2'</span>,</span><br><span class="line">             ...</span><br><span class="line">             <span class="hljs-string">'2007Q2'</span>, <span class="hljs-string">'2007Q3'</span>, <span class="hljs-string">'2007Q4'</span>, <span class="hljs-string">'2008Q1'</span>, <span class="hljs-string">'2008Q2'</span>, <span class="hljs-string">'2008Q3'</span>,</span><br><span class="line">             <span class="hljs-string">'2008Q4'</span>, <span class="hljs-string">'2009Q1'</span>, <span class="hljs-string">'2009Q2'</span>, <span class="hljs-string">'2009Q3'</span>],</span><br><span class="line">            dtype=<span class="hljs-string">'period[Q-DEC]'</span>, length=<span class="hljs-number">203</span>, freq=<span class="hljs-string">'Q-DEC'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">206</span>]: data.index = index</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">207</span>]: data.infl</span><br><span class="line">Out[<span class="hljs-number">207</span>]: </span><br><span class="line"><span class="hljs-number">1959</span>Q1    <span class="hljs-number">0.00</span></span><br><span class="line"><span class="hljs-number">1959</span>Q2    <span class="hljs-number">2.34</span></span><br><span class="line"><span class="hljs-number">1959</span>Q3    <span class="hljs-number">2.74</span></span><br><span class="line"><span class="hljs-number">1959</span>Q4    <span class="hljs-number">0.27</span></span><br><span class="line"><span class="hljs-number">1960</span>Q1    <span class="hljs-number">2.31</span></span><br><span class="line"><span class="hljs-number">1960</span>Q2    <span class="hljs-number">0.14</span></span><br><span class="line"><span class="hljs-number">1960</span>Q3    <span class="hljs-number">2.70</span></span><br><span class="line"><span class="hljs-number">1960</span>Q4    <span class="hljs-number">1.21</span></span><br><span class="line"><span class="hljs-number">1961</span>Q1   <span class="hljs-number">-0.40</span></span><br><span class="line"><span class="hljs-number">1961</span>Q2    <span class="hljs-number">1.47</span></span><br><span class="line">          ... </span><br><span class="line"><span class="hljs-number">2007</span>Q2    <span class="hljs-number">2.75</span></span><br><span class="line"><span class="hljs-number">2007</span>Q3    <span class="hljs-number">3.45</span></span><br><span class="line"><span class="hljs-number">2007</span>Q4    <span class="hljs-number">6.38</span></span><br><span class="line"><span class="hljs-number">2008</span>Q1    <span class="hljs-number">2.82</span></span><br><span class="line"><span class="hljs-number">2008</span>Q2    <span class="hljs-number">8.53</span></span><br><span class="line"><span class="hljs-number">2008</span>Q3   <span class="hljs-number">-3.16</span></span><br><span class="line"><span class="hljs-number">2008</span>Q4   <span class="hljs-number">-8.79</span></span><br><span class="line"><span class="hljs-number">2009</span>Q1    <span class="hljs-number">0.94</span></span><br><span class="line"><span class="hljs-number">2009</span>Q2    <span class="hljs-number">3.37</span></span><br><span class="line"><span class="hljs-number">2009</span>Q3    <span class="hljs-number">3.56</span></span><br><span class="line">Freq: Q-DEC, Name: infl, Length: <span class="hljs-number">203</span>, dtype: float64</span><br></pre></td></tr></table></figure><h1 id="11-6-重采样及频率转换"><a href="#11-6-重采样及频率转换" class="headerlink" title="11.6 重采样及频率转换"></a>11.6 重采样及频率转换</h1><p>重采样（resampling）指的是将时间序列从一个频率转换到另一个频率的处理过程。将高频率数据聚合到低频率称为降采样（downsampling），而将低频率数据转换到高频率则称为升采样（upsampling）。并不是所有的重采样都能被划分到这两个大类中。例如，将W-WED（每周三）转换为W-FRI既不是降采样也不是升采样。</p><p>pandas对象都带有一个resample方法，它是各种频率转换工作的主力函数。resample有一个类似于groupby的API，调用resample可以分组数据，然后会调用一个聚合函数：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">208</span>]: rng = pd.date_range(<span class="hljs-string">'2000-01-01'</span>, periods=<span class="hljs-number">100</span>, freq=<span class="hljs-string">'D'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">209</span>]: ts = pd.Series(np.random.randn(len(rng)), index=rng)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">210</span>]: ts</span><br><span class="line">Out[<span class="hljs-number">210</span>]: </span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span>    <span class="hljs-number">0.631634</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-02</span>   <span class="hljs-number">-1.594313</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-03</span>   <span class="hljs-number">-1.519937</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-04</span>    <span class="hljs-number">1.108752</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-05</span>    <span class="hljs-number">1.255853</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-06</span>   <span class="hljs-number">-0.024330</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-07</span>   <span class="hljs-number">-2.047939</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-08</span>   <span class="hljs-number">-0.272657</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-09</span>   <span class="hljs-number">-1.692615</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-10</span>    <span class="hljs-number">1.423830</span></span><br><span class="line">                ...   </span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-03</span><span class="hljs-number">-31</span>   <span class="hljs-number">-0.007852</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-04</span><span class="hljs-number">-01</span>   <span class="hljs-number">-1.638806</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-04</span><span class="hljs-number">-02</span>    <span class="hljs-number">1.401227</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-04</span><span class="hljs-number">-03</span>    <span class="hljs-number">1.758539</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-04</span><span class="hljs-number">-04</span>    <span class="hljs-number">0.628932</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-04</span><span class="hljs-number">-05</span>   <span class="hljs-number">-0.423776</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-04</span><span class="hljs-number">-06</span>    <span class="hljs-number">0.789740</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-04</span><span class="hljs-number">-07</span>    <span class="hljs-number">0.937568</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-04</span><span class="hljs-number">-08</span>   <span class="hljs-number">-2.253294</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-04</span><span class="hljs-number">-09</span>   <span class="hljs-number">-1.772919</span></span><br><span class="line">Freq: D, Length: <span class="hljs-number">100</span>, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">211</span>]: ts.resample(<span class="hljs-string">'M'</span>).mean()</span><br><span class="line">Out[<span class="hljs-number">211</span>]: </span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-31</span>   <span class="hljs-number">-0.165893</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-02</span><span class="hljs-number">-29</span>    <span class="hljs-number">0.078606</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-03</span><span class="hljs-number">-31</span>    <span class="hljs-number">0.223811</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-04</span><span class="hljs-number">-30</span>   <span class="hljs-number">-0.063643</span></span><br><span class="line">Freq: M, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">212</span>]: ts.resample(<span class="hljs-string">'M'</span>, kind=<span class="hljs-string">'period'</span>).mean()</span><br><span class="line">Out[<span class="hljs-number">212</span>]: </span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span>   <span class="hljs-number">-0.165893</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-02</span>    <span class="hljs-number">0.078606</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-03</span>    <span class="hljs-number">0.223811</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-04</span>   <span class="hljs-number">-0.063643</span></span><br><span class="line">Freq: M, dtype: float64</span><br></pre></td></tr></table></figure><p>resample是一个灵活高效的方法，可用于处理非常大的时间序列。我将通过一系列的示例说明其用法。表11-5总结它的一些选项。</p><p>表11-5 resample方法的参数</p><p><img src="/images/blog/7178691-b40a57086c904e83.webp" alt="img"></p><h2 id="降采样"><a href="#降采样" class="headerlink" title="降采样"></a>降采样</h2><p>将数据聚合到规律的低频率是一件非常普通的时间序列处理任务。待聚合的数据不必拥有固定的频率，期望的频率会自动定义聚合的面元边界，这些面元用于将时间序列拆分为多个片段。例如，要转换到月度频率（’M’或’BM’），数据需要被划分到多个单月时间段中。各时间段都是半开放的。一个数据点只能属于一个时间段，所有时间段的并集必须能组成整个时间帧。在用resample对数据进行降采样时，需要考虑两样东西：</p><ul><li>各区间哪边是闭合的。</li><li>如何标记各个聚合面元，用区间的开头还是末尾。</li></ul><p>为了说明，我们来看一些“1分钟”数据：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">213</span>]: rng = pd.date_range(<span class="hljs-string">'2000-01-01'</span>, periods=<span class="hljs-number">12</span>, freq=<span class="hljs-string">'T'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">214</span>]: ts = pd.Series(np.arange(<span class="hljs-number">12</span>), index=rng)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">215</span>]: ts</span><br><span class="line">Out[<span class="hljs-number">215</span>]: </span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>     <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span> <span class="hljs-number">00</span>:<span class="hljs-number">01</span>:<span class="hljs-number">00</span>     <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span> <span class="hljs-number">00</span>:<span class="hljs-number">02</span>:<span class="hljs-number">00</span>     <span class="hljs-number">2</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span> <span class="hljs-number">00</span>:<span class="hljs-number">03</span>:<span class="hljs-number">00</span>     <span class="hljs-number">3</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span> <span class="hljs-number">00</span>:<span class="hljs-number">04</span>:<span class="hljs-number">00</span>     <span class="hljs-number">4</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span> <span class="hljs-number">00</span>:<span class="hljs-number">05</span>:<span class="hljs-number">00</span>     <span class="hljs-number">5</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span> <span class="hljs-number">00</span>:<span class="hljs-number">06</span>:<span class="hljs-number">00</span>     <span class="hljs-number">6</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span> <span class="hljs-number">00</span>:<span class="hljs-number">07</span>:<span class="hljs-number">00</span>     <span class="hljs-number">7</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span> <span class="hljs-number">00</span>:<span class="hljs-number">08</span>:<span class="hljs-number">00</span>     <span class="hljs-number">8</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span> <span class="hljs-number">00</span>:<span class="hljs-number">09</span>:<span class="hljs-number">00</span>     <span class="hljs-number">9</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span> <span class="hljs-number">00</span>:<span class="hljs-number">10</span>:<span class="hljs-number">00</span>    <span class="hljs-number">10</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span> <span class="hljs-number">00</span>:<span class="hljs-number">11</span>:<span class="hljs-number">00</span>    <span class="hljs-number">11</span></span><br><span class="line">Freq: T, dtype: int64</span><br></pre></td></tr></table></figure><p>假设你想要通过求和的方式将这些数据聚合到“5分钟”块中：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">216</span>]: ts.resample(<span class="hljs-string">'5min'</span>, closed=<span class="hljs-string">'right'</span>).sum()</span><br><span class="line">Out[<span class="hljs-number">216</span>]: </span><br><span class="line"><span class="hljs-number">1999</span><span class="hljs-number">-12</span><span class="hljs-number">-31</span> <span class="hljs-number">23</span>:<span class="hljs-number">55</span>:<span class="hljs-number">00</span>     <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>    <span class="hljs-number">15</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span> <span class="hljs-number">00</span>:<span class="hljs-number">05</span>:<span class="hljs-number">00</span>    <span class="hljs-number">40</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span> <span class="hljs-number">00</span>:<span class="hljs-number">10</span>:<span class="hljs-number">00</span>    <span class="hljs-number">11</span></span><br><span class="line">Freq: <span class="hljs-number">5</span>T, dtype: int64</span><br></pre></td></tr></table></figure><p>传入的频率将会以“5分钟”的增量定义面元边界。默认情况下，面元的右边界是包含的，因此00:00到00:05的区间中是包含00:05的。传入closed=’left’会让区间以左边界闭合：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">217</span>]: ts.resample(<span class="hljs-string">'5min'</span>, closed=<span class="hljs-string">'right'</span>).sum()</span><br><span class="line">Out[<span class="hljs-number">217</span>]: </span><br><span class="line"><span class="hljs-number">1999</span><span class="hljs-number">-12</span><span class="hljs-number">-31</span> <span class="hljs-number">23</span>:<span class="hljs-number">55</span>:<span class="hljs-number">00</span>     <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>    <span class="hljs-number">15</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span> <span class="hljs-number">00</span>:<span class="hljs-number">05</span>:<span class="hljs-number">00</span>    <span class="hljs-number">40</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span> <span class="hljs-number">00</span>:<span class="hljs-number">10</span>:<span class="hljs-number">00</span>    <span class="hljs-number">11</span></span><br><span class="line">Freq: <span class="hljs-number">5</span>T, dtype: int64</span><br></pre></td></tr></table></figure><p>如你所见，最终的时间序列是以各面元右边界的时间戳进行标记的。传入label=’right’即可用面元的邮编界对其进行标记：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">218</span>]: ts.resample(<span class="hljs-string">'5min'</span>, closed=<span class="hljs-string">'right'</span>, label=<span class="hljs-string">'right'</span>).sum()</span><br><span class="line">Out[<span class="hljs-number">218</span>]: </span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>     <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span> <span class="hljs-number">00</span>:<span class="hljs-number">05</span>:<span class="hljs-number">00</span>    <span class="hljs-number">15</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span> <span class="hljs-number">00</span>:<span class="hljs-number">10</span>:<span class="hljs-number">00</span>    <span class="hljs-number">40</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span> <span class="hljs-number">00</span>:<span class="hljs-number">15</span>:<span class="hljs-number">00</span>    <span class="hljs-number">11</span></span><br><span class="line">Freq: <span class="hljs-number">5</span>T, dtype: int64</span><br></pre></td></tr></table></figure><p>图11-3说明了“1分钟”数据被转换为“5分钟”数据的处理过程。</p><p><img src="/images/blog/7178691-7a77f47844f2ee8c.webp" alt="img"></p><p>图11-3 各种closed、label约定的“5分钟”重采样演示</p><p>最后，你可能希望对结果索引做一些位移，比如从右边界减去一秒以便更容易明白该时间戳到底表示的是哪个区间。只需通过loffset设置一个字符串或日期偏移量即可实现这个目的：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">219</span>]: ts.resample(<span class="hljs-string">'5min'</span>, closed=<span class="hljs-string">'right'</span>,</span><br><span class="line">   .....:             label=<span class="hljs-string">'right'</span>, loffset=<span class="hljs-string">'-1s'</span>).sum()</span><br><span class="line">Out[<span class="hljs-number">219</span>]: </span><br><span class="line"><span class="hljs-number">1999</span><span class="hljs-number">-12</span><span class="hljs-number">-31</span> <span class="hljs-number">23</span>:<span class="hljs-number">59</span>:<span class="hljs-number">59</span>     <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span> <span class="hljs-number">00</span>:<span class="hljs-number">04</span>:<span class="hljs-number">59</span>    <span class="hljs-number">15</span></span><br><span class="line">In [<span class="hljs-number">219</span>]: ts.resample(<span class="hljs-string">'5min'</span>, closed=<span class="hljs-string">'right'</span>,</span><br><span class="line">   .....:             label=<span class="hljs-string">'right'</span>, loffset=<span class="hljs-string">'-1s'</span>).sum()</span><br><span class="line">Out[<span class="hljs-number">219</span>]: </span><br><span class="line"><span class="hljs-number">1999</span><span class="hljs-number">-12</span><span class="hljs-number">-31</span> <span class="hljs-number">23</span>:<span class="hljs-number">59</span>:<span class="hljs-number">59</span>     <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span> <span class="hljs-number">00</span>:<span class="hljs-number">04</span>:<span class="hljs-number">59</span>    <span class="hljs-number">15</span></span><br></pre></td></tr></table></figure><p>此外，也可以通过调用结果对象的shift方法来实现该目的，这样就不需要设置loffset了。</p><h2 id="OHLC重采样"><a href="#OHLC重采样" class="headerlink" title="OHLC重采样"></a>OHLC重采样</h2><p>金融领域中有一种无所不在的时间序列聚合方式，即计算各面元的四个值：第一个值（open，开盘）、最后一个值（close，收盘）、最大值（high，最高）以及最小值（low，最低）。传入how=’ohlc’即可得到一个含有这四种聚合值的DataFrame。整个过程很高效，只需一次扫描即可计算出结果：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">220</span>]: ts.resample(<span class="hljs-string">'5min'</span>).ohlc()</span><br><span class="line">Out[<span class="hljs-number">220</span>]: </span><br><span class="line">                     open  high  low  close</span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>     <span class="hljs-number">0</span>     <span class="hljs-number">4</span>    <span class="hljs-number">0</span>      <span class="hljs-number">4</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span> <span class="hljs-number">00</span>:<span class="hljs-number">05</span>:<span class="hljs-number">00</span>     <span class="hljs-number">5</span>     <span class="hljs-number">9</span>    <span class="hljs-number">5</span>      <span class="hljs-number">9</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span> <span class="hljs-number">00</span>:<span class="hljs-number">10</span>:<span class="hljs-number">00</span>    <span class="hljs-number">10</span>    <span class="hljs-number">11</span>   <span class="hljs-number">10</span>     <span class="hljs-number">11</span></span><br></pre></td></tr></table></figure><h2 id="升采样和插值"><a href="#升采样和插值" class="headerlink" title="升采样和插值"></a>升采样和插值</h2><p>在将数据从低频率转换到高频率时，就不需要聚合了。我们来看一个带有一些周型数据的DataFrame：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">221</span>]: frame = pd.DataFrame(np.random.randn(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>),</span><br><span class="line">   .....:                      index=pd.date_range(<span class="hljs-string">'1/1/2000'</span>, periods=<span class="hljs-number">2</span>,</span><br><span class="line">   .....:                                          freq=<span class="hljs-string">'W-WED'</span>),</span><br><span class="line">   .....:                      columns=[<span class="hljs-string">'Colorado'</span>, <span class="hljs-string">'Texas'</span>, <span class="hljs-string">'New York'</span>, <span class="hljs-string">'Ohio'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">222</span>]: frame</span><br><span class="line">Out[<span class="hljs-number">222</span>]: </span><br><span class="line">            Colorado     Texas  New York      Ohio</span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-05</span> <span class="hljs-number">-0.896431</span>  <span class="hljs-number">0.677263</span>  <span class="hljs-number">0.036503</span>  <span class="hljs-number">0.087102</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-12</span> <span class="hljs-number">-0.046662</span>  <span class="hljs-number">0.927238</span>  <span class="hljs-number">0.482284</span> <span class="hljs-number">-0.867130</span></span><br></pre></td></tr></table></figure><p>当你对这个数据进行聚合，每组只有一个值，这样就会引入缺失值。我们使用asfreq方法转换成高频，不经过聚合：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">223</span>]: df_daily = frame.resample(<span class="hljs-string">'D'</span>).asfreq()</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">224</span>]: df_daily</span><br><span class="line">Out[<span class="hljs-number">224</span>]: </span><br><span class="line">            Colorado     Texas  New York      Ohio</span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-05</span> <span class="hljs-number">-0.896431</span>  <span class="hljs-number">0.677263</span>  <span class="hljs-number">0.036503</span>  <span class="hljs-number">0.087102</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-06</span>       NaN       NaN       NaN       NaN</span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-07</span>       NaN       NaN       NaN       NaN</span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-08</span>       NaN       NaN       NaN       NaN</span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-09</span>       NaN       NaN       NaN       NaN</span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-10</span>       NaN       NaN       NaN       NaN</span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-11</span>       NaN       NaN       NaN       NaN</span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-12</span> <span class="hljs-number">-0.046662</span>  <span class="hljs-number">0.927238</span>  <span class="hljs-number">0.482284</span> <span class="hljs-number">-0.867130</span></span><br></pre></td></tr></table></figure><p>假设你想要用前面的周型值填充“非星期三”。resampling的填充和插值方式跟fillna和reindex的一样：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">225</span>]: frame.resample(<span class="hljs-string">'D'</span>).ffill()</span><br><span class="line">Out[<span class="hljs-number">225</span>]: </span><br><span class="line">            Colorado     Texas  New York      Ohio</span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-05</span> <span class="hljs-number">-0.896431</span>  <span class="hljs-number">0.677263</span>  <span class="hljs-number">0.036503</span>  <span class="hljs-number">0.087102</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-06</span> <span class="hljs-number">-0.896431</span>  <span class="hljs-number">0.677263</span>  <span class="hljs-number">0.036503</span>  <span class="hljs-number">0.087102</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-07</span> <span class="hljs-number">-0.896431</span>  <span class="hljs-number">0.677263</span>  <span class="hljs-number">0.036503</span>  <span class="hljs-number">0.087102</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-08</span> <span class="hljs-number">-0.896431</span>  <span class="hljs-number">0.677263</span>  <span class="hljs-number">0.036503</span>  <span class="hljs-number">0.087102</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-09</span> <span class="hljs-number">-0.896431</span>  <span class="hljs-number">0.677263</span>  <span class="hljs-number">0.036503</span>  <span class="hljs-number">0.087102</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-10</span> <span class="hljs-number">-0.896431</span>  <span class="hljs-number">0.677263</span>  <span class="hljs-number">0.036503</span>  <span class="hljs-number">0.087102</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-11</span> <span class="hljs-number">-0.896431</span>  <span class="hljs-number">0.677263</span>  <span class="hljs-number">0.036503</span>  <span class="hljs-number">0.087102</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-12</span> <span class="hljs-number">-0.046662</span>  <span class="hljs-number">0.927238</span>  <span class="hljs-number">0.482284</span> <span class="hljs-number">-0.867130</span></span><br></pre></td></tr></table></figure><p>同样，这里也可以只填充指定的时期数（目的是限制前面的观测值的持续使用距离）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">226</span>]: frame.resample(<span class="hljs-string">'D'</span>).ffill(limit=<span class="hljs-number">2</span>)</span><br><span class="line">Out[<span class="hljs-number">226</span>]:</span><br><span class="line">            Colorado     Texas  New York      Ohio</span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-05</span> <span class="hljs-number">-0.896431</span>  <span class="hljs-number">0.677263</span>  <span class="hljs-number">0.036503</span>  <span class="hljs-number">0.087102</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-06</span> <span class="hljs-number">-0.896431</span>  <span class="hljs-number">0.677263</span>  <span class="hljs-number">0.036503</span>  <span class="hljs-number">0.087102</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-07</span> <span class="hljs-number">-0.896431</span>  <span class="hljs-number">0.677263</span>  <span class="hljs-number">0.036503</span>  <span class="hljs-number">0.087102</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-08</span>       NaN       NaN       NaN       NaN</span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-09</span>       NaN       NaN       NaN       NaN</span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-10</span>       NaN       NaN       NaN       NaN</span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-11</span>       NaN       NaN       NaN       NaN</span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-12</span> <span class="hljs-number">-0.046662</span>  <span class="hljs-number">0.927238</span>  <span class="hljs-number">0.482284</span> <span class="hljs-number">-0.867130</span></span><br></pre></td></tr></table></figure><p>注意，新的日期索引完全没必要跟旧的重叠：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">227</span>]: frame.resample(<span class="hljs-string">'W-THU'</span>).ffill()</span><br><span class="line">Out[<span class="hljs-number">227</span>]: </span><br><span class="line">            Colorado     Texas  New York      Ohio</span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-06</span> <span class="hljs-number">-0.896431</span>  <span class="hljs-number">0.677263</span>  <span class="hljs-number">0.036503</span>  <span class="hljs-number">0.087102</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span><span class="hljs-number">-13</span> <span class="hljs-number">-0.046662</span>  <span class="hljs-number">0.927238</span>  <span class="hljs-number">0.482284</span> <span class="hljs-number">-0.867130</span></span><br></pre></td></tr></table></figure><h2 id="通过时期进行重采样"><a href="#通过时期进行重采样" class="headerlink" title="通过时期进行重采样"></a>通过时期进行重采样</h2><p>对那些使用时期索引的数据进行重采样与时间戳很像：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">228</span>]: frame = pd.DataFrame(np.random.randn(<span class="hljs-number">24</span>, <span class="hljs-number">4</span>),</span><br><span class="line">   .....:                      index=pd.period_range(<span class="hljs-string">'1-2000'</span>, <span class="hljs-string">'12-2001'</span>,</span><br><span class="line">   .....:                                            freq=<span class="hljs-string">'M'</span>),</span><br><span class="line">   .....:                      columns=[<span class="hljs-string">'Colorado'</span>, <span class="hljs-string">'Texas'</span>, <span class="hljs-string">'New York'</span>, <span class="hljs-string">'Ohio'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">229</span>]: frame[:<span class="hljs-number">5</span>]</span><br><span class="line">Out[<span class="hljs-number">229</span>]: </span><br><span class="line">         Colorado     Texas  New York      Ohio</span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-01</span>  <span class="hljs-number">0.493841</span> <span class="hljs-number">-0.155434</span>  <span class="hljs-number">1.397286</span>  <span class="hljs-number">1.507055</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-02</span> <span class="hljs-number">-1.179442</span>  <span class="hljs-number">0.443171</span>  <span class="hljs-number">1.395676</span> <span class="hljs-number">-0.529658</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-03</span>  <span class="hljs-number">0.787358</span>  <span class="hljs-number">0.248845</span>  <span class="hljs-number">0.743239</span>  <span class="hljs-number">1.267746</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-04</span>  <span class="hljs-number">1.302395</span> <span class="hljs-number">-0.272154</span> <span class="hljs-number">-0.051532</span> <span class="hljs-number">-0.467740</span></span><br><span class="line"><span class="hljs-number">2000</span><span class="hljs-number">-05</span> <span class="hljs-number">-1.040816</span>  <span class="hljs-number">0.426419</span>  <span class="hljs-number">0.312945</span> <span class="hljs-number">-1.115689</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">230</span>]: annual_frame = frame.resample(<span class="hljs-string">'A-DEC'</span>).mean()</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">231</span>]: annual_frame</span><br><span class="line">Out[<span class="hljs-number">231</span>]: </span><br><span class="line">      Colorado     Texas  New York      Ohio</span><br><span class="line"><span class="hljs-number">2000</span>  <span class="hljs-number">0.556703</span>  <span class="hljs-number">0.016631</span>  <span class="hljs-number">0.111873</span> <span class="hljs-number">-0.027445</span></span><br><span class="line"><span class="hljs-number">2001</span>  <span class="hljs-number">0.046303</span>  <span class="hljs-number">0.163344</span>  <span class="hljs-number">0.251503</span> <span class="hljs-number">-0.157276</span></span><br></pre></td></tr></table></figure><p>升采样要稍微麻烦一些，因为你必须决定在新频率中各区间的哪端用于放置原来的值，就像asfreq方法那样。convention参数默认为’start’，也可设置为’end’：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># Q-DEC: Quarterly, year ending in December</span></span><br><span class="line">In [<span class="hljs-number">232</span>]: annual_frame.resample(<span class="hljs-string">'Q-DEC'</span>).ffill()</span><br><span class="line">Out[<span class="hljs-number">232</span>]: </span><br><span class="line">        Colorado     Texas  New York      Ohio</span><br><span class="line"><span class="hljs-number">2000</span>Q1  <span class="hljs-number">0.556703</span>  <span class="hljs-number">0.016631</span>  <span class="hljs-number">0.111873</span> <span class="hljs-number">-0.027445</span></span><br><span class="line"><span class="hljs-number">2000</span>Q2  <span class="hljs-number">0.556703</span>  <span class="hljs-number">0.016631</span>  <span class="hljs-number">0.111873</span> <span class="hljs-number">-0.027445</span></span><br><span class="line"><span class="hljs-number">2000</span>Q3  <span class="hljs-number">0.556703</span>  <span class="hljs-number">0.016631</span>  <span class="hljs-number">0.111873</span> <span class="hljs-number">-0.027445</span></span><br><span class="line"><span class="hljs-number">2000</span>Q4  <span class="hljs-number">0.556703</span>  <span class="hljs-number">0.016631</span>  <span class="hljs-number">0.111873</span> <span class="hljs-number">-0.027445</span></span><br><span class="line"><span class="hljs-number">2001</span>Q1  <span class="hljs-number">0.046303</span>  <span class="hljs-number">0.163344</span>  <span class="hljs-number">0.251503</span> <span class="hljs-number">-0.157276</span></span><br><span class="line"><span class="hljs-number">2001</span>Q2  <span class="hljs-number">0.046303</span>  <span class="hljs-number">0.163344</span>  <span class="hljs-number">0.251503</span> <span class="hljs-number">-0.157276</span></span><br><span class="line"><span class="hljs-number">2001</span>Q3  <span class="hljs-number">0.046303</span>  <span class="hljs-number">0.163344</span>  <span class="hljs-number">0.251503</span> <span class="hljs-number">-0.157276</span></span><br><span class="line"><span class="hljs-number">2001</span>Q4  <span class="hljs-number">0.046303</span>  <span class="hljs-number">0.163344</span>  <span class="hljs-number">0.251503</span> <span class="hljs-number">-0.157276</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">233</span>]: annual_frame.resample(<span class="hljs-string">'Q-DEC'</span>, convention=<span class="hljs-string">'end'</span>).ffill()</span><br><span class="line">Out[<span class="hljs-number">233</span>]: </span><br><span class="line">        Colorado     Texas  New York      Ohio</span><br><span class="line"><span class="hljs-number">2000</span>Q4  <span class="hljs-number">0.556703</span>  <span class="hljs-number">0.016631</span>  <span class="hljs-number">0.111873</span> <span class="hljs-number">-0.027445</span></span><br><span class="line"><span class="hljs-number">2001</span>Q1  <span class="hljs-number">0.556703</span>  <span class="hljs-number">0.016631</span>  <span class="hljs-number">0.111873</span> <span class="hljs-number">-0.027445</span></span><br><span class="line"><span class="hljs-number">2001</span>Q2  <span class="hljs-number">0.556703</span>  <span class="hljs-number">0.016631</span>  <span class="hljs-number">0.111873</span> <span class="hljs-number">-0.027445</span></span><br><span class="line"><span class="hljs-number">2001</span>Q3  <span class="hljs-number">0.556703</span>  <span class="hljs-number">0.016631</span>  <span class="hljs-number">0.111873</span> <span class="hljs-number">-0.027445</span></span><br><span class="line"><span class="hljs-number">2001</span>Q4  <span class="hljs-number">0.046303</span>  <span class="hljs-number">0.163344</span>  <span class="hljs-number">0.251503</span> <span class="hljs-number">-0.157276</span></span><br></pre></td></tr></table></figure><p>由于时期指的是时间区间，所以升采样和降采样的规则就比较严格：</p><ul><li>在降采样中，目标频率必须是源频率的子时期（subperiod）。</li><li>在升采样中，目标频率必须是源频率的超时期（superperiod）。</li></ul><p>如果不满足这些条件，就会引发异常。这主要影响的是按季、年、周计算的频率。例如，由Q-MAR定义的时间区间只能升采样为A-MAR、A-JUN、A-SEP、A-DEC等：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">234</span>]: annual_frame.resample(<span class="hljs-string">'Q-MAR'</span>).ffill()</span><br><span class="line">Out[<span class="hljs-number">234</span>]: </span><br><span class="line">        Colorado     Texas  New York      Ohio</span><br><span class="line"><span class="hljs-number">2000</span>Q4  <span class="hljs-number">0.556703</span>  <span class="hljs-number">0.016631</span>  <span class="hljs-number">0.111873</span> <span class="hljs-number">-0.027445</span></span><br><span class="line"><span class="hljs-number">2001</span>Q1  <span class="hljs-number">0.556703</span>  <span class="hljs-number">0.016631</span>  <span class="hljs-number">0.111873</span> <span class="hljs-number">-0.027445</span></span><br><span class="line"><span class="hljs-number">2001</span>Q2  <span class="hljs-number">0.556703</span>  <span class="hljs-number">0.016631</span>  <span class="hljs-number">0.111873</span> <span class="hljs-number">-0.027445</span></span><br><span class="line"><span class="hljs-number">2001</span>Q3  <span class="hljs-number">0.556703</span>  <span class="hljs-number">0.016631</span>  <span class="hljs-number">0.111873</span> <span class="hljs-number">-0.027445</span></span><br><span class="line"><span class="hljs-number">2001</span>Q4  <span class="hljs-number">0.046303</span>  <span class="hljs-number">0.163344</span>  <span class="hljs-number">0.251503</span> <span class="hljs-number">-0.157276</span></span><br><span class="line"><span class="hljs-number">2002</span>Q1  <span class="hljs-number">0.046303</span>  <span class="hljs-number">0.163344</span>  <span class="hljs-number">0.251503</span> <span class="hljs-number">-0.157276</span></span><br><span class="line"><span class="hljs-number">2002</span>Q2  <span class="hljs-number">0.046303</span>  <span class="hljs-number">0.163344</span>  <span class="hljs-number">0.251503</span> <span class="hljs-number">-0.157276</span></span><br><span class="line"><span class="hljs-number">2002</span>Q3  <span class="hljs-number">0.046303</span>  <span class="hljs-number">0.163344</span>  <span class="hljs-number">0.251503</span> <span class="hljs-number">-0.157276</span></span><br></pre></td></tr></table></figure><h1 id="11-7-移动窗口函数"><a href="#11-7-移动窗口函数" class="headerlink" title="11.7 移动窗口函数"></a>11.7 移动窗口函数</h1><p>在移动窗口（可以带有指数衰减权数）上计算的各种统计函数也是一类常见于时间序列的数组变换。这样可以圆滑噪音数据或断裂数据。我将它们称为移动窗口函数（moving window function），其中还包括那些窗口不定长的函数（如指数加权移动平均）。跟其他统计函数一样，移动窗口函数也会自动排除缺失值。</p><p>开始之前，我们加载一些时间序列数据，将其重采样为工作日频率：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">235</span>]: close_px_all = pd.read_csv(<span class="hljs-string">'examples/stock_px_2.csv'</span>,</span><br><span class="line">   .....:                            parse_dates=<span class="hljs-literal">True</span>, index_col=<span class="hljs-number">0</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">236</span>]: close_px = close_px_all[[<span class="hljs-string">'AAPL'</span>, <span class="hljs-string">'MSFT'</span>, <span class="hljs-string">'XOM'</span>]]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">237</span>]: close_px = close_px.resample(<span class="hljs-string">'B'</span>).ffill()</span><br></pre></td></tr></table></figure><p>现在引入rolling运算符，它与resample和groupby很像。可以在TimeSeries或DataFrame以及一个window（表示期数，见图11-4）上调用它：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">238</span>]: close_px.AAPL.plot()</span><br><span class="line">Out[<span class="hljs-number">238</span>]: &lt;matplotlib.axes._subplots.AxesSubplot at <span class="hljs-number">0x7f2f2570cf98</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">239</span>]: close_px.AAPL.rolling(<span class="hljs-number">250</span>).mean().plot()</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-3327483eab730b09.webp" alt="img"></p><p>图11-4 苹果公司股价的250日均线</p><p>表达式rolling(250)与groupby很像，但不是对其进行分组，而是创建一个按照250天分组的滑动窗口对象。然后，我们就得到了苹果公司股价的250天的移动窗口。</p><p>默认情况下，rolling函数需要窗口中所有的值为非NA值。可以修改该行为以解决缺失数据的问题。其实，在时间序列开始处尚不足窗口期的那些数据就是个特例（见图11-5）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">241</span>]: appl_std250 = close_px.AAPL.rolling(<span class="hljs-number">250</span>, min_periods=<span class="hljs-number">10</span>).std()</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">242</span>]: appl_std250[<span class="hljs-number">5</span>:<span class="hljs-number">12</span>]</span><br><span class="line">Out[<span class="hljs-number">242</span>]: </span><br><span class="line"><span class="hljs-number">2003</span><span class="hljs-number">-01</span><span class="hljs-number">-09</span>         NaN</span><br><span class="line"><span class="hljs-number">2003</span><span class="hljs-number">-01</span><span class="hljs-number">-10</span>         NaN</span><br><span class="line"><span class="hljs-number">2003</span><span class="hljs-number">-01</span><span class="hljs-number">-13</span>         NaN</span><br><span class="line"><span class="hljs-number">2003</span><span class="hljs-number">-01</span><span class="hljs-number">-14</span>         NaN</span><br><span class="line"><span class="hljs-number">2003</span><span class="hljs-number">-01</span><span class="hljs-number">-15</span>    <span class="hljs-number">0.077496</span></span><br><span class="line"><span class="hljs-number">2003</span><span class="hljs-number">-01</span><span class="hljs-number">-16</span>    <span class="hljs-number">0.074760</span></span><br><span class="line"><span class="hljs-number">2003</span><span class="hljs-number">-01</span><span class="hljs-number">-17</span>    <span class="hljs-number">0.112368</span></span><br><span class="line">Freq: B, Name: AAPL, dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">243</span>]: appl_std250.plot()</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-15f565bed1ccad09.webp" alt="img"></p><p>图11-5 苹果公司250日每日回报标准差</p><p>要计算扩展窗口平均（expanding window mean），可以使用expanding而不是rolling。“扩展”意味着，从时间序列的起始处开始窗口，增加窗口直到它超过所有的序列。apple_std250时间序列的扩展窗口平均如下所示：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">244</span>]: expanding_mean = appl_std250.expanding().mean()</span><br></pre></td></tr></table></figure><p>对DataFrame调用rolling_mean（以及与之类似的函数）会将转换应用到所有的列上（见图11-6）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">246</span>]: close_px.rolling(<span class="hljs-number">60</span>).mean().plot(logy=<span class="hljs-literal">True</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-979f748052b2279f.webp" alt="img"></p><p>图11-6 各股价60日均线（对数Y轴）</p><p>rolling函数也可以接受一个指定固定大小时间补偿字符串，而不是一组时期。这样可以方便处理不规律的时间序列。这些字符串也可以传递给resample。例如，我们可以计算20天的滚动均值，如下所示：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">247</span>]: close_px.rolling(<span class="hljs-string">'20D'</span>).mean()</span><br><span class="line">Out[<span class="hljs-number">247</span>]:</span><br><span class="line">                  AAPL       MSFT        XOM</span><br><span class="line"><span class="hljs-number">2003</span><span class="hljs-number">-01</span><span class="hljs-number">-02</span>    <span class="hljs-number">7.400000</span>  <span class="hljs-number">21.110000</span>  <span class="hljs-number">29.220000</span></span><br><span class="line"><span class="hljs-number">2003</span><span class="hljs-number">-01</span><span class="hljs-number">-03</span>    <span class="hljs-number">7.425000</span>  <span class="hljs-number">21.125000</span>  <span class="hljs-number">29.230000</span></span><br><span class="line"><span class="hljs-number">2003</span><span class="hljs-number">-01</span><span class="hljs-number">-06</span>    <span class="hljs-number">7.433333</span>  <span class="hljs-number">21.256667</span>  <span class="hljs-number">29.473333</span></span><br><span class="line"><span class="hljs-number">2003</span><span class="hljs-number">-01</span><span class="hljs-number">-07</span>    <span class="hljs-number">7.432500</span>  <span class="hljs-number">21.425000</span>  <span class="hljs-number">29.342500</span></span><br><span class="line"><span class="hljs-number">2003</span><span class="hljs-number">-01</span><span class="hljs-number">-08</span>    <span class="hljs-number">7.402000</span>  <span class="hljs-number">21.402000</span>  <span class="hljs-number">29.240000</span></span><br><span class="line"><span class="hljs-number">2003</span><span class="hljs-number">-01</span><span class="hljs-number">-09</span>    <span class="hljs-number">7.391667</span>  <span class="hljs-number">21.490000</span>  <span class="hljs-number">29.273333</span></span><br><span class="line"><span class="hljs-number">2003</span><span class="hljs-number">-01</span><span class="hljs-number">-10</span>    <span class="hljs-number">7.387143</span>  <span class="hljs-number">21.558571</span>  <span class="hljs-number">29.238571</span></span><br><span class="line"><span class="hljs-number">2003</span><span class="hljs-number">-01</span><span class="hljs-number">-13</span>    <span class="hljs-number">7.378750</span>  <span class="hljs-number">21.633750</span>  <span class="hljs-number">29.197500</span></span><br><span class="line"><span class="hljs-number">2003</span><span class="hljs-number">-01</span><span class="hljs-number">-14</span>    <span class="hljs-number">7.370000</span>  <span class="hljs-number">21.717778</span>  <span class="hljs-number">29.194444</span></span><br><span class="line"><span class="hljs-number">2003</span><span class="hljs-number">-01</span><span class="hljs-number">-15</span>    <span class="hljs-number">7.355000</span>  <span class="hljs-number">21.757000</span>  <span class="hljs-number">29.152000</span></span><br><span class="line"><span class="hljs-meta">... </span>               ...        ...        ...</span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-10</span><span class="hljs-number">-03</span>  <span class="hljs-number">398.002143</span>  <span class="hljs-number">25.890714</span>  <span class="hljs-number">72.413571</span></span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-10</span><span class="hljs-number">-04</span>  <span class="hljs-number">396.802143</span>  <span class="hljs-number">25.807857</span>  <span class="hljs-number">72.427143</span></span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-10</span><span class="hljs-number">-05</span>  <span class="hljs-number">395.751429</span>  <span class="hljs-number">25.729286</span>  <span class="hljs-number">72.422857</span></span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-10</span><span class="hljs-number">-06</span>  <span class="hljs-number">394.099286</span>  <span class="hljs-number">25.673571</span>  <span class="hljs-number">72.375714</span></span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-10</span><span class="hljs-number">-07</span>  <span class="hljs-number">392.479333</span>  <span class="hljs-number">25.712000</span>  <span class="hljs-number">72.454667</span></span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-10</span><span class="hljs-number">-10</span>  <span class="hljs-number">389.351429</span>  <span class="hljs-number">25.602143</span>  <span class="hljs-number">72.527857</span></span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-10</span><span class="hljs-number">-11</span>  <span class="hljs-number">388.505000</span>  <span class="hljs-number">25.674286</span>  <span class="hljs-number">72.835000</span></span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-10</span><span class="hljs-number">-12</span>  <span class="hljs-number">388.531429</span>  <span class="hljs-number">25.810000</span>  <span class="hljs-number">73.400714</span></span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-10</span><span class="hljs-number">-13</span>  <span class="hljs-number">388.826429</span>  <span class="hljs-number">25.961429</span>  <span class="hljs-number">73.905000</span></span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-10</span><span class="hljs-number">-14</span>  <span class="hljs-number">391.038000</span>  <span class="hljs-number">26.048667</span>  <span class="hljs-number">74.185333</span></span><br><span class="line">[<span class="hljs-number">2292</span> rows x <span class="hljs-number">3</span> columns]</span><br></pre></td></tr></table></figure><h2 id="指数加权函数"><a href="#指数加权函数" class="headerlink" title="指数加权函数"></a>指数加权函数</h2><p>另一种使用固定大小窗口及相等权数观测值的办法是，定义一个衰减因子（decay factor）常量，以便使近期的观测值拥有更大的权数。衰减因子的定义方式有很多，比较流行的是使用时间间隔（span），它可以使结果兼容于窗口大小等于时间间隔的简单移动窗口（simple moving window）函数。</p><p>由于指数加权统计会赋予近期的观测值更大的权数，因此相对于等权统计，它能“适应”更快的变化。</p><p>除了rolling和expanding，pandas还有ewm运算符。下面这个例子对比了苹果公司股价的30日移动平均和span=30的指数加权移动平均（如图11-7所示）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">249</span>]: aapl_px = close_px.AAPL[<span class="hljs-string">'2006'</span>:<span class="hljs-string">'2007'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">250</span>]: ma60 = aapl_px.rolling(<span class="hljs-number">30</span>, min_periods=<span class="hljs-number">20</span>).mean()</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">251</span>]: ewma60 = aapl_px.ewm(span=<span class="hljs-number">30</span>).mean()</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">252</span>]: ma60.plot(style=<span class="hljs-string">'k--'</span>, label=<span class="hljs-string">'Simple MA'</span>)</span><br><span class="line">Out[<span class="hljs-number">252</span>]: &lt;matplotlib.axes._subplots.AxesSubplot at <span class="hljs-number">0x7f2f252161d0</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">253</span>]: ewma60.plot(style=<span class="hljs-string">'k-'</span>, label=<span class="hljs-string">'EW MA'</span>)</span><br><span class="line">Out[<span class="hljs-number">253</span>]: &lt;matplotlib.axes._subplots.AxesSubplot at <span class="hljs-number">0x7f2f252161d0</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">254</span>]: plt.legend()</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-dae48defe3749fad.webp" alt="img"></p><p>图11-7 简单移动平均与指数加权移动平均</p><h2 id="二元移动窗口函数"><a href="#二元移动窗口函数" class="headerlink" title="二元移动窗口函数"></a>二元移动窗口函数</h2><p>有些统计运算（如相关系数和协方差）需要在两个时间序列上执行。例如，金融分析师常常对某只股票对某个参考指数（如标准普尔500指数）的相关系数感兴趣。要进行说明，我们先计算我们感兴趣的时间序列的百分数变化：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">256</span>]: spx_px = close_px_all[<span class="hljs-string">'SPX'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">257</span>]: spx_rets = spx_px.pct_change()</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">258</span>]: returns = close_px.pct_change()</span><br></pre></td></tr></table></figure><p>调用rolling之后，corr聚合函数开始计算与spx_rets滚动相关系数（结果见图11-8）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">259</span>]: corr = returns.AAPL.rolling(<span class="hljs-number">125</span>, min_periods=<span class="hljs-number">100</span>).corr(spx_rets)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">260</span>]: corr.plot()</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-e81e0f602b4db0ed.webp" alt="img"></p><p>图11-8 AAPL 6个月的回报与标准普尔500指数的相关系数</p><p>假设你想要一次性计算多只股票与标准普尔500指数的相关系数。虽然编写一个循环并新建一个DataFrame不是什么难事，但比较啰嗦。其实，只需传入一个TimeSeries和一个DataFrame，rolling_corr就会自动计算TimeSeries（本例中就是spx_rets）与DataFrame各列的相关系数。结果如图11-9所示：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">262</span>]: corr = returns.rolling(<span class="hljs-number">125</span>, min_periods=<span class="hljs-number">100</span>).corr(spx_rets)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">263</span>]: corr.plot()</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-0a54a028a62b9b50.webp" alt="img"></p><p>图11-9 3只股票6个月的回报与标准普尔500指数的相关系数</p><h2 id="用户定义的移动窗口函数"><a href="#用户定义的移动窗口函数" class="headerlink" title="用户定义的移动窗口函数"></a>用户定义的移动窗口函数</h2><p>rolling_apply函数使你能够在移动窗口上应用自己设计的数组函数。唯一要求的就是：该函数要能从数组的各个片段中产生单个值（即约简）。比如说，当我们用rolling(…).quantile(q)计算样本分位数时，可能对样本中特定值的百分等级感兴趣。scipy.stats.percentileofscore函数就能达到这个目的（结果见图11-10）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">265</span>]: <span class="hljs-keyword">from</span> scipy.stats <span class="hljs-keyword">import</span> percentileofscore</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">266</span>]: score_at_2percent = <span class="hljs-keyword">lambda</span> x: percentileofscore(x, <span class="hljs-number">0.02</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">267</span>]: result = returns.AAPL.rolling(<span class="hljs-number">250</span>).apply(score_at_2percent)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">268</span>]: result.plot()</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-af49e84a90c23c1e.webp" alt="img"></p><p>图11-10 AAPL 2%回报率的百分等级（一年窗口期）</p><p>如果你没安装SciPy，可以使用conda或pip安装。</p><h1 id="11-8-总结"><a href="#11-8-总结" class="headerlink" title="11.8 总结"></a>11.8 总结</h1><p>与前面章节接触的数据相比，时间序列数据要求不同类型的分析和数据转换工具。</p><p>在接下来的章节中，我们将学习一些高级的pandas方法和如何开始使用建模库statsmodels和scikit-learn。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载自&lt;a href=&quot;https://www.jianshu.com/p/29ece4592178&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;../《利用Python进行数据分析·第2版》第1章%20准备工作&quot;&gt;第1章 准备工作&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第2章%20Python语法基础，IPython和Jupyter%20Notebooks&quot;&gt;第2章 Python语法基础，IPython和Jupyter Notebooks&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第3章%20Python的数据结构、函数和文件&quot;&gt;第3章 Python的数据结构、函数和文件&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第4章%20NumPy基础：数组和矢量计算&quot;&gt;第4章 NumPy基础：数组和矢量计算&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第5章%20pandas入门&quot;&gt;第5章 pandas入门&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第6章%20数据加载、存储与文件格式&quot;&gt;第6章 数据加载、存储与文件格式&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第7章%20数据清洗和准备&quot;&gt;第7章 数据清洗和准备&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第8章%20数据规整：聚合、合并和重塑&quot;&gt;第8章 数据规整：聚合、合并和重塑&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第9章%20绘图和可视化&quot;&gt;第9章 绘图和可视化&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第10章%20数据聚合与分组运算&quot;&gt;第10章 数据聚合与分组运算&lt;/a&gt;&lt;br&gt;第11章 时间序列&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第12章%20pandas高级应用&quot;&gt;第12章 pandas高级应用&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第13章%20Python建模库介绍&quot;&gt;第13章 Python建模库介绍&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第14章%20数据分析案例&quot;&gt;第14章 数据分析案例&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》附录A%20NumPy高级应用&quot;&gt;附录A NumPy高级应用&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》附录B%20更多关于IPython的内容（完）&quot;&gt;附录B 更多关于IPython的内容（完）&lt;/a&gt;      &lt;/p&gt;
    
    </summary>
    
    
      <category term="数据分析" scheme="https://glanhoo.coding.me/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="https://glanhoo.coding.me/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="pandas" scheme="https://glanhoo.coding.me/tags/pandas/"/>
    
      <category term="python" scheme="https://glanhoo.coding.me/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>《利用Python进行数据分析·第2版》第10章 数据聚合与分组运算</title>
    <link href="https://glanhoo.coding.me/2019/11/05/%E3%80%8A%E5%88%A9%E7%94%A8Python%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%C2%B7%E7%AC%AC2%E7%89%88%E3%80%8B%E7%AC%AC10%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E8%81%9A%E5%90%88%E4%B8%8E%E5%88%86%E7%BB%84%E8%BF%90%E7%AE%97/"/>
    <id>https://glanhoo.coding.me/2019/11/05/%E3%80%8A%E5%88%A9%E7%94%A8Python%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%C2%B7%E7%AC%AC2%E7%89%88%E3%80%8B%E7%AC%AC10%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E8%81%9A%E5%90%88%E4%B8%8E%E5%88%86%E7%BB%84%E8%BF%90%E7%AE%97/</id>
    <published>2019-11-05T01:59:42.000Z</published>
    <updated>2019-12-11T02:21:18.086Z</updated>
    
    <content type="html"><![CDATA[<p>转载自<a href="https://www.jianshu.com/p/b94deb5c7eb1" target="_blank" rel="noopener">简书</a></p><p><a href="../《利用Python进行数据分析·第2版》第1章%20准备工作">第1章 准备工作</a><br> <a href="../《利用Python进行数据分析·第2版》第2章%20Python语法基础，IPython和Jupyter%20Notebooks">第2章 Python语法基础，IPython和Jupyter Notebooks</a><br> <a href="../《利用Python进行数据分析·第2版》第3章%20Python的数据结构、函数和文件">第3章 Python的数据结构、函数和文件</a><br> <a href="../《利用Python进行数据分析·第2版》第4章%20NumPy基础：数组和矢量计算">第4章 NumPy基础：数组和矢量计算</a><br> <a href="../《利用Python进行数据分析·第2版》第5章%20pandas入门">第5章 pandas入门</a><br> <a href="../《利用Python进行数据分析·第2版》第6章%20数据加载、存储与文件格式">第6章 数据加载、存储与文件格式</a><br> <a href="../《利用Python进行数据分析·第2版》第7章%20数据清洗和准备">第7章 数据清洗和准备</a><br> <a href="../《利用Python进行数据分析·第2版》第8章%20数据规整：聚合、合并和重塑">第8章 数据规整：聚合、合并和重塑</a><br> <a href="../《利用Python进行数据分析·第2版》第9章%20绘图和可视化">第9章 绘图和可视化</a><br>第10章 数据聚合与分组运算<br> <a href="../《利用Python进行数据分析·第2版》第11章%20时间序列">第11章 时间序列</a><br> <a href="../《利用Python进行数据分析·第2版》第12章%20pandas高级应用">第12章 pandas高级应用</a><br> <a href="../《利用Python进行数据分析·第2版》第13章%20Python建模库介绍">第13章 Python建模库介绍</a><br> <a href="../《利用Python进行数据分析·第2版》第14章%20数据分析案例">第14章 数据分析案例</a><br> <a href="../《利用Python进行数据分析·第2版》附录A%20NumPy高级应用">附录A NumPy高级应用</a><br> <a href="../《利用Python进行数据分析·第2版》附录B%20更多关于IPython的内容（完）">附录B 更多关于IPython的内容（完）</a>      </p><a id="more"></a><hr><p>对数据集进行分组并对各组应用一个函数（无论是聚合还是转换），通常是数据分析工作中的重要环节。在将数据集加载、融合、准备好之后，通常就是计算分组统计或生成透视表。pandas提供了一个灵活高效的gruopby功能，它使你能以一种自然的方式对数据集进行切片、切块、摘要等操作。</p><p>关系型数据库和SQL（Structured Query Language，结构化查询语言）能够如此流行的原因之一就是其能够方便地对数据进行连接、过滤、转换和聚合。但是，像SQL这样的查询语言所能执行的分组运算的种类很有限。在本章中你将会看到，由于Python和pandas强大的表达能力，我们可以执行复杂得多的分组运算（利用任何可以接受pandas对象或NumPy数组的函数）。在本章中，你将会学到：</p><ul><li>使用一个或多个键（形式可以是函数、数组或DataFrame列名）分割pandas对象。</li><li>计算分组的概述统计，比如数量、平均值或标准差，或是用户定义的函数。</li><li>应用组内转换或其他运算，如规格化、线性回归、排名或选取子集等。</li><li>计算透视表或交叉表。</li><li>执行分位数分析以及其它统计分组分析。</li></ul><blockquote><p>笔记：对时间序列数据的聚合（groupby的特殊用法之一）也称作重采样（resampling），本书将在第11章中单独对其进行讲解。</p></blockquote><h1 id="10-1-GroupBy机制"><a href="#10-1-GroupBy机制" class="headerlink" title="10.1 GroupBy机制"></a>10.1 GroupBy机制</h1><p>Hadley Wickham（许多热门R语言包的作者）创造了一个用于表示分组运算的术语”split-apply-combine”（拆分－应用－合并）。第一个阶段，pandas对象（无论是Series、DataFrame还是其他的）中的数据会根据你所提供的一个或多个键被拆分（split）为多组。拆分操作是在对象的特定轴上执行的。例如，DataFrame可以在其行（axis=0）或列（axis=1）上进行分组。然后，将一个函数应用（apply）到各个分组并产生一个新值。最后，所有这些函数的执行结果会被合并（combine）到最终的结果对象中。结果对象的形式一般取决于数据上所执行的操作。图10-1大致说明了一个简单的分组聚合过程。</p><p><img src="/images/blog/7178691-e5c671e09ecf94be.webp" alt="img"></p><p>图10-1 分组聚合演示</p><p>分组键可以有多种形式，且类型不必相同：</p><ul><li>列表或数组，其长度与待分组的轴一样。</li><li>表示DataFrame某个列名的值。</li><li>字典或Series，给出待分组轴上的值与分组名之间的对应关系。</li><li>函数，用于处理轴索引或索引中的各个标签。</li></ul><p>注意，后三种都只是快捷方式而已，其最终目的仍然是产生一组用于拆分对象的值。如果觉得这些东西看起来很抽象，不用担心，我将在本章中给出大量有关于此的示例。首先来看看下面这个非常简单的表格型数据集（以DataFrame的形式）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">10</span>]: df = pd.DataFrame(&#123;<span class="hljs-string">'key1'</span> : [<span class="hljs-string">'a'</span>, <span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'a'</span>],</span><br><span class="line">   ....:                    <span class="hljs-string">'key2'</span> : [<span class="hljs-string">'one'</span>, <span class="hljs-string">'two'</span>, <span class="hljs-string">'one'</span>, <span class="hljs-string">'two'</span>, <span class="hljs-string">'one'</span>],</span><br><span class="line">   ....:                    <span class="hljs-string">'data1'</span> : np.random.randn(<span class="hljs-number">5</span>),</span><br><span class="line">   ....:                    <span class="hljs-string">'data2'</span> : np.random.randn(<span class="hljs-number">5</span>)&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">11</span>]: df</span><br><span class="line">Out[<span class="hljs-number">11</span>]: </span><br><span class="line">      data1     data2 key1 key2</span><br><span class="line"><span class="hljs-number">0</span> <span class="hljs-number">-0.204708</span>  <span class="hljs-number">1.393406</span>    a  one</span><br><span class="line"><span class="hljs-number">1</span>  <span class="hljs-number">0.478943</span>  <span class="hljs-number">0.092908</span>    a  two</span><br><span class="line"><span class="hljs-number">2</span> <span class="hljs-number">-0.519439</span>  <span class="hljs-number">0.281746</span>    b  one</span><br><span class="line"><span class="hljs-number">3</span> <span class="hljs-number">-0.555730</span>  <span class="hljs-number">0.769023</span>    b  two</span><br><span class="line"><span class="hljs-number">4</span>  <span class="hljs-number">1.965781</span>  <span class="hljs-number">1.246435</span>    a  one</span><br></pre></td></tr></table></figure><p>假设你想要按key1进行分组，并计算data1列的平均值。实现该功能的方式有很多，而我们这里要用的是：访问data1，并根据key1调用groupby：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">12</span>]: grouped = df[<span class="hljs-string">'data1'</span>].groupby(df[<span class="hljs-string">'key1'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">13</span>]: grouped</span><br><span class="line">Out[<span class="hljs-number">13</span>]: &lt;pandas.core.groupby.SeriesGroupBy object at <span class="hljs-number">0x7faa31537390</span>&gt;</span><br></pre></td></tr></table></figure><p>变量grouped是一个GroupBy对象。它实际上还没有进行任何计算，只是含有一些有关分组键df[‘key1’]的中间数据而已。换句话说，该对象已经有了接下来对各分组执行运算所需的一切信息。例如，我们可以调用GroupBy的mean方法来计算分组平均值：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">14</span>]: grouped.mean()</span><br><span class="line">Out[<span class="hljs-number">14</span>]: </span><br><span class="line">key1</span><br><span class="line">a    <span class="hljs-number">0.746672</span></span><br><span class="line">b   <span class="hljs-number">-0.537585</span></span><br><span class="line">Name: data1, dtype: float64</span><br></pre></td></tr></table></figure><p>稍后我将详细讲解.mean()的调用过程。这里最重要的是，数据（Series）根据分组键进行了聚合，产生了一个新的Series，其索引为key1列中的唯一值。之所以结果中索引的名称为key1，是因为原始DataFrame的列df[‘key1’]就叫这个名字。</p><p>如果我们一次传入多个数组的列表，就会得到不同的结果：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">15</span>]: means = df[<span class="hljs-string">'data1'</span>].groupby([df[<span class="hljs-string">'key1'</span>], df[<span class="hljs-string">'key2'</span>]]).mean()</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">16</span>]: means</span><br><span class="line">Out[<span class="hljs-number">16</span>]: </span><br><span class="line">key1  key2</span><br><span class="line">a     one     <span class="hljs-number">0.880536</span></span><br><span class="line">      two     <span class="hljs-number">0.478943</span></span><br><span class="line">b     one    <span class="hljs-number">-0.519439</span></span><br><span class="line">      two    <span class="hljs-number">-0.555730</span></span><br><span class="line">Name: data1, dtype: float64</span><br></pre></td></tr></table></figure><p>这里，我通过两个键对数据进行了分组，得到的Series具有一个层次化索引（由唯一的键对组成）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">17</span>]: means.unstack()</span><br><span class="line">Out[<span class="hljs-number">17</span>]: </span><br><span class="line">key2       one       two</span><br><span class="line">key1                    </span><br><span class="line">a     <span class="hljs-number">0.880536</span>  <span class="hljs-number">0.478943</span></span><br><span class="line">b    <span class="hljs-number">-0.519439</span> <span class="hljs-number">-0.555730</span></span><br></pre></td></tr></table></figure><p>在这个例子中，分组键均为Series。实际上，分组键可以是任何长度适当的数组：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">18</span>]: states = np.array([<span class="hljs-string">'Ohio'</span>, <span class="hljs-string">'California'</span>, <span class="hljs-string">'California'</span>, <span class="hljs-string">'Ohio'</span>, <span class="hljs-string">'Ohio'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">19</span>]: years = np.array([<span class="hljs-number">2005</span>, <span class="hljs-number">2005</span>, <span class="hljs-number">2006</span>, <span class="hljs-number">2005</span>, <span class="hljs-number">2006</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">20</span>]: df[<span class="hljs-string">'data1'</span>].groupby([states, years]).mean()</span><br><span class="line">Out[<span class="hljs-number">20</span>]: </span><br><span class="line">California  <span class="hljs-number">2005</span>    <span class="hljs-number">0.478943</span></span><br><span class="line">            <span class="hljs-number">2006</span>   <span class="hljs-number">-0.519439</span></span><br><span class="line">Ohio        <span class="hljs-number">2005</span>   <span class="hljs-number">-0.380219</span></span><br><span class="line">            <span class="hljs-number">2006</span>    <span class="hljs-number">1.965781</span></span><br><span class="line">Name: data1, dtype: float64</span><br></pre></td></tr></table></figure><p>通常，分组信息就位于相同的要处理DataFrame中。这里，你还可以将列名（可以是字符串、数字或其他Python对象）用作分组键：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">21</span>]: df.groupby(<span class="hljs-string">'key1'</span>).mean()</span><br><span class="line">Out[<span class="hljs-number">21</span>]: </span><br><span class="line">         data1     data2</span><br><span class="line">key1</span><br><span class="line">a     <span class="hljs-number">0.746672</span>  <span class="hljs-number">0.910916</span></span><br><span class="line">b    <span class="hljs-number">-0.537585</span>  <span class="hljs-number">0.525384</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">22</span>]: df.groupby([<span class="hljs-string">'key1'</span>, <span class="hljs-string">'key2'</span>]).mean()</span><br><span class="line">Out[<span class="hljs-number">22</span>]: </span><br><span class="line">              data1     data2</span><br><span class="line">key1 key2                    </span><br><span class="line">a    one   <span class="hljs-number">0.880536</span>  <span class="hljs-number">1.319920</span></span><br><span class="line">     two   <span class="hljs-number">0.478943</span>  <span class="hljs-number">0.092908</span></span><br><span class="line">b    one  <span class="hljs-number">-0.519439</span>  <span class="hljs-number">0.281746</span></span><br><span class="line">     two  <span class="hljs-number">-0.555730</span>  <span class="hljs-number">0.769023</span></span><br></pre></td></tr></table></figure><p>你可能已经注意到了，第一个例子在执行df.groupby(‘key1’).mean()时，结果中没有key2列。这是因为df[‘key2’]不是数值数据（俗称“麻烦列”），所以被从结果中排除了。默认情况下，所有数值列都会被聚合，虽然有时可能会被过滤为一个子集，稍后就会碰到。</p><p>无论你准备拿groupby做什么，都有可能会用到GroupBy的size方法，它可以返回一个含有分组大小的Series：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">23</span>]: df.groupby([<span class="hljs-string">'key1'</span>, <span class="hljs-string">'key2'</span>]).size()</span><br><span class="line">Out[<span class="hljs-number">23</span>]: </span><br><span class="line">key1  key2</span><br><span class="line">a     one     <span class="hljs-number">2</span></span><br><span class="line">      two     <span class="hljs-number">1</span></span><br><span class="line">b     one     <span class="hljs-number">1</span></span><br><span class="line">      two     <span class="hljs-number">1</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><p>注意，任何分组关键词中的缺失值，都会被从结果中除去。</p><h2 id="对分组进行迭代"><a href="#对分组进行迭代" class="headerlink" title="对分组进行迭代"></a>对分组进行迭代</h2><p>GroupBy对象支持迭代，可以产生一组二元元组（由分组名和数据块组成）。看下面的例子：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">24</span>]: <span class="hljs-keyword">for</span> name, group <span class="hljs-keyword">in</span> df.groupby(<span class="hljs-string">'key1'</span>):</span><br><span class="line">   ....:     print(name)</span><br><span class="line">   ....:     print(group)</span><br><span class="line">   ....:</span><br><span class="line">a</span><br><span class="line">      data1     data2 key1 key2</span><br><span class="line"><span class="hljs-number">0</span> <span class="hljs-number">-0.204708</span>  <span class="hljs-number">1.393406</span>    a  one</span><br><span class="line"><span class="hljs-number">1</span>  <span class="hljs-number">0.478943</span>  <span class="hljs-number">0.092908</span>    a  two</span><br><span class="line"><span class="hljs-number">4</span>  <span class="hljs-number">1.965781</span>  <span class="hljs-number">1.246435</span>    a  one</span><br><span class="line">b</span><br><span class="line">      data1     data2 key1 key2</span><br><span class="line"><span class="hljs-number">2</span> <span class="hljs-number">-0.519439</span>  <span class="hljs-number">0.281746</span>    b  one</span><br><span class="line"><span class="hljs-number">3</span> <span class="hljs-number">-0.555730</span>  <span class="hljs-number">0.769023</span>    b  two</span><br></pre></td></tr></table></figure><p>对于多重键的情况，元组的第一个元素将会是由键值组成的元组：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">25</span>]: <span class="hljs-keyword">for</span> (k1, k2), group <span class="hljs-keyword">in</span> df.groupby([<span class="hljs-string">'key1'</span>, <span class="hljs-string">'key2'</span>]):</span><br><span class="line">   ....:     print((k1, k2))</span><br><span class="line">   ....:     print(group)</span><br><span class="line">   ....:</span><br><span class="line">(<span class="hljs-string">'a'</span>, <span class="hljs-string">'one'</span>)</span><br><span class="line">      data1     data2 key1 key2</span><br><span class="line"><span class="hljs-number">0</span> <span class="hljs-number">-0.204708</span>  <span class="hljs-number">1.393406</span>    a  one</span><br><span class="line"><span class="hljs-number">4</span>  <span class="hljs-number">1.965781</span>  <span class="hljs-number">1.246435</span>    a  one</span><br><span class="line">(<span class="hljs-string">'a'</span>, <span class="hljs-string">'two'</span>)</span><br><span class="line">      data1     data2 key1 key2</span><br><span class="line"><span class="hljs-number">1</span>  <span class="hljs-number">0.478943</span>  <span class="hljs-number">0.092908</span>    a  two</span><br><span class="line">(<span class="hljs-string">'b'</span>, <span class="hljs-string">'one'</span>)</span><br><span class="line">      data1     data2 key1 key2</span><br><span class="line"><span class="hljs-number">2</span> <span class="hljs-number">-0.519439</span>  <span class="hljs-number">0.281746</span>    b  one</span><br><span class="line">(<span class="hljs-string">'b'</span>, <span class="hljs-string">'two'</span>)</span><br><span class="line">     data1     data2 key1 key2</span><br><span class="line"><span class="hljs-number">3</span> <span class="hljs-number">-0.55573</span>  <span class="hljs-number">0.769023</span>    b  two</span><br></pre></td></tr></table></figure><p>当然，你可以对这些数据片段做任何操作。有一个你可能会觉得有用的运算：将这些数据片段做成一个字典：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">26</span>]: pieces = dict(list(df.groupby(<span class="hljs-string">'key1'</span>)))</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">27</span>]: pieces[<span class="hljs-string">'b'</span>]</span><br><span class="line">Out[<span class="hljs-number">27</span>]: </span><br><span class="line">      data1     data2 key1 key2</span><br><span class="line"><span class="hljs-number">2</span> <span class="hljs-number">-0.519439</span>  <span class="hljs-number">0.281746</span>    b  one</span><br><span class="line"><span class="hljs-number">3</span> <span class="hljs-number">-0.555730</span>  <span class="hljs-number">0.769023</span>    b  two</span><br></pre></td></tr></table></figure><p>groupby默认是在axis=0上进行分组的，通过设置也可以在其他任何轴上进行分组。拿上面例子中的df来说，我们可以根据dtype对列进行分组：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">28</span>]: df.dtypes</span><br><span class="line">Out[<span class="hljs-number">28</span>]: </span><br><span class="line">data1    float64</span><br><span class="line">data2    float64</span><br><span class="line">key1      object</span><br><span class="line">key2      object</span><br><span class="line">dtype: object</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">29</span>]: grouped = df.groupby(df.dtypes, axis=<span class="hljs-number">1</span>)</span><br></pre></td></tr></table></figure><p>可以如下打印分组：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">30</span>]: <span class="hljs-keyword">for</span> dtype, group <span class="hljs-keyword">in</span> grouped:</span><br><span class="line">   ....:     print(dtype)</span><br><span class="line">   ....:     print(group)</span><br><span class="line">   ....:</span><br><span class="line">float64</span><br><span class="line">      data1     data2</span><br><span class="line"><span class="hljs-number">0</span> <span class="hljs-number">-0.204708</span>  <span class="hljs-number">1.393406</span></span><br><span class="line"><span class="hljs-number">1</span>  <span class="hljs-number">0.478943</span>  <span class="hljs-number">0.092908</span></span><br><span class="line"><span class="hljs-number">2</span> <span class="hljs-number">-0.519439</span>  <span class="hljs-number">0.281746</span></span><br><span class="line"><span class="hljs-number">3</span> <span class="hljs-number">-0.555730</span>  <span class="hljs-number">0.769023</span></span><br><span class="line"><span class="hljs-number">4</span>  <span class="hljs-number">1.965781</span>  <span class="hljs-number">1.246435</span></span><br><span class="line">object</span><br><span class="line">  key1 key2</span><br><span class="line"><span class="hljs-number">0</span>    a  one</span><br><span class="line"><span class="hljs-number">1</span>    a  two</span><br><span class="line"><span class="hljs-number">2</span>    b  one</span><br><span class="line"><span class="hljs-number">3</span>    b  two</span><br><span class="line"><span class="hljs-number">4</span>    a  one</span><br></pre></td></tr></table></figure><h2 id="选取一列或列的子集"><a href="#选取一列或列的子集" class="headerlink" title="选取一列或列的子集"></a>选取一列或列的子集</h2><p>对于由DataFrame产生的GroupBy对象，如果用一个（单个字符串）或一组（字符串数组）列名对其进行索引，就能实现选取部分列进行聚合的目的。也就是说：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.groupby(<span class="hljs-string">'key1'</span>)[<span class="hljs-string">'data1'</span>]</span><br><span class="line">df.groupby(<span class="hljs-string">'key1'</span>)[[<span class="hljs-string">'data2'</span>]]</span><br></pre></td></tr></table></figure><p>是以下代码的语法糖：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="hljs-string">'data1'</span>].groupby(df[<span class="hljs-string">'key1'</span>])</span><br><span class="line">df[[<span class="hljs-string">'data2'</span>]].groupby(df[<span class="hljs-string">'key1'</span>])</span><br></pre></td></tr></table></figure><p>尤其对于大数据集，很可能只需要对部分列进行聚合。例如，在前面那个数据集中，如果只需计算data2列的平均值并以DataFrame形式得到结果，可以这样写：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">31</span>]: df.groupby([<span class="hljs-string">'key1'</span>, <span class="hljs-string">'key2'</span>])[[<span class="hljs-string">'data2'</span>]].mean()</span><br><span class="line">Out[<span class="hljs-number">31</span>]: </span><br><span class="line">              data2</span><br><span class="line">key1 key2          </span><br><span class="line">a    one   <span class="hljs-number">1.319920</span></span><br><span class="line">     two   <span class="hljs-number">0.092908</span></span><br><span class="line">b    one   <span class="hljs-number">0.281746</span></span><br><span class="line">     two   <span class="hljs-number">0.769023</span></span><br></pre></td></tr></table></figure><p>这种索引操作所返回的对象是一个已分组的DataFrame（如果传入的是列表或数组）或已分组的Series（如果传入的是标量形式的单个列名）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">32</span>]: s_grouped = df.groupby([<span class="hljs-string">'key1'</span>, <span class="hljs-string">'key2'</span>])[<span class="hljs-string">'data2'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">33</span>]: s_grouped</span><br><span class="line">Out[<span class="hljs-number">33</span>]: &lt;pandas.core.groupby.SeriesGroupBy object at <span class="hljs-number">0x7faa30c78da0</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">34</span>]: s_grouped.mean()</span><br><span class="line">Out[<span class="hljs-number">34</span>]: </span><br><span class="line">key1  key2</span><br><span class="line">a     one     <span class="hljs-number">1.319920</span></span><br><span class="line">      two     <span class="hljs-number">0.092908</span></span><br><span class="line">b     one     <span class="hljs-number">0.281746</span></span><br><span class="line">      two     <span class="hljs-number">0.769023</span></span><br><span class="line">Name: data2, dtype: float64</span><br></pre></td></tr></table></figure><h2 id="通过字典或Series进行分组"><a href="#通过字典或Series进行分组" class="headerlink" title="通过字典或Series进行分组"></a>通过字典或Series进行分组</h2><p>除数组以外，分组信息还可以其他形式存在。来看另一个示例DataFrame：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">35</span>]: people = pd.DataFrame(np.random.randn(<span class="hljs-number">5</span>, <span class="hljs-number">5</span>),</span><br><span class="line">   ....:                       columns=[<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>, <span class="hljs-string">'e'</span>],</span><br><span class="line">   ....:                       index=[<span class="hljs-string">'Joe'</span>, <span class="hljs-string">'Steve'</span>, <span class="hljs-string">'Wes'</span>, <span class="hljs-string">'Jim'</span>, <span class="hljs-string">'Travis'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">36</span>]: people.iloc[<span class="hljs-number">2</span>:<span class="hljs-number">3</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]] = np.nan <span class="hljs-comment"># Add a few NA values</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">37</span>]: people</span><br><span class="line">Out[<span class="hljs-number">37</span>]: </span><br><span class="line">               a         b         c         d         e</span><br><span class="line">Joe     <span class="hljs-number">1.007189</span> <span class="hljs-number">-1.296221</span>  <span class="hljs-number">0.274992</span>  <span class="hljs-number">0.228913</span>  <span class="hljs-number">1.352917</span></span><br><span class="line">Steve   <span class="hljs-number">0.886429</span> <span class="hljs-number">-2.001637</span> <span class="hljs-number">-0.371843</span>  <span class="hljs-number">1.669025</span> <span class="hljs-number">-0.438570</span></span><br><span class="line">Wes    <span class="hljs-number">-0.539741</span>       NaN       NaN <span class="hljs-number">-1.021228</span> <span class="hljs-number">-0.577087</span></span><br><span class="line">Jim     <span class="hljs-number">0.124121</span>  <span class="hljs-number">0.302614</span>  <span class="hljs-number">0.523772</span>  <span class="hljs-number">0.000940</span>  <span class="hljs-number">1.343810</span></span><br><span class="line">Travis <span class="hljs-number">-0.713544</span> <span class="hljs-number">-0.831154</span> <span class="hljs-number">-2.370232</span> <span class="hljs-number">-1.860761</span> <span class="hljs-number">-0.860757</span></span><br></pre></td></tr></table></figure><p>现在，假设已知列的分组关系，并希望根据分组计算列的和：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">38</span>]: mapping = &#123;<span class="hljs-string">'a'</span>: <span class="hljs-string">'red'</span>, <span class="hljs-string">'b'</span>: <span class="hljs-string">'red'</span>, <span class="hljs-string">'c'</span>: <span class="hljs-string">'blue'</span>,</span><br><span class="line">   ....:            <span class="hljs-string">'d'</span>: <span class="hljs-string">'blue'</span>, <span class="hljs-string">'e'</span>: <span class="hljs-string">'red'</span>, <span class="hljs-string">'f'</span> : <span class="hljs-string">'orange'</span>&#125;</span><br></pre></td></tr></table></figure><p>现在，你可以将这个字典传给groupby，来构造数组，但我们可以直接传递字典（我包含了键“f”来强调，存在未使用的分组键是可以的）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">39</span>]: by_column = people.groupby(mapping, axis=<span class="hljs-number">1</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">40</span>]: by_column.sum()</span><br><span class="line">Out[<span class="hljs-number">40</span>]: </span><br><span class="line">            blue       red</span><br><span class="line">Joe     <span class="hljs-number">0.503905</span>  <span class="hljs-number">1.063885</span></span><br><span class="line">Steve   <span class="hljs-number">1.297183</span> <span class="hljs-number">-1.553778</span></span><br><span class="line">Wes    <span class="hljs-number">-1.021228</span> <span class="hljs-number">-1.116829</span></span><br><span class="line">Jim     <span class="hljs-number">0.524712</span>  <span class="hljs-number">1.770545</span></span><br><span class="line">Travis <span class="hljs-number">-4.230992</span> <span class="hljs-number">-2.405455</span></span><br></pre></td></tr></table></figure><p>Series也有同样的功能，它可以被看做一个固定大小的映射：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">41</span>]: map_series = pd.Series(mapping)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">42</span>]: map_series</span><br><span class="line">Out[<span class="hljs-number">42</span>]: </span><br><span class="line">a       red</span><br><span class="line">b       red</span><br><span class="line">c      blue</span><br><span class="line">d      blue</span><br><span class="line">e       red</span><br><span class="line">f    orange</span><br><span class="line">dtype: object</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">43</span>]: people.groupby(map_series, axis=<span class="hljs-number">1</span>).count()</span><br><span class="line">Out[<span class="hljs-number">43</span>]: </span><br><span class="line">        blue  red</span><br><span class="line">Joe        <span class="hljs-number">2</span>    <span class="hljs-number">3</span></span><br><span class="line">Steve      <span class="hljs-number">2</span>    <span class="hljs-number">3</span></span><br><span class="line">Wes        <span class="hljs-number">1</span>    <span class="hljs-number">2</span></span><br><span class="line">Jim        <span class="hljs-number">2</span>    <span class="hljs-number">3</span></span><br><span class="line">Travis     <span class="hljs-number">2</span>    <span class="hljs-number">3</span></span><br></pre></td></tr></table></figure><h2 id="通过函数进行分组"><a href="#通过函数进行分组" class="headerlink" title="通过函数进行分组"></a>通过函数进行分组</h2><p>比起使用字典或Series，使用Python函数是一种更原生的方法定义分组映射。任何被当做分组键的函数都会在各个索引值上被调用一次，其返回值就会被用作分组名称。具体点说，以上一小节的示例DataFrame为例，其索引值为人的名字。你可以计算一个字符串长度的数组，更简单的方法是传入len函数：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">44</span>]: people.groupby(len).sum()</span><br><span class="line">Out[<span class="hljs-number">44</span>]: </span><br><span class="line">          a         b         c         d         e</span><br><span class="line"><span class="hljs-number">3</span>  <span class="hljs-number">0.591569</span> <span class="hljs-number">-0.993608</span>  <span class="hljs-number">0.798764</span> <span class="hljs-number">-0.791374</span>  <span class="hljs-number">2.119639</span></span><br><span class="line"><span class="hljs-number">5</span>  <span class="hljs-number">0.886429</span> <span class="hljs-number">-2.001637</span> <span class="hljs-number">-0.371843</span>  <span class="hljs-number">1.669025</span> <span class="hljs-number">-0.438570</span></span><br><span class="line"><span class="hljs-number">6</span> <span class="hljs-number">-0.713544</span> <span class="hljs-number">-0.831154</span> <span class="hljs-number">-2.370232</span> <span class="hljs-number">-1.860761</span> <span class="hljs-number">-0.860757</span></span><br></pre></td></tr></table></figure><p>将函数跟数组、列表、字典、Series混合使用也不是问题，因为任何东西在内部都会被转换为数组：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">45</span>]: key_list = [<span class="hljs-string">'one'</span>, <span class="hljs-string">'one'</span>, <span class="hljs-string">'one'</span>, <span class="hljs-string">'two'</span>, <span class="hljs-string">'two'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">46</span>]: people.groupby([len, key_list]).min()</span><br><span class="line">Out[<span class="hljs-number">46</span>]: </span><br><span class="line">              a         b         c         d         e</span><br><span class="line"><span class="hljs-number">3</span> one <span class="hljs-number">-0.539741</span> <span class="hljs-number">-1.296221</span>  <span class="hljs-number">0.274992</span> <span class="hljs-number">-1.021228</span> <span class="hljs-number">-0.577087</span></span><br><span class="line">  two  <span class="hljs-number">0.124121</span>  <span class="hljs-number">0.302614</span>  <span class="hljs-number">0.523772</span>  <span class="hljs-number">0.000940</span>  <span class="hljs-number">1.343810</span></span><br><span class="line"><span class="hljs-number">5</span> one  <span class="hljs-number">0.886429</span> <span class="hljs-number">-2.001637</span> <span class="hljs-number">-0.371843</span>  <span class="hljs-number">1.669025</span> <span class="hljs-number">-0.438570</span></span><br><span class="line"><span class="hljs-number">6</span> two <span class="hljs-number">-0.713544</span> <span class="hljs-number">-0.831154</span> <span class="hljs-number">-2.370232</span> <span class="hljs-number">-1.860761</span> <span class="hljs-number">-0.860757</span></span><br></pre></td></tr></table></figure><h2 id="根据索引级别分组"><a href="#根据索引级别分组" class="headerlink" title="根据索引级别分组"></a>根据索引级别分组</h2><p>层次化索引数据集最方便的地方就在于它能够根据轴索引的一个级别进行聚合：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">47</span>]: columns = pd.MultiIndex.from_arrays([[<span class="hljs-string">'US'</span>, <span class="hljs-string">'US'</span>, <span class="hljs-string">'US'</span>, <span class="hljs-string">'JP'</span>, <span class="hljs-string">'JP'</span>],</span><br><span class="line">   ....:                                     [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>]],</span><br><span class="line">   ....:                                     names=[<span class="hljs-string">'cty'</span>, <span class="hljs-string">'tenor'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">48</span>]: hier_df = pd.DataFrame(np.random.randn(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>), columns=columns)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">49</span>]: hier_df</span><br><span class="line">Out[<span class="hljs-number">49</span>]: </span><br><span class="line">cty          US                            JP          </span><br><span class="line">tenor         <span class="hljs-number">1</span>         <span class="hljs-number">3</span>         <span class="hljs-number">5</span>         <span class="hljs-number">1</span>         <span class="hljs-number">3</span></span><br><span class="line"><span class="hljs-number">0</span>      <span class="hljs-number">0.560145</span> <span class="hljs-number">-1.265934</span>  <span class="hljs-number">0.119827</span> <span class="hljs-number">-1.063512</span>  <span class="hljs-number">0.332883</span></span><br><span class="line"><span class="hljs-number">1</span>     <span class="hljs-number">-2.359419</span> <span class="hljs-number">-0.199543</span> <span class="hljs-number">-1.541996</span> <span class="hljs-number">-0.970736</span> <span class="hljs-number">-1.307030</span></span><br><span class="line"><span class="hljs-number">2</span>      <span class="hljs-number">0.286350</span>  <span class="hljs-number">0.377984</span> <span class="hljs-number">-0.753887</span>  <span class="hljs-number">0.331286</span>  <span class="hljs-number">1.349742</span></span><br><span class="line"><span class="hljs-number">3</span>      <span class="hljs-number">0.069877</span>  <span class="hljs-number">0.246674</span> <span class="hljs-number">-0.011862</span>  <span class="hljs-number">1.004812</span>  <span class="hljs-number">1.327195</span></span><br></pre></td></tr></table></figure><p>要根据级别分组，使用level关键字传递级别序号或名字：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">50</span>]: hier_df.groupby(level=<span class="hljs-string">'cty'</span>, axis=<span class="hljs-number">1</span>).count()</span><br><span class="line">Out[<span class="hljs-number">50</span>]: </span><br><span class="line">cty  JP  US</span><br><span class="line"><span class="hljs-number">0</span>     <span class="hljs-number">2</span>   <span class="hljs-number">3</span></span><br><span class="line"><span class="hljs-number">1</span>     <span class="hljs-number">2</span>   <span class="hljs-number">3</span></span><br><span class="line"><span class="hljs-number">2</span>     <span class="hljs-number">2</span>   <span class="hljs-number">3</span></span><br><span class="line"><span class="hljs-number">3</span>     <span class="hljs-number">2</span>   <span class="hljs-number">3</span></span><br></pre></td></tr></table></figure><h1 id="10-2-数据聚合"><a href="#10-2-数据聚合" class="headerlink" title="10.2 数据聚合"></a>10.2 数据聚合</h1><p>聚合指的是任何能够从数组产生标量值的数据转换过程。之前的例子已经用过一些，比如mean、count、min以及sum等。你可能想知道在GroupBy对象上调用mean()时究竟发生了什么。许多常见的聚合运算（如表10-1所示）都有进行优化。然而，除了这些方法，你还可以使用其它的。</p><p><img src="/images/blog/7178691-ba8de524e08b1b6f.webp" alt="img"></p><p>表10-1 经过优化的groupby方法</p><p>你可以使用自己发明的聚合运算，还可以调用分组对象上已经定义好的任何方法。例如，quantile可以计算Series或DataFrame列的样本分位数。</p><p>虽然quantile并没有明确地实现于GroupBy，但它是一个Series方法，所以这里是能用的。实际上，GroupBy会高效地对Series进行切片，然后对各片调用piece.quantile(0.9)，最后将这些结果组装成最终结果：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">51</span>]: df</span><br><span class="line">Out[<span class="hljs-number">51</span>]: </span><br><span class="line">      data1     data2 key1 key2</span><br><span class="line"><span class="hljs-number">0</span> <span class="hljs-number">-0.204708</span>  <span class="hljs-number">1.393406</span>    a  one</span><br><span class="line"><span class="hljs-number">1</span>  <span class="hljs-number">0.478943</span>  <span class="hljs-number">0.092908</span>    a  two</span><br><span class="line"><span class="hljs-number">2</span> <span class="hljs-number">-0.519439</span>  <span class="hljs-number">0.281746</span>    b  one</span><br><span class="line"><span class="hljs-number">3</span> <span class="hljs-number">-0.555730</span>  <span class="hljs-number">0.769023</span>    b  two</span><br><span class="line"><span class="hljs-number">4</span>  <span class="hljs-number">1.965781</span>  <span class="hljs-number">1.246435</span>    a  one</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">52</span>]: grouped = df.groupby(<span class="hljs-string">'key1'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">53</span>]: grouped[<span class="hljs-string">'data1'</span>].quantile(<span class="hljs-number">0.9</span>)</span><br><span class="line">Out[<span class="hljs-number">53</span>]: </span><br><span class="line">key1</span><br><span class="line">a    <span class="hljs-number">1.668413</span></span><br><span class="line">b   <span class="hljs-number">-0.523068</span></span><br><span class="line">Name: data1, dtype: float64</span><br></pre></td></tr></table></figure><p>如果要使用你自己的聚合函数，只需将其传入aggregate或agg方法即可：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">54</span>]: <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">peak_to_peak</span><span class="hljs-params">(arr)</span>:</span></span><br><span class="line">   ....:     <span class="hljs-keyword">return</span> arr.max() - arr.min()</span><br><span class="line">In [<span class="hljs-number">55</span>]: grouped.agg(peak_to_peak)</span><br><span class="line">Out[<span class="hljs-number">55</span>]: </span><br><span class="line">         data1     data2</span><br><span class="line">key1                    </span><br><span class="line">a     <span class="hljs-number">2.170488</span>  <span class="hljs-number">1.300498</span></span><br><span class="line">b     <span class="hljs-number">0.036292</span>  <span class="hljs-number">0.487276</span></span><br></pre></td></tr></table></figure><p>你可能注意到注意，有些方法（如describe）也是可以用在这里的，即使严格来讲，它们并非聚合运算：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">56</span>]: grouped.describe()</span><br><span class="line">Out[<span class="hljs-number">56</span>]: </span><br><span class="line">     data1                                                              \</span><br><span class="line">     count      mean       std       min       <span class="hljs-number">25</span>%       <span class="hljs-number">50</span>%       <span class="hljs-number">75</span>%   </span><br><span class="line">key1                                                                     </span><br><span class="line">a      <span class="hljs-number">3.0</span>  <span class="hljs-number">0.746672</span>  <span class="hljs-number">1.109736</span> <span class="hljs-number">-0.204708</span>  <span class="hljs-number">0.137118</span>  <span class="hljs-number">0.478943</span>  <span class="hljs-number">1.222362</span>   </span><br><span class="line">b      <span class="hljs-number">2.0</span> <span class="hljs-number">-0.537585</span>  <span class="hljs-number">0.025662</span> <span class="hljs-number">-0.555730</span> <span class="hljs-number">-0.546657</span> <span class="hljs-number">-0.537585</span> <span class="hljs-number">-0.528512</span>   </span><br><span class="line">               data2                                                    \</span><br><span class="line">max count      mean       std       min       <span class="hljs-number">25</span>%       <span class="hljs-number">50</span>%   </span><br><span class="line">key1                                                                     </span><br><span class="line">a     <span class="hljs-number">1.965781</span>   <span class="hljs-number">3.0</span>  <span class="hljs-number">0.910916</span>  <span class="hljs-number">0.712217</span>  <span class="hljs-number">0.092908</span>  <span class="hljs-number">0.669671</span>  <span class="hljs-number">1.246435</span>   </span><br><span class="line">b    <span class="hljs-number">-0.519439</span>   <span class="hljs-number">2.0</span>  <span class="hljs-number">0.525384</span>  <span class="hljs-number">0.344556</span>  <span class="hljs-number">0.281746</span>  <span class="hljs-number">0.403565</span>  <span class="hljs-number">0.525384</span>   </span><br><span class="line">                          </span><br><span class="line">           <span class="hljs-number">75</span>%       max  </span><br><span class="line">key1                      </span><br><span class="line">a     <span class="hljs-number">1.319920</span>  <span class="hljs-number">1.393406</span>  </span><br><span class="line">b     <span class="hljs-number">0.647203</span>  <span class="hljs-number">0.769023</span></span><br></pre></td></tr></table></figure><p>在后面的10.3节，我将详细说明这到底是怎么回事。</p><blockquote><p>笔记：自定义聚合函数要比表10-1中那些经过优化的函数慢得多。这是因为在构造中间分组数据块时存在非常大的开销（函数调用、数据重排等）。</p></blockquote><h2 id="面向列的多函数应用"><a href="#面向列的多函数应用" class="headerlink" title="面向列的多函数应用"></a>面向列的多函数应用</h2><p>回到前面小费的例子。使用read_csv导入数据之后，我们添加了一个小费百分比的列tip_pct：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">57</span>]: tips = pd.read_csv(<span class="hljs-string">'examples/tips.csv'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Add tip percentage of total bill</span></span><br><span class="line">In [<span class="hljs-number">58</span>]: tips[<span class="hljs-string">'tip_pct'</span>] = tips[<span class="hljs-string">'tip'</span>] / tips[<span class="hljs-string">'total_bill'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">59</span>]: tips[:<span class="hljs-number">6</span>]</span><br><span class="line">Out[<span class="hljs-number">59</span>]: </span><br><span class="line">   total_bill   tip smoker  day    time  size   tip_pct</span><br><span class="line"><span class="hljs-number">0</span>       <span class="hljs-number">16.99</span>  <span class="hljs-number">1.01</span>     No  Sun  Dinner     <span class="hljs-number">2</span>  <span class="hljs-number">0.059447</span></span><br><span class="line"><span class="hljs-number">1</span>       <span class="hljs-number">10.34</span>  <span class="hljs-number">1.66</span>     No  Sun  Dinner     <span class="hljs-number">3</span>  <span class="hljs-number">0.160542</span></span><br><span class="line"><span class="hljs-number">2</span>       <span class="hljs-number">21.01</span>  <span class="hljs-number">3.50</span>     No  Sun  Dinner     <span class="hljs-number">3</span>  <span class="hljs-number">0.166587</span></span><br><span class="line"><span class="hljs-number">3</span>       <span class="hljs-number">23.68</span>  <span class="hljs-number">3.31</span>     No  Sun  Dinner     <span class="hljs-number">2</span>  <span class="hljs-number">0.139780</span></span><br><span class="line"><span class="hljs-number">4</span>       <span class="hljs-number">24.59</span>  <span class="hljs-number">3.61</span>     No  Sun  Dinner     <span class="hljs-number">4</span>  <span class="hljs-number">0.146808</span></span><br><span class="line"><span class="hljs-number">5</span>       <span class="hljs-number">25.29</span>  <span class="hljs-number">4.71</span>     No  Sun  Dinner     <span class="hljs-number">4</span>  <span class="hljs-number">0.186240</span></span><br></pre></td></tr></table></figure><p>你已经看到，对Series或DataFrame列的聚合运算其实就是使用aggregate（使用自定义函数）或调用诸如mean、std之类的方法。然而，你可能希望对不同的列使用不同的聚合函数，或一次应用多个函数。其实这也好办，我将通过一些示例来进行讲解。首先，我根据天和smoker对tips进行分组：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">60</span>]: grouped = tips.groupby([<span class="hljs-string">'day'</span>, <span class="hljs-string">'smoker'</span>])</span><br></pre></td></tr></table></figure><p>注意，对于表10-1中的那些描述统计，可以将函数名以字符串的形式传入：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">61</span>]: grouped_pct = grouped[<span class="hljs-string">'tip_pct'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">62</span>]: grouped_pct.agg(<span class="hljs-string">'mean'</span>)</span><br><span class="line">Out[<span class="hljs-number">62</span>]: </span><br><span class="line">day   smoker</span><br><span class="line">Fri   No        <span class="hljs-number">0.151650</span></span><br><span class="line">      Yes       <span class="hljs-number">0.174783</span></span><br><span class="line">Sat   No        <span class="hljs-number">0.158048</span></span><br><span class="line">      Yes       <span class="hljs-number">0.147906</span></span><br><span class="line">Sun   No        <span class="hljs-number">0.160113</span></span><br><span class="line">      Yes       <span class="hljs-number">0.187250</span></span><br><span class="line">Thur  No        <span class="hljs-number">0.160298</span></span><br><span class="line">      Yes       <span class="hljs-number">0.163863</span></span><br><span class="line">Name: tip_pct, dtype: float64</span><br></pre></td></tr></table></figure><p>如果传入一组函数或函数名，得到的DataFrame的列就会以相应的函数命名：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">63</span>]: grouped_pct.agg([<span class="hljs-string">'mean'</span>, <span class="hljs-string">'std'</span>, peak_to_peak])</span><br><span class="line">Out[<span class="hljs-number">63</span>]: </span><br><span class="line">                 mean       std  peak_to_peak</span><br><span class="line">day  smoker                                  </span><br><span class="line">Fri  No      <span class="hljs-number">0.151650</span>  <span class="hljs-number">0.028123</span>      <span class="hljs-number">0.067349</span></span><br><span class="line">     Yes     <span class="hljs-number">0.174783</span>  <span class="hljs-number">0.051293</span>      <span class="hljs-number">0.159925</span></span><br><span class="line">Sat  No      <span class="hljs-number">0.158048</span>  <span class="hljs-number">0.039767</span>      <span class="hljs-number">0.235193</span></span><br><span class="line">     Yes     <span class="hljs-number">0.147906</span>  <span class="hljs-number">0.061375</span>      <span class="hljs-number">0.290095</span></span><br><span class="line">Sun  No      <span class="hljs-number">0.160113</span>  <span class="hljs-number">0.042347</span>      <span class="hljs-number">0.193226</span></span><br><span class="line">     Yes     <span class="hljs-number">0.187250</span>  <span class="hljs-number">0.154134</span>      <span class="hljs-number">0.644685</span></span><br><span class="line">Thur No      <span class="hljs-number">0.160298</span>  <span class="hljs-number">0.038774</span>      <span class="hljs-number">0.193350</span></span><br><span class="line">     Yes     <span class="hljs-number">0.163863</span>  <span class="hljs-number">0.039389</span>      <span class="hljs-number">0.151240</span></span><br></pre></td></tr></table></figure><p>这里，我们传递了一组聚合函数进行聚合，独立对数据分组进行评估。</p><p>你并非一定要接受GroupBy自动给出的那些列名，特别是lambda函数，它们的名称是’<lambda>‘，这样的辨识度就很低了（通过函数的<strong>name</strong>属性看看就知道了）。因此，如果传入的是一个由(name,function)元组组成的列表，则各元组的第一个元素就会被用作DataFrame的列名（可以将这种二元元组列表看做一个有序映射）：</lambda></p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">64</span>]: grouped_pct.agg([(<span class="hljs-string">'foo'</span>, <span class="hljs-string">'mean'</span>), (<span class="hljs-string">'bar'</span>, np.std)])</span><br><span class="line">Out[<span class="hljs-number">64</span>]: </span><br><span class="line">                  foo       bar</span><br><span class="line">day  smoker                    </span><br><span class="line">Fri  No      <span class="hljs-number">0.151650</span>  <span class="hljs-number">0.028123</span></span><br><span class="line">     Yes     <span class="hljs-number">0.174783</span>  <span class="hljs-number">0.051293</span></span><br><span class="line">Sat  No      <span class="hljs-number">0.158048</span>  <span class="hljs-number">0.039767</span></span><br><span class="line">     Yes     <span class="hljs-number">0.147906</span>  <span class="hljs-number">0.061375</span></span><br><span class="line">Sun  No      <span class="hljs-number">0.160113</span>  <span class="hljs-number">0.042347</span></span><br><span class="line">     Yes     <span class="hljs-number">0.187250</span>  <span class="hljs-number">0.154134</span></span><br><span class="line">Thur No      <span class="hljs-number">0.160298</span>  <span class="hljs-number">0.038774</span></span><br><span class="line">     Yes     <span class="hljs-number">0.163863</span>  <span class="hljs-number">0.039389</span></span><br></pre></td></tr></table></figure><p>对于DataFrame，你还有更多选择，你可以定义一组应用于全部列的一组函数，或不同的列应用不同的函数。假设我们想要对tip_pct和total_bill列计算三个统计信息：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">65</span>]: functions = [<span class="hljs-string">'count'</span>, <span class="hljs-string">'mean'</span>, <span class="hljs-string">'max'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">66</span>]: result = grouped[<span class="hljs-string">'tip_pct'</span>, <span class="hljs-string">'total_bill'</span>].agg(functions)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">67</span>]: result</span><br><span class="line">Out[<span class="hljs-number">67</span>]: </span><br><span class="line">            tip_pct                     total_bill                  </span><br><span class="line">              count      mean       max      count       mean    max</span><br><span class="line">day  smoker                                                         </span><br><span class="line">Fri  No           <span class="hljs-number">4</span>  <span class="hljs-number">0.151650</span>  <span class="hljs-number">0.187735</span>          <span class="hljs-number">4</span>  <span class="hljs-number">18.420000</span>  <span class="hljs-number">22.75</span></span><br><span class="line">     Yes         <span class="hljs-number">15</span>  <span class="hljs-number">0.174783</span>  <span class="hljs-number">0.263480</span>         <span class="hljs-number">15</span>  <span class="hljs-number">16.813333</span>  <span class="hljs-number">40.17</span></span><br><span class="line">Sat  No          <span class="hljs-number">45</span>  <span class="hljs-number">0.158048</span>  <span class="hljs-number">0.291990</span>         <span class="hljs-number">45</span>  <span class="hljs-number">19.661778</span>  <span class="hljs-number">48.33</span></span><br><span class="line">     Yes         <span class="hljs-number">42</span>  <span class="hljs-number">0.147906</span>  <span class="hljs-number">0.325733</span>         <span class="hljs-number">42</span>  <span class="hljs-number">21.276667</span>  <span class="hljs-number">50.81</span></span><br><span class="line">Sun  No          <span class="hljs-number">57</span>  <span class="hljs-number">0.160113</span>  <span class="hljs-number">0.252672</span>         <span class="hljs-number">57</span>  <span class="hljs-number">20.506667</span>  <span class="hljs-number">48.17</span></span><br><span class="line">     Yes         <span class="hljs-number">19</span>  <span class="hljs-number">0.187250</span>  <span class="hljs-number">0.710345</span>         <span class="hljs-number">19</span>  <span class="hljs-number">24.120000</span>  <span class="hljs-number">45.35</span></span><br><span class="line">Thur No          <span class="hljs-number">45</span>  <span class="hljs-number">0.160298</span>  <span class="hljs-number">0.266312</span>         <span class="hljs-number">45</span>  <span class="hljs-number">17.113111</span>  <span class="hljs-number">41.19</span></span><br><span class="line">     Yes         <span class="hljs-number">17</span>  <span class="hljs-number">0.163863</span>  <span class="hljs-number">0.241255</span>         <span class="hljs-number">17</span>  <span class="hljs-number">19.190588</span>  <span class="hljs-number">43.11</span></span><br></pre></td></tr></table></figure><p>如你所见，结果DataFrame拥有层次化的列，这相当于分别对各列进行聚合，然后用concat将结果组装到一起，使用列名用作keys参数：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">68</span>]: result[<span class="hljs-string">'tip_pct'</span>]</span><br><span class="line">Out[<span class="hljs-number">68</span>]: </span><br><span class="line">             count      mean       max</span><br><span class="line">day  smoker                           </span><br><span class="line">Fri  No          <span class="hljs-number">4</span>  <span class="hljs-number">0.151650</span>  <span class="hljs-number">0.187735</span></span><br><span class="line">     Yes        <span class="hljs-number">15</span>  <span class="hljs-number">0.174783</span>  <span class="hljs-number">0.263480</span></span><br><span class="line">Sat  No         <span class="hljs-number">45</span>  <span class="hljs-number">0.158048</span>  <span class="hljs-number">0.291990</span></span><br><span class="line">     Yes        <span class="hljs-number">42</span>  <span class="hljs-number">0.147906</span>  <span class="hljs-number">0.325733</span></span><br><span class="line">Sun  No         <span class="hljs-number">57</span>  <span class="hljs-number">0.160113</span>  <span class="hljs-number">0.252672</span></span><br><span class="line">     Yes        <span class="hljs-number">19</span>  <span class="hljs-number">0.187250</span>  <span class="hljs-number">0.710345</span></span><br><span class="line">Thur No         <span class="hljs-number">45</span>  <span class="hljs-number">0.160298</span>  <span class="hljs-number">0.266312</span></span><br><span class="line">     Yes        <span class="hljs-number">17</span>  <span class="hljs-number">0.163863</span>  <span class="hljs-number">0.241255</span></span><br></pre></td></tr></table></figure><p>跟前面一样，这里也可以传入带有自定义名称的一组元组：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">69</span>]: ftuples = [(<span class="hljs-string">'Durchschnitt'</span>, <span class="hljs-string">'mean'</span>),(<span class="hljs-string">'Abweichung'</span>, np.var)]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">70</span>]: grouped[<span class="hljs-string">'tip_pct'</span>, <span class="hljs-string">'total_bill'</span>].agg(ftuples)</span><br><span class="line">Out[<span class="hljs-number">70</span>]: </span><br><span class="line">                 tip_pct              total_bill            </span><br><span class="line">            Durchschnitt Abweichung Durchschnitt  Abweichung</span><br><span class="line">day  smoker                                                 </span><br><span class="line">Fri  No         <span class="hljs-number">0.151650</span>   <span class="hljs-number">0.000791</span>    <span class="hljs-number">18.420000</span>   <span class="hljs-number">25.596333</span></span><br><span class="line">     Yes        <span class="hljs-number">0.174783</span>   <span class="hljs-number">0.002631</span>    <span class="hljs-number">16.813333</span>   <span class="hljs-number">82.562438</span></span><br><span class="line">Sat  No         <span class="hljs-number">0.158048</span>   <span class="hljs-number">0.001581</span>    <span class="hljs-number">19.661778</span>   <span class="hljs-number">79.908965</span></span><br><span class="line">     Yes        <span class="hljs-number">0.147906</span>   <span class="hljs-number">0.003767</span>    <span class="hljs-number">21.276667</span>  <span class="hljs-number">101.387535</span></span><br><span class="line">Sun  No         <span class="hljs-number">0.160113</span>   <span class="hljs-number">0.001793</span>    <span class="hljs-number">20.506667</span>   <span class="hljs-number">66.099980</span></span><br><span class="line">     Yes        <span class="hljs-number">0.187250</span>   <span class="hljs-number">0.023757</span>    <span class="hljs-number">24.120000</span>  <span class="hljs-number">109.046044</span></span><br><span class="line">Thur No         <span class="hljs-number">0.160298</span>   <span class="hljs-number">0.001503</span>    <span class="hljs-number">17.113111</span>   <span class="hljs-number">59.625081</span></span><br><span class="line">     Yes        <span class="hljs-number">0.163863</span>   <span class="hljs-number">0.001551</span>    <span class="hljs-number">19.190588</span>   <span class="hljs-number">69.808518</span></span><br></pre></td></tr></table></figure><p>现在，假设你想要对一个列或不同的列应用不同的函数。具体的办法是向agg传入一个从列名映射到函数的字典：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">71</span>]: grouped.agg(&#123;<span class="hljs-string">'tip'</span> : np.max, <span class="hljs-string">'size'</span> : <span class="hljs-string">'sum'</span>&#125;)</span><br><span class="line">Out[<span class="hljs-number">71</span>]: </span><br><span class="line">               tip  size</span><br><span class="line">day  smoker             </span><br><span class="line">Fri  No       <span class="hljs-number">3.50</span>     <span class="hljs-number">9</span></span><br><span class="line">     Yes      <span class="hljs-number">4.73</span>    <span class="hljs-number">31</span></span><br><span class="line">Sat  No       <span class="hljs-number">9.00</span>   <span class="hljs-number">115</span></span><br><span class="line">     Yes     <span class="hljs-number">10.00</span>   <span class="hljs-number">104</span></span><br><span class="line">Sun  No       <span class="hljs-number">6.00</span>   <span class="hljs-number">167</span></span><br><span class="line">     Yes      <span class="hljs-number">6.50</span>    <span class="hljs-number">49</span></span><br><span class="line">Thur No       <span class="hljs-number">6.70</span>   <span class="hljs-number">112</span></span><br><span class="line">     Yes      <span class="hljs-number">5.00</span>    <span class="hljs-number">40</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">72</span>]: grouped.agg(&#123;<span class="hljs-string">'tip_pct'</span> : [<span class="hljs-string">'min'</span>, <span class="hljs-string">'max'</span>, <span class="hljs-string">'mean'</span>, <span class="hljs-string">'std'</span>],</span><br><span class="line">   ....:              <span class="hljs-string">'size'</span> : <span class="hljs-string">'sum'</span>&#125;)</span><br><span class="line">Out[<span class="hljs-number">72</span>]: </span><br><span class="line">              tip_pct                               size</span><br><span class="line">                  min       max      mean       std  sum</span><br><span class="line">day  smoker                                             </span><br><span class="line">Fri  No      <span class="hljs-number">0.120385</span>  <span class="hljs-number">0.187735</span>  <span class="hljs-number">0.151650</span>  <span class="hljs-number">0.028123</span>    <span class="hljs-number">9</span></span><br><span class="line">     Yes     <span class="hljs-number">0.103555</span>  <span class="hljs-number">0.263480</span>  <span class="hljs-number">0.174783</span>  <span class="hljs-number">0.051293</span>   <span class="hljs-number">31</span></span><br><span class="line">Sat  No      <span class="hljs-number">0.056797</span>  <span class="hljs-number">0.291990</span>  <span class="hljs-number">0.158048</span>  <span class="hljs-number">0.039767</span>  <span class="hljs-number">115</span></span><br><span class="line">     Yes     <span class="hljs-number">0.035638</span>  <span class="hljs-number">0.325733</span>  <span class="hljs-number">0.147906</span>  <span class="hljs-number">0.061375</span>  <span class="hljs-number">104</span></span><br><span class="line">Sun  No      <span class="hljs-number">0.059447</span>  <span class="hljs-number">0.252672</span>  <span class="hljs-number">0.160113</span>  <span class="hljs-number">0.042347</span>  <span class="hljs-number">167</span></span><br><span class="line">     Yes     <span class="hljs-number">0.065660</span>  <span class="hljs-number">0.710345</span>  <span class="hljs-number">0.187250</span>  <span class="hljs-number">0.154134</span>   <span class="hljs-number">49</span></span><br><span class="line">Thur No      <span class="hljs-number">0.072961</span>  <span class="hljs-number">0.266312</span>  <span class="hljs-number">0.160298</span>  <span class="hljs-number">0.038774</span>  <span class="hljs-number">112</span></span><br><span class="line">     Yes     <span class="hljs-number">0.090014</span>  <span class="hljs-number">0.241255</span>  <span class="hljs-number">0.163863</span>  <span class="hljs-number">0.039389</span>   <span class="hljs-number">40</span></span><br></pre></td></tr></table></figure><p>只有将多个函数应用到至少一列时，DataFrame才会拥有层次化的列。</p><h2 id="以“没有行索引”的形式返回聚合数据"><a href="#以“没有行索引”的形式返回聚合数据" class="headerlink" title="以“没有行索引”的形式返回聚合数据"></a>以“没有行索引”的形式返回聚合数据</h2><p>到目前为止，所有示例中的聚合数据都有由唯一的分组键组成的索引（可能还是层次化的）。由于并不总是需要如此，所以你可以向groupby传入as_index=False以禁用该功能：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">73</span>]: tips.groupby([<span class="hljs-string">'day'</span>, <span class="hljs-string">'smoker'</span>], as_index=<span class="hljs-literal">False</span>).mean()</span><br><span class="line">Out[<span class="hljs-number">73</span>]: </span><br><span class="line">    day smoker  total_bill       tip      size   tip_pct</span><br><span class="line"><span class="hljs-number">0</span>   Fri     No   <span class="hljs-number">18.420000</span>  <span class="hljs-number">2.812500</span>  <span class="hljs-number">2.250000</span>  <span class="hljs-number">0.151650</span></span><br><span class="line"><span class="hljs-number">1</span>   Fri    Yes   <span class="hljs-number">16.813333</span>  <span class="hljs-number">2.714000</span>  <span class="hljs-number">2.066667</span>  <span class="hljs-number">0.174783</span></span><br><span class="line"><span class="hljs-number">2</span>   Sat     No   <span class="hljs-number">19.661778</span>  <span class="hljs-number">3.102889</span>  <span class="hljs-number">2.555556</span>  <span class="hljs-number">0.158048</span></span><br><span class="line"><span class="hljs-number">3</span>   Sat    Yes   <span class="hljs-number">21.276667</span>  <span class="hljs-number">2.875476</span>  <span class="hljs-number">2.476190</span>  <span class="hljs-number">0.147906</span></span><br><span class="line"><span class="hljs-number">4</span>   Sun     No   <span class="hljs-number">20.506667</span>  <span class="hljs-number">3.167895</span>  <span class="hljs-number">2.929825</span>  <span class="hljs-number">0.160113</span></span><br><span class="line"><span class="hljs-number">5</span>   Sun    Yes   <span class="hljs-number">24.120000</span>  <span class="hljs-number">3.516842</span>  <span class="hljs-number">2.578947</span>  <span class="hljs-number">0.187250</span></span><br><span class="line"><span class="hljs-number">6</span>  Thur     No   <span class="hljs-number">17.113111</span>  <span class="hljs-number">2.673778</span>  <span class="hljs-number">2.488889</span>  <span class="hljs-number">0.160298</span></span><br><span class="line"><span class="hljs-number">7</span>  Thur    Yes   <span class="hljs-number">19.190588</span>  <span class="hljs-number">3.030000</span>  <span class="hljs-number">2.352941</span>  <span class="hljs-number">0.163863</span></span><br></pre></td></tr></table></figure><p>当然，对结果调用reset_index也能得到这种形式的结果。使用as_index=False方法可以避免一些不必要的计算。</p><h1 id="10-3-apply：一般性的“拆分－应用－合并”"><a href="#10-3-apply：一般性的“拆分－应用－合并”" class="headerlink" title="10.3 apply：一般性的“拆分－应用－合并”"></a>10.3 apply：一般性的“拆分－应用－合并”</h1><p>最通用的GroupBy方法是apply，本节剩余部分将重点讲解它。如图10-2所示，apply会将待处理的对象拆分成多个片段，然后对各片段调用传入的函数，最后尝试将各片段组合到一起。</p><p><img src="/images/blog/7178691-7e8bb217f599b4ae.webp" alt="img"></p><p>图10-2 分组聚合示例</p><p>回到之前那个小费数据集，假设你想要根据分组选出最高的5个tip_pct值。首先，编写一个选取指定列具有最大值的行的函数：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">74</span>]: <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">top</span><span class="hljs-params">(df, n=<span class="hljs-number">5</span>, column=<span class="hljs-string">'tip_pct'</span>)</span>:</span></span><br><span class="line">   ....:     <span class="hljs-keyword">return</span> df.sort_values(by=column)[-n:]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">75</span>]: top(tips, n=<span class="hljs-number">6</span>)</span><br><span class="line">Out[<span class="hljs-number">75</span>]: </span><br><span class="line">     total_bill   tip smoker  day    time  size   tip_pct</span><br><span class="line"><span class="hljs-number">109</span>       <span class="hljs-number">14.31</span>  <span class="hljs-number">4.00</span>    Yes  Sat  Dinner     <span class="hljs-number">2</span>  <span class="hljs-number">0.279525</span></span><br><span class="line"><span class="hljs-number">183</span>       <span class="hljs-number">23.17</span>  <span class="hljs-number">6.50</span>    Yes  Sun  Dinner     <span class="hljs-number">4</span>  <span class="hljs-number">0.280535</span></span><br><span class="line"><span class="hljs-number">232</span>       <span class="hljs-number">11.61</span>  <span class="hljs-number">3.39</span>     No  Sat  Dinner     <span class="hljs-number">2</span>  <span class="hljs-number">0.291990</span></span><br><span class="line"><span class="hljs-number">67</span>         <span class="hljs-number">3.07</span>  <span class="hljs-number">1.00</span>    Yes  Sat  Dinner     <span class="hljs-number">1</span>  <span class="hljs-number">0.325733</span></span><br><span class="line"><span class="hljs-number">178</span>        <span class="hljs-number">9.60</span>  <span class="hljs-number">4.00</span>    Yes  Sun  Dinner     <span class="hljs-number">2</span>  <span class="hljs-number">0.416667</span></span><br><span class="line"><span class="hljs-number">172</span>        <span class="hljs-number">7.25</span>  <span class="hljs-number">5.15</span>    Yes  Sun  Dinner     <span class="hljs-number">2</span>  <span class="hljs-number">0.710345</span></span><br></pre></td></tr></table></figure><p>现在，如果对smoker分组并用该函数调用apply，就会得到：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">76</span>]: tips.groupby(<span class="hljs-string">'smoker'</span>).apply(top)</span><br><span class="line">Out[<span class="hljs-number">76</span>]: </span><br><span class="line">            total_bill   tip smoker   day    time  size   tip_pct</span><br><span class="line">smoker                                                           </span><br><span class="line">No     <span class="hljs-number">88</span>        <span class="hljs-number">24.71</span>  <span class="hljs-number">5.85</span>     No  Thur   Lunch     <span class="hljs-number">2</span>  <span class="hljs-number">0.236746</span></span><br><span class="line">       <span class="hljs-number">185</span>       <span class="hljs-number">20.69</span>  <span class="hljs-number">5.00</span>     No   Sun  Dinner     <span class="hljs-number">5</span>  <span class="hljs-number">0.241663</span></span><br><span class="line">       <span class="hljs-number">51</span>        <span class="hljs-number">10.29</span>  <span class="hljs-number">2.60</span>     No   Sun  Dinner     <span class="hljs-number">2</span>  <span class="hljs-number">0.252672</span></span><br><span class="line">       <span class="hljs-number">149</span>        <span class="hljs-number">7.51</span>  <span class="hljs-number">2.00</span>     No  Thur   Lunch     <span class="hljs-number">2</span>  <span class="hljs-number">0.266312</span></span><br><span class="line">       <span class="hljs-number">232</span>       <span class="hljs-number">11.61</span>  <span class="hljs-number">3.39</span>     No   Sat  Dinner     <span class="hljs-number">2</span>  <span class="hljs-number">0.291990</span></span><br><span class="line">Yes    <span class="hljs-number">109</span>       <span class="hljs-number">14.31</span>  <span class="hljs-number">4.00</span>    Yes   Sat  Dinner     <span class="hljs-number">2</span>  <span class="hljs-number">0.279525</span></span><br><span class="line">       <span class="hljs-number">183</span>       <span class="hljs-number">23.17</span>  <span class="hljs-number">6.50</span>    Yes   Sun  Dinner     <span class="hljs-number">4</span>  <span class="hljs-number">0.280535</span></span><br><span class="line">       <span class="hljs-number">67</span>         <span class="hljs-number">3.07</span>  <span class="hljs-number">1.00</span>    Yes   Sat  Dinner     <span class="hljs-number">1</span>  <span class="hljs-number">0.325733</span></span><br><span class="line">       <span class="hljs-number">178</span>        <span class="hljs-number">9.60</span>  <span class="hljs-number">4.00</span>    Yes   Sun  Dinner     <span class="hljs-number">2</span>  <span class="hljs-number">0.416667</span></span><br><span class="line">       <span class="hljs-number">172</span>        <span class="hljs-number">7.25</span>  <span class="hljs-number">5.15</span>    Yes   Sun  Dinner     <span class="hljs-number">2</span>  <span class="hljs-number">0.710345</span></span><br></pre></td></tr></table></figure><p>这里发生了什么？top函数在DataFrame的各个片段上调用，然后结果由pandas.concat组装到一起，并以分组名称进行了标记。于是，最终结果就有了一个层次化索引，其内层索引值来自原DataFrame。</p><p>如果传给apply的函数能够接受其他参数或关键字，则可以将这些内容放在函数名后面一并传入：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">77</span>]: tips.groupby([<span class="hljs-string">'smoker'</span>, <span class="hljs-string">'day'</span>]).apply(top, n=<span class="hljs-number">1</span>, column=<span class="hljs-string">'total_bill'</span>)</span><br><span class="line">Out[<span class="hljs-number">77</span>]: </span><br><span class="line">                 total_bill    tip smoker   day    time  size   tip_pct</span><br><span class="line">smoker day                                                             </span><br><span class="line">No     Fri  <span class="hljs-number">94</span>        <span class="hljs-number">22.75</span>   <span class="hljs-number">3.25</span>     No   Fri  Dinner     <span class="hljs-number">2</span>  <span class="hljs-number">0.142857</span></span><br><span class="line">       Sat  <span class="hljs-number">212</span>       <span class="hljs-number">48.33</span>   <span class="hljs-number">9.00</span>     No   Sat  Dinner     <span class="hljs-number">4</span>  <span class="hljs-number">0.186220</span></span><br><span class="line">       Sun  <span class="hljs-number">156</span>       <span class="hljs-number">48.17</span>   <span class="hljs-number">5.00</span>     No   Sun  Dinner     <span class="hljs-number">6</span>  <span class="hljs-number">0.103799</span></span><br><span class="line">       Thur <span class="hljs-number">142</span>       <span class="hljs-number">41.19</span>   <span class="hljs-number">5.00</span>     No  Thur   Lunch     <span class="hljs-number">5</span>  <span class="hljs-number">0.121389</span></span><br><span class="line">Yes    Fri  <span class="hljs-number">95</span>        <span class="hljs-number">40.17</span>   <span class="hljs-number">4.73</span>    Yes   Fri  Dinner     <span class="hljs-number">4</span>  <span class="hljs-number">0.117750</span></span><br><span class="line">       Sat  <span class="hljs-number">170</span>       <span class="hljs-number">50.81</span>  <span class="hljs-number">10.00</span>    Yes   Sat  Dinner     <span class="hljs-number">3</span>  <span class="hljs-number">0.196812</span></span><br><span class="line">       Sun  <span class="hljs-number">182</span>       <span class="hljs-number">45.35</span>   <span class="hljs-number">3.50</span>    Yes   Sun  Dinner     <span class="hljs-number">3</span>  <span class="hljs-number">0.077178</span></span><br><span class="line">       Thur <span class="hljs-number">197</span>       <span class="hljs-number">43.11</span>   <span class="hljs-number">5.00</span>    Yes  Thur   Lunch     <span class="hljs-number">4</span>  <span class="hljs-number">0.115982</span></span><br></pre></td></tr></table></figure><blockquote><p>笔记：除这些基本用法之外，能否充分发挥apply的威力很大程度上取决于你的创造力。传入的那个函数能做什么全由你说了算，它只需返回一个pandas对象或标量值即可。本章后续部分的示例主要用于讲解如何利用groupby解决各种各样的问题。</p></blockquote><p>可能你已经想起来了，之前我在GroupBy对象上调用过describe：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">78</span>]: result = tips.groupby(<span class="hljs-string">'smoker'</span>)[<span class="hljs-string">'tip_pct'</span>].describe()</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">79</span>]: result</span><br><span class="line">Out[<span class="hljs-number">79</span>]: </span><br><span class="line">        count      mean       std       min       <span class="hljs-number">25</span>%       <span class="hljs-number">50</span>%       <span class="hljs-number">75</span>%  \</span><br><span class="line">smoker                                                                      </span><br><span class="line">No      <span class="hljs-number">151.0</span>  <span class="hljs-number">0.159328</span>  <span class="hljs-number">0.039910</span>  <span class="hljs-number">0.056797</span>  <span class="hljs-number">0.136906</span>  <span class="hljs-number">0.155625</span>  <span class="hljs-number">0.185014</span>   </span><br><span class="line">Yes      <span class="hljs-number">93.0</span>  <span class="hljs-number">0.163196</span>  <span class="hljs-number">0.085119</span>  <span class="hljs-number">0.035638</span>  <span class="hljs-number">0.106771</span>  <span class="hljs-number">0.153846</span>  <span class="hljs-number">0.195059</span>   </span><br><span class="line">             max  </span><br><span class="line">smoker</span><br><span class="line"></span><br><span class="line">No      <span class="hljs-number">0.291990</span>  </span><br><span class="line">Yes     <span class="hljs-number">0.710345</span>  </span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">80</span>]: result.unstack(<span class="hljs-string">'smoker'</span>)</span><br><span class="line">Out[<span class="hljs-number">80</span>]: </span><br><span class="line">       smoker</span><br><span class="line">count  No        <span class="hljs-number">151.000000</span></span><br><span class="line">       Yes        <span class="hljs-number">93.000000</span></span><br><span class="line">mean   No          <span class="hljs-number">0.159328</span></span><br><span class="line">       Yes         <span class="hljs-number">0.163196</span></span><br><span class="line">std    No          <span class="hljs-number">0.039910</span></span><br><span class="line">       Yes         <span class="hljs-number">0.085119</span></span><br><span class="line">min    No          <span class="hljs-number">0.056797</span></span><br><span class="line">       Yes         <span class="hljs-number">0.035638</span></span><br><span class="line"><span class="hljs-number">25</span>%    No          <span class="hljs-number">0.136906</span></span><br><span class="line">       Yes         <span class="hljs-number">0.106771</span></span><br><span class="line"><span class="hljs-number">50</span>%    No          <span class="hljs-number">0.155625</span></span><br><span class="line">       Yes         <span class="hljs-number">0.153846</span></span><br><span class="line"><span class="hljs-number">75</span>%    No          <span class="hljs-number">0.185014</span></span><br><span class="line">       Yes         <span class="hljs-number">0.195059</span></span><br><span class="line">max    No          <span class="hljs-number">0.291990</span></span><br><span class="line">       Yes         <span class="hljs-number">0.710345</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><p>在GroupBy中，当你调用诸如describe之类的方法时，实际上只是应用了下面两条代码的快捷方式而已：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="hljs-keyword">lambda</span> x: x.describe()</span><br><span class="line">grouped.apply(f)</span><br></pre></td></tr></table></figure><h2 id="禁止分组键"><a href="#禁止分组键" class="headerlink" title="禁止分组键"></a>禁止分组键</h2><p>从上面的例子中可以看出，分组键会跟原始对象的索引共同构成结果对象中的层次化索引。将group_keys=False传入groupby即可禁止该效果：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">81</span>]: tips.groupby(<span class="hljs-string">'smoker'</span>, group_keys=<span class="hljs-literal">False</span>).apply(top)</span><br><span class="line">Out[<span class="hljs-number">81</span>]: </span><br><span class="line">     total_bill   tip smoker   day    time  size   tip_pct</span><br><span class="line"><span class="hljs-number">88</span>        <span class="hljs-number">24.71</span>  <span class="hljs-number">5.85</span>     No  Thur   Lunch     <span class="hljs-number">2</span>  <span class="hljs-number">0.236746</span></span><br><span class="line"><span class="hljs-number">185</span>       <span class="hljs-number">20.69</span>  <span class="hljs-number">5.00</span>     No   Sun  Dinner     <span class="hljs-number">5</span>  <span class="hljs-number">0.241663</span></span><br><span class="line"><span class="hljs-number">51</span>        <span class="hljs-number">10.29</span>  <span class="hljs-number">2.60</span>     No   Sun  Dinner     <span class="hljs-number">2</span>  <span class="hljs-number">0.252672</span></span><br><span class="line"><span class="hljs-number">149</span>        <span class="hljs-number">7.51</span>  <span class="hljs-number">2.00</span>     No  Thur   Lunch     <span class="hljs-number">2</span>  <span class="hljs-number">0.266312</span></span><br><span class="line"><span class="hljs-number">232</span>       <span class="hljs-number">11.61</span>  <span class="hljs-number">3.39</span>     No   Sat  Dinner     <span class="hljs-number">2</span>  <span class="hljs-number">0.291990</span></span><br><span class="line"><span class="hljs-number">109</span>       <span class="hljs-number">14.31</span>  <span class="hljs-number">4.00</span>    Yes   Sat  Dinner     <span class="hljs-number">2</span>  <span class="hljs-number">0.279525</span></span><br><span class="line"><span class="hljs-number">183</span>       <span class="hljs-number">23.17</span>  <span class="hljs-number">6.50</span>    Yes   Sun  Dinner     <span class="hljs-number">4</span>  <span class="hljs-number">0.280535</span></span><br><span class="line"><span class="hljs-number">67</span>         <span class="hljs-number">3.07</span>  <span class="hljs-number">1.00</span>    Yes   Sat  Dinner     <span class="hljs-number">1</span>  <span class="hljs-number">0.325733</span></span><br><span class="line"><span class="hljs-number">178</span>        <span class="hljs-number">9.60</span>  <span class="hljs-number">4.00</span>    Yes   Sun  Dinner     <span class="hljs-number">2</span>  <span class="hljs-number">0.416667</span></span><br><span class="line"><span class="hljs-number">172</span>        <span class="hljs-number">7.25</span>  <span class="hljs-number">5.15</span>    Yes   Sun  Dinner     <span class="hljs-number">2</span>  <span class="hljs-number">0.710345</span></span><br></pre></td></tr></table></figure><h2 id="分位数和桶分析"><a href="#分位数和桶分析" class="headerlink" title="分位数和桶分析"></a>分位数和桶分析</h2><p>我曾在第8章中讲过，pandas有一些能根据指定面元或样本分位数将数据拆分成多块的工具（比如cut和qcut）。将这些函数跟groupby结合起来，就能非常轻松地实现对数据集的桶（bucket）或分位数（quantile）分析了。以下面这个简单的随机数据集为例，我们利用cut将其装入长度相等的桶中：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">82</span>]: frame = pd.DataFrame(&#123;<span class="hljs-string">'data1'</span>: np.random.randn(<span class="hljs-number">1000</span>),</span><br><span class="line">   ....:                       <span class="hljs-string">'data2'</span>: np.random.randn(<span class="hljs-number">1000</span>)&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">83</span>]: quartiles = pd.cut(frame.data1, <span class="hljs-number">4</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">84</span>]: quartiles[:<span class="hljs-number">10</span>]</span><br><span class="line">Out[<span class="hljs-number">84</span>]: </span><br><span class="line"><span class="hljs-number">0</span>     (<span class="hljs-number">-1.23</span>, <span class="hljs-number">0.489</span>]</span><br><span class="line"><span class="hljs-number">1</span>    (<span class="hljs-number">-2.956</span>, <span class="hljs-number">-1.23</span>]</span><br><span class="line"><span class="hljs-number">2</span>     (<span class="hljs-number">-1.23</span>, <span class="hljs-number">0.489</span>]</span><br><span class="line"><span class="hljs-number">3</span>     (<span class="hljs-number">0.489</span>, <span class="hljs-number">2.208</span>]</span><br><span class="line"><span class="hljs-number">4</span>     (<span class="hljs-number">-1.23</span>, <span class="hljs-number">0.489</span>]</span><br><span class="line"><span class="hljs-number">5</span>     (<span class="hljs-number">0.489</span>, <span class="hljs-number">2.208</span>]</span><br><span class="line"><span class="hljs-number">6</span>     (<span class="hljs-number">-1.23</span>, <span class="hljs-number">0.489</span>]</span><br><span class="line"><span class="hljs-number">7</span>     (<span class="hljs-number">-1.23</span>, <span class="hljs-number">0.489</span>]</span><br><span class="line"><span class="hljs-number">8</span>     (<span class="hljs-number">0.489</span>, <span class="hljs-number">2.208</span>]</span><br><span class="line"><span class="hljs-number">9</span>     (<span class="hljs-number">0.489</span>, <span class="hljs-number">2.208</span>]</span><br><span class="line">Name: data1, dtype: category</span><br><span class="line">Categories (<span class="hljs-number">4</span>, interval[float64]): [(<span class="hljs-number">-2.956</span>, <span class="hljs-number">-1.23</span>] &lt; (<span class="hljs-number">-1.23</span>, <span class="hljs-number">0.489</span>] &lt; (<span class="hljs-number">0.489</span>, <span class="hljs-number">2.</span></span><br><span class="line"><span class="hljs-number">208</span>] &lt; (<span class="hljs-number">2.208</span>, <span class="hljs-number">3.928</span>]]</span><br></pre></td></tr></table></figure><p>由cut返回的Categorical对象可直接传递到groupby。因此，我们可以像下面这样对data2列做一些统计计算：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">85</span>]: <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_stats</span><span class="hljs-params">(group)</span>:</span></span><br><span class="line">   ....:     <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">'min'</span>: group.min(), <span class="hljs-string">'max'</span>: group.max(),</span><br><span class="line">   ....:             <span class="hljs-string">'count'</span>: group.count(), <span class="hljs-string">'mean'</span>: group.mean()&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">86</span>]: grouped = frame.data2.groupby(quartiles)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">87</span>]: grouped.apply(get_stats).unstack()</span><br><span class="line">Out[<span class="hljs-number">87</span>]: </span><br><span class="line">                 count       max      mean       min</span><br><span class="line">data1                                               </span><br><span class="line">(<span class="hljs-number">-2.956</span>, <span class="hljs-number">-1.23</span>]   <span class="hljs-number">95.0</span>  <span class="hljs-number">1.670835</span> <span class="hljs-number">-0.039521</span> <span class="hljs-number">-3.399312</span></span><br><span class="line">(<span class="hljs-number">-1.23</span>, <span class="hljs-number">0.489</span>]   <span class="hljs-number">598.0</span>  <span class="hljs-number">3.260383</span> <span class="hljs-number">-0.002051</span> <span class="hljs-number">-2.989741</span></span><br><span class="line">(<span class="hljs-number">0.489</span>, <span class="hljs-number">2.208</span>]   <span class="hljs-number">297.0</span>  <span class="hljs-number">2.954439</span>  <span class="hljs-number">0.081822</span> <span class="hljs-number">-3.745356</span></span><br><span class="line">(<span class="hljs-number">2.208</span>, <span class="hljs-number">3.928</span>]    <span class="hljs-number">10.0</span>  <span class="hljs-number">1.765640</span>  <span class="hljs-number">0.024750</span> <span class="hljs-number">-1.929776</span></span><br></pre></td></tr></table></figure><p>这些都是长度相等的桶。要根据样本分位数得到大小相等的桶，使用qcut即可。传入labels=False即可只获取分位数的编号：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># Return quantile numbers</span></span><br><span class="line">In [<span class="hljs-number">88</span>]: grouping = pd.qcut(frame.data1, <span class="hljs-number">10</span>, labels=<span class="hljs-literal">False</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">89</span>]: grouped = frame.data2.groupby(grouping)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">90</span>]: grouped.apply(get_stats).unstack()</span><br><span class="line">Out[<span class="hljs-number">90</span>]: </span><br><span class="line">       count       max      mean       min</span><br><span class="line">data1                                     </span><br><span class="line"><span class="hljs-number">0</span>      <span class="hljs-number">100.0</span>  <span class="hljs-number">1.670835</span> <span class="hljs-number">-0.049902</span> <span class="hljs-number">-3.399312</span></span><br><span class="line"><span class="hljs-number">1</span>      <span class="hljs-number">100.0</span>  <span class="hljs-number">2.628441</span>  <span class="hljs-number">0.030989</span> <span class="hljs-number">-1.950098</span></span><br><span class="line"><span class="hljs-number">2</span>      <span class="hljs-number">100.0</span>  <span class="hljs-number">2.527939</span> <span class="hljs-number">-0.067179</span> <span class="hljs-number">-2.925113</span></span><br><span class="line"><span class="hljs-number">3</span>      <span class="hljs-number">100.0</span>  <span class="hljs-number">3.260383</span>  <span class="hljs-number">0.065713</span> <span class="hljs-number">-2.315555</span></span><br><span class="line"><span class="hljs-number">4</span>      <span class="hljs-number">100.0</span>  <span class="hljs-number">2.074345</span> <span class="hljs-number">-0.111653</span> <span class="hljs-number">-2.047939</span></span><br><span class="line"><span class="hljs-number">5</span>      <span class="hljs-number">100.0</span>  <span class="hljs-number">2.184810</span>  <span class="hljs-number">0.052130</span> <span class="hljs-number">-2.989741</span></span><br><span class="line"><span class="hljs-number">6</span>      <span class="hljs-number">100.0</span>  <span class="hljs-number">2.458842</span> <span class="hljs-number">-0.021489</span> <span class="hljs-number">-2.223506</span></span><br><span class="line"><span class="hljs-number">7</span>      <span class="hljs-number">100.0</span>  <span class="hljs-number">2.954439</span> <span class="hljs-number">-0.026459</span> <span class="hljs-number">-3.056990</span></span><br><span class="line"><span class="hljs-number">8</span>      <span class="hljs-number">100.0</span>  <span class="hljs-number">2.735527</span>  <span class="hljs-number">0.103406</span> <span class="hljs-number">-3.745356</span></span><br><span class="line"><span class="hljs-number">9</span>      <span class="hljs-number">100.0</span>  <span class="hljs-number">2.377020</span>  <span class="hljs-number">0.220122</span> <span class="hljs-number">-2.064111</span></span><br></pre></td></tr></table></figure><p>我们会在第12章详细讲解pandas的Categorical类型。</p><h2 id="示例：用特定于分组的值填充缺失值"><a href="#示例：用特定于分组的值填充缺失值" class="headerlink" title="示例：用特定于分组的值填充缺失值"></a>示例：用特定于分组的值填充缺失值</h2><p>对于缺失数据的清理工作，有时你会用dropna将其替换掉，而有时则可能会希望用一个固定值或由数据集本身所衍生出来的值去填充NA值。这时就得使用fillna这个工具了。在下面这个例子中，我用平均值去填充NA值：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">91</span>]: s = pd.Series(np.random.randn(<span class="hljs-number">6</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">92</span>]: s[::<span class="hljs-number">2</span>] = np.nan</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">93</span>]: s</span><br><span class="line">Out[<span class="hljs-number">93</span>]: </span><br><span class="line"><span class="hljs-number">0</span>         NaN</span><br><span class="line"><span class="hljs-number">1</span>   <span class="hljs-number">-0.125921</span></span><br><span class="line"><span class="hljs-number">2</span>         NaN</span><br><span class="line"><span class="hljs-number">3</span>   <span class="hljs-number">-0.884475</span></span><br><span class="line"><span class="hljs-number">4</span>         NaN</span><br><span class="line"><span class="hljs-number">5</span>    <span class="hljs-number">0.227290</span></span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">94</span>]: s.fillna(s.mean())</span><br><span class="line">Out[<span class="hljs-number">94</span>]: </span><br><span class="line"><span class="hljs-number">0</span>   <span class="hljs-number">-0.261035</span></span><br><span class="line"><span class="hljs-number">1</span>   <span class="hljs-number">-0.125921</span></span><br><span class="line"><span class="hljs-number">2</span>   <span class="hljs-number">-0.261035</span></span><br><span class="line"><span class="hljs-number">3</span>   <span class="hljs-number">-0.884475</span></span><br><span class="line"><span class="hljs-number">4</span>   <span class="hljs-number">-0.261035</span></span><br><span class="line"><span class="hljs-number">5</span>    <span class="hljs-number">0.227290</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><p>假设你需要对不同的分组填充不同的值。一种方法是将数据分组，并使用apply和一个能够对各数据块调用fillna的函数即可。下面是一些有关美国几个州的示例数据，这些州又被分为东部和西部：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">95</span>]: states = [<span class="hljs-string">'Ohio'</span>, <span class="hljs-string">'New York'</span>, <span class="hljs-string">'Vermont'</span>, <span class="hljs-string">'Florida'</span>,</span><br><span class="line">   ....:           <span class="hljs-string">'Oregon'</span>, <span class="hljs-string">'Nevada'</span>, <span class="hljs-string">'California'</span>, <span class="hljs-string">'Idaho'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">96</span>]: group_key = [<span class="hljs-string">'East'</span>] * <span class="hljs-number">4</span> + [<span class="hljs-string">'West'</span>] * <span class="hljs-number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">97</span>]: data = pd.Series(np.random.randn(<span class="hljs-number">8</span>), index=states)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">98</span>]: data</span><br><span class="line">Out[<span class="hljs-number">98</span>]: </span><br><span class="line">Ohio          <span class="hljs-number">0.922264</span></span><br><span class="line">New York     <span class="hljs-number">-2.153545</span></span><br><span class="line">Vermont      <span class="hljs-number">-0.365757</span></span><br><span class="line">Florida      <span class="hljs-number">-0.375842</span></span><br><span class="line">Oregon        <span class="hljs-number">0.329939</span></span><br><span class="line">Nevada        <span class="hljs-number">0.981994</span></span><br><span class="line">California    <span class="hljs-number">1.105913</span></span><br><span class="line">Idaho        <span class="hljs-number">-1.613716</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><p>[‘East’] * 4产生了一个列表，包括了[‘East’]中元素的四个拷贝。将这些列表串联起来。</p><p>将一些值设为缺失：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">99</span>]: data[[<span class="hljs-string">'Vermont'</span>, <span class="hljs-string">'Nevada'</span>, <span class="hljs-string">'Idaho'</span>]] = np.nan</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">100</span>]: data</span><br><span class="line">Out[<span class="hljs-number">100</span>]: </span><br><span class="line">Ohio          <span class="hljs-number">0.922264</span></span><br><span class="line">New York     <span class="hljs-number">-2.153545</span></span><br><span class="line">Vermont            NaN</span><br><span class="line">Florida      <span class="hljs-number">-0.375842</span></span><br><span class="line">Oregon        <span class="hljs-number">0.329939</span></span><br><span class="line">Nevada             NaN</span><br><span class="line">California    <span class="hljs-number">1.105913</span></span><br><span class="line">Idaho              NaN</span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">101</span>]: data.groupby(group_key).mean()</span><br><span class="line">Out[<span class="hljs-number">101</span>]: </span><br><span class="line">East   <span class="hljs-number">-0.535707</span></span><br><span class="line">West    <span class="hljs-number">0.717926</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><p>我们可以用分组平均值去填充NA值:</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">102</span>]: fill_mean = <span class="hljs-keyword">lambda</span> g: g.fillna(g.mean())</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">103</span>]: data.groupby(group_key).apply(fill_mean)</span><br><span class="line">Out[<span class="hljs-number">103</span>]: </span><br><span class="line">Ohio          <span class="hljs-number">0.922264</span></span><br><span class="line">New York     <span class="hljs-number">-2.153545</span></span><br><span class="line">Vermont      <span class="hljs-number">-0.535707</span></span><br><span class="line">Florida      <span class="hljs-number">-0.375842</span></span><br><span class="line">Oregon        <span class="hljs-number">0.329939</span></span><br><span class="line">Nevada        <span class="hljs-number">0.717926</span></span><br><span class="line">California    <span class="hljs-number">1.105913</span></span><br><span class="line">Idaho         <span class="hljs-number">0.717926</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><p>另外，也可以在代码中预定义各组的填充值。由于分组具有一个name属性，所以我们可以拿来用一下：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">104</span>]: fill_values = &#123;<span class="hljs-string">'East'</span>: <span class="hljs-number">0.5</span>, <span class="hljs-string">'West'</span>: <span class="hljs-number">-1</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">105</span>]: fill_func = <span class="hljs-keyword">lambda</span> g: g.fillna(fill_values[g.name])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">106</span>]: data.groupby(group_key).apply(fill_func)</span><br><span class="line">Out[<span class="hljs-number">106</span>]: </span><br><span class="line">Ohio          <span class="hljs-number">0.922264</span></span><br><span class="line">New York     <span class="hljs-number">-2.153545</span></span><br><span class="line">Vermont       <span class="hljs-number">0.500000</span></span><br><span class="line">Florida      <span class="hljs-number">-0.375842</span></span><br><span class="line">Oregon        <span class="hljs-number">0.329939</span></span><br><span class="line">Nevada       <span class="hljs-number">-1.000000</span></span><br><span class="line">California    <span class="hljs-number">1.105913</span></span><br><span class="line">Idaho        <span class="hljs-number">-1.000000</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><h2 id="示例：随机采样和排列"><a href="#示例：随机采样和排列" class="headerlink" title="示例：随机采样和排列"></a>示例：随机采样和排列</h2><p>假设你想要从一个大数据集中随机抽取（进行替换或不替换）样本以进行蒙特卡罗模拟（Monte Carlo simulation）或其他分析工作。“抽取”的方式有很多，这里使用的方法是对Series使用sample方法：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># Hearts, Spades, Clubs, Diamonds</span></span><br><span class="line">suits = [<span class="hljs-string">'H'</span>, <span class="hljs-string">'S'</span>, <span class="hljs-string">'C'</span>, <span class="hljs-string">'D'</span>]</span><br><span class="line">card_val = (list(range(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>)) + [<span class="hljs-number">10</span>] * <span class="hljs-number">3</span>) * <span class="hljs-number">4</span></span><br><span class="line">base_names = [<span class="hljs-string">'A'</span>] + list(range(<span class="hljs-number">2</span>, <span class="hljs-number">11</span>)) + [<span class="hljs-string">'J'</span>, <span class="hljs-string">'K'</span>, <span class="hljs-string">'Q'</span>]</span><br><span class="line">cards = []</span><br><span class="line"><span class="hljs-keyword">for</span> suit <span class="hljs-keyword">in</span> [<span class="hljs-string">'H'</span>, <span class="hljs-string">'S'</span>, <span class="hljs-string">'C'</span>, <span class="hljs-string">'D'</span>]:</span><br><span class="line">    cards.extend(str(num) + suit <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> base_names)</span><br><span class="line"></span><br><span class="line">deck = pd.Series(card_val, index=cards)</span><br></pre></td></tr></table></figure><p>现在我有了一个长度为52的Series，其索引包括牌名，值则是21点或其他游戏中用于计分的点数（为了简单起见，我当A的点数为1）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">108</span>]: deck[:<span class="hljs-number">13</span>]</span><br><span class="line">Out[<span class="hljs-number">108</span>]: </span><br><span class="line">AH      <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-number">2</span>H      <span class="hljs-number">2</span></span><br><span class="line"><span class="hljs-number">3</span>H      <span class="hljs-number">3</span></span><br><span class="line"><span class="hljs-number">4</span>H      <span class="hljs-number">4</span></span><br><span class="line"><span class="hljs-number">5</span>H      <span class="hljs-number">5</span></span><br><span class="line"><span class="hljs-number">6</span>H      <span class="hljs-number">6</span></span><br><span class="line"><span class="hljs-number">7</span>H      <span class="hljs-number">7</span></span><br><span class="line"><span class="hljs-number">8</span>H      <span class="hljs-number">8</span></span><br><span class="line"><span class="hljs-number">9</span>H      <span class="hljs-number">9</span></span><br><span class="line"><span class="hljs-number">10</span>H    <span class="hljs-number">10</span></span><br><span class="line">JH     <span class="hljs-number">10</span></span><br><span class="line">KH     <span class="hljs-number">10</span></span><br><span class="line">QH     <span class="hljs-number">10</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><p>现在，根据我上面所讲的，从整副牌中抽出5张，代码如下：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">109</span>]: <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">draw</span><span class="hljs-params">(deck, n=<span class="hljs-number">5</span>)</span>:</span></span><br><span class="line">   .....:     <span class="hljs-keyword">return</span> deck.sample(n)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">110</span>]: draw(deck)</span><br><span class="line">Out[<span class="hljs-number">110</span>]: </span><br><span class="line">AD     <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-number">8</span>C     <span class="hljs-number">8</span></span><br><span class="line"><span class="hljs-number">5</span>H     <span class="hljs-number">5</span></span><br><span class="line">KC    <span class="hljs-number">10</span></span><br><span class="line"><span class="hljs-number">2</span>C     <span class="hljs-number">2</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><p>假设你想要从每种花色中随机抽取两张牌。由于花色是牌名的最后一个字符，所以我们可以据此进行分组，并使用apply：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">111</span>]: get_suit = <span class="hljs-keyword">lambda</span> card: card[<span class="hljs-number">-1</span>] <span class="hljs-comment"># last letter is suit</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">112</span>]: deck.groupby(get_suit).apply(draw, n=<span class="hljs-number">2</span>)</span><br><span class="line">Out[<span class="hljs-number">112</span>]: </span><br><span class="line">C  <span class="hljs-number">2</span>C     <span class="hljs-number">2</span></span><br><span class="line">   <span class="hljs-number">3</span>C     <span class="hljs-number">3</span></span><br><span class="line">D  KD    <span class="hljs-number">10</span></span><br><span class="line">   <span class="hljs-number">8</span>D     <span class="hljs-number">8</span></span><br><span class="line">H  KH    <span class="hljs-number">10</span></span><br><span class="line">   <span class="hljs-number">3</span>H     <span class="hljs-number">3</span></span><br><span class="line">S  <span class="hljs-number">2</span>S     <span class="hljs-number">2</span></span><br><span class="line">   <span class="hljs-number">4</span>S     <span class="hljs-number">4</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><p>或者，也可以这样写：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">113</span>]: deck.groupby(get_suit, group_keys=<span class="hljs-literal">False</span>).apply(draw, n=<span class="hljs-number">2</span>)</span><br><span class="line">Out[<span class="hljs-number">113</span>]: </span><br><span class="line">KC    <span class="hljs-number">10</span></span><br><span class="line">JC    <span class="hljs-number">10</span></span><br><span class="line">AD     <span class="hljs-number">1</span></span><br><span class="line"><span class="hljs-number">5</span>D     <span class="hljs-number">5</span></span><br><span class="line"><span class="hljs-number">5</span>H     <span class="hljs-number">5</span></span><br><span class="line"><span class="hljs-number">6</span>H     <span class="hljs-number">6</span></span><br><span class="line"><span class="hljs-number">7</span>S     <span class="hljs-number">7</span></span><br><span class="line">KS    <span class="hljs-number">10</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><h2 id="示例：分组加权平均数和相关系数"><a href="#示例：分组加权平均数和相关系数" class="headerlink" title="示例：分组加权平均数和相关系数"></a>示例：分组加权平均数和相关系数</h2><p>根据groupby的“拆分－应用－合并”范式，可以进行DataFrame的列与列之间或两个Series之间的运算（比如分组加权平均）。以下面这个数据集为例，它含有分组键、值以及一些权重值：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">114</span>]: df = pd.DataFrame(&#123;<span class="hljs-string">'category'</span>: [<span class="hljs-string">'a'</span>, <span class="hljs-string">'a'</span>, <span class="hljs-string">'a'</span>, <span class="hljs-string">'a'</span>,</span><br><span class="line">   .....:                                 <span class="hljs-string">'b'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'b'</span>],</span><br><span class="line">   .....:                    <span class="hljs-string">'data'</span>: np.random.randn(<span class="hljs-number">8</span>),</span><br><span class="line">   .....:                    <span class="hljs-string">'weights'</span>: np.random.rand(<span class="hljs-number">8</span>)&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">115</span>]: df</span><br><span class="line">Out[<span class="hljs-number">115</span>]: </span><br><span class="line">  category      data   weights</span><br><span class="line"><span class="hljs-number">0</span>        a  <span class="hljs-number">1.561587</span>  <span class="hljs-number">0.957515</span></span><br><span class="line"><span class="hljs-number">1</span>        a  <span class="hljs-number">1.219984</span>  <span class="hljs-number">0.347267</span></span><br><span class="line"><span class="hljs-number">2</span>        a <span class="hljs-number">-0.482239</span>  <span class="hljs-number">0.581362</span></span><br><span class="line"><span class="hljs-number">3</span>        a  <span class="hljs-number">0.315667</span>  <span class="hljs-number">0.217091</span></span><br><span class="line"><span class="hljs-number">4</span>        b <span class="hljs-number">-0.047852</span>  <span class="hljs-number">0.894406</span></span><br><span class="line"><span class="hljs-number">5</span>        b <span class="hljs-number">-0.454145</span>  <span class="hljs-number">0.918564</span></span><br><span class="line"><span class="hljs-number">6</span>        b <span class="hljs-number">-0.556774</span>  <span class="hljs-number">0.277825</span></span><br><span class="line"><span class="hljs-number">7</span>        b  <span class="hljs-number">0.253321</span>  <span class="hljs-number">0.955905</span></span><br></pre></td></tr></table></figure><p>然后可以利用category计算分组加权平均数：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">116</span>]: grouped = df.groupby(<span class="hljs-string">'category'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">117</span>]: get_wavg = <span class="hljs-keyword">lambda</span> g: np.average(g[<span class="hljs-string">'data'</span>], weights=g[<span class="hljs-string">'weights'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">118</span>]: grouped.apply(get_wavg)</span><br><span class="line">Out[<span class="hljs-number">118</span>]:</span><br><span class="line">category</span><br><span class="line">a    <span class="hljs-number">0.811643</span></span><br><span class="line">b   <span class="hljs-number">-0.122262</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><p>另一个例子，考虑一个来自Yahoo!Finance的数据集，其中含有几只股票和标准普尔500指数（符号SPX）的收盘价：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">119</span>]: close_px = pd.read_csv(<span class="hljs-string">'examples/stock_px_2.csv'</span>, parse_dates=<span class="hljs-literal">True</span>,</span><br><span class="line">   .....:                        index_col=<span class="hljs-number">0</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">120</span>]: close_px.info()</span><br><span class="line">&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> '<span class="hljs-title">pandas</span>.<span class="hljs-title">core</span>.<span class="hljs-title">frame</span>.<span class="hljs-title">DataFrame</span>'&gt;</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-title">DatetimeIndex</span>:</span> <span class="hljs-number">2214</span> entries, <span class="hljs-number">2003</span><span class="hljs-number">-01</span><span class="hljs-number">-02</span> to <span class="hljs-number">2011</span><span class="hljs-number">-10</span><span class="hljs-number">-14</span></span><br><span class="line">Data columns (total <span class="hljs-number">4</span> columns):</span><br><span class="line">AAPL    <span class="hljs-number">2214</span> non-null float64</span><br><span class="line">MSFT    <span class="hljs-number">2214</span> non-null float64</span><br><span class="line">XOM     <span class="hljs-number">2214</span> non-null float64</span><br><span class="line">SPX     <span class="hljs-number">2214</span> non-null float64</span><br><span class="line">dtypes: float64(<span class="hljs-number">4</span>)</span><br><span class="line">memory usage: <span class="hljs-number">86.5</span> KB</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">121</span>]: close_px[<span class="hljs-number">-4</span>:]</span><br><span class="line">Out[<span class="hljs-number">121</span>]: </span><br><span class="line">              AAPL   MSFT    XOM      SPX</span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-10</span><span class="hljs-number">-11</span>  <span class="hljs-number">400.29</span>  <span class="hljs-number">27.00</span>  <span class="hljs-number">76.27</span>  <span class="hljs-number">1195.54</span></span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-10</span><span class="hljs-number">-12</span>  <span class="hljs-number">402.19</span>  <span class="hljs-number">26.96</span>  <span class="hljs-number">77.16</span>  <span class="hljs-number">1207.25</span></span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-10</span><span class="hljs-number">-13</span>  <span class="hljs-number">408.43</span>  <span class="hljs-number">27.18</span>  <span class="hljs-number">76.37</span>  <span class="hljs-number">1203.66</span></span><br><span class="line"><span class="hljs-number">2011</span><span class="hljs-number">-10</span><span class="hljs-number">-14</span>  <span class="hljs-number">422.00</span>  <span class="hljs-number">27.27</span>  <span class="hljs-number">78.11</span>  <span class="hljs-number">1224.58</span></span><br></pre></td></tr></table></figure><p>来做一个比较有趣的任务：计算一个由日收益率（通过百分数变化计算）与SPX之间的年度相关系数组成的DataFrame。下面是一个实现办法，我们先创建一个函数，用它计算每列和SPX列的成对相关系数：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">122</span>]: spx_corr = <span class="hljs-keyword">lambda</span> x: x.corrwith(x[<span class="hljs-string">'SPX'</span>])</span><br></pre></td></tr></table></figure><p>接下来，我们使用pct_change计算close_px的百分比变化：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">123</span>]: rets = close_px.pct_change().dropna()</span><br></pre></td></tr></table></figure><p>最后，我们用年对百分比变化进行分组，可以用一个一行的函数，从每行的标签返回每个datetime标签的year属性：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">124</span>]: get_year = <span class="hljs-keyword">lambda</span> x: x.year</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">125</span>]: by_year = rets.groupby(get_year)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">126</span>]: by_year.apply(spx_corr)</span><br><span class="line">Out[<span class="hljs-number">126</span>]: </span><br><span class="line">          AAPL      MSFT       XOM  SPX</span><br><span class="line"><span class="hljs-number">2003</span>  <span class="hljs-number">0.541124</span>  <span class="hljs-number">0.745174</span>  <span class="hljs-number">0.661265</span>  <span class="hljs-number">1.0</span></span><br><span class="line"><span class="hljs-number">2004</span>  <span class="hljs-number">0.374283</span>  <span class="hljs-number">0.588531</span>  <span class="hljs-number">0.557742</span>  <span class="hljs-number">1.0</span></span><br><span class="line"><span class="hljs-number">2005</span>  <span class="hljs-number">0.467540</span>  <span class="hljs-number">0.562374</span>  <span class="hljs-number">0.631010</span>  <span class="hljs-number">1.0</span></span><br><span class="line"><span class="hljs-number">2006</span>  <span class="hljs-number">0.428267</span>  <span class="hljs-number">0.406126</span>  <span class="hljs-number">0.518514</span>  <span class="hljs-number">1.0</span></span><br><span class="line"><span class="hljs-number">2007</span>  <span class="hljs-number">0.508118</span>  <span class="hljs-number">0.658770</span>  <span class="hljs-number">0.786264</span>  <span class="hljs-number">1.0</span></span><br><span class="line"><span class="hljs-number">2008</span>  <span class="hljs-number">0.681434</span>  <span class="hljs-number">0.804626</span>  <span class="hljs-number">0.828303</span>  <span class="hljs-number">1.0</span></span><br><span class="line"><span class="hljs-number">2009</span>  <span class="hljs-number">0.707103</span>  <span class="hljs-number">0.654902</span>  <span class="hljs-number">0.797921</span>  <span class="hljs-number">1.0</span></span><br><span class="line"><span class="hljs-number">2010</span>  <span class="hljs-number">0.710105</span>  <span class="hljs-number">0.730118</span>  <span class="hljs-number">0.839057</span>  <span class="hljs-number">1.0</span></span><br><span class="line"><span class="hljs-number">2011</span>  <span class="hljs-number">0.691931</span>  <span class="hljs-number">0.800996</span>  <span class="hljs-number">0.859975</span>  <span class="hljs-number">1.0</span></span><br></pre></td></tr></table></figure><p>当然，你还可以计算列与列之间的相关系数。这里，我们计算Apple和Microsoft的年相关系数：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">127</span>]: by_year.apply(<span class="hljs-keyword">lambda</span> g: g[<span class="hljs-string">'AAPL'</span>].corr(g[<span class="hljs-string">'MSFT'</span>]))</span><br><span class="line">Out[<span class="hljs-number">127</span>]: </span><br><span class="line"><span class="hljs-number">2003</span>    <span class="hljs-number">0.480868</span></span><br><span class="line"><span class="hljs-number">2004</span>    <span class="hljs-number">0.259024</span></span><br><span class="line"><span class="hljs-number">2005</span>    <span class="hljs-number">0.300093</span></span><br><span class="line"><span class="hljs-number">2006</span>    <span class="hljs-number">0.161735</span></span><br><span class="line"><span class="hljs-number">2007</span>    <span class="hljs-number">0.417738</span></span><br><span class="line"><span class="hljs-number">2008</span>    <span class="hljs-number">0.611901</span></span><br><span class="line"><span class="hljs-number">2009</span>    <span class="hljs-number">0.432738</span></span><br><span class="line"><span class="hljs-number">2010</span>    <span class="hljs-number">0.571946</span></span><br><span class="line"><span class="hljs-number">2011</span>    <span class="hljs-number">0.581987</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><h2 id="示例：组级别的线性回归"><a href="#示例：组级别的线性回归" class="headerlink" title="示例：组级别的线性回归"></a>示例：组级别的线性回归</h2><p>顺着上一个例子继续，你可以用groupby执行更为复杂的分组统计分析，只要函数返回的是pandas对象或标量值即可。例如，我可以定义下面这个regress函数（利用statsmodels计量经济学库）对各数据块执行普通最小二乘法（Ordinary Least Squares，OLS）回归：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> statsmodels.api <span class="hljs-keyword">as</span> sm</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">regress</span><span class="hljs-params">(data, yvar, xvars)</span>:</span></span><br><span class="line">    Y = data[yvar]</span><br><span class="line">    X = data[xvars]</span><br><span class="line">    X[<span class="hljs-string">'intercept'</span>] = <span class="hljs-number">1.</span></span><br><span class="line">    result = sm.OLS(Y, X).fit()</span><br><span class="line">    <span class="hljs-keyword">return</span> result.params</span><br></pre></td></tr></table></figure><p>现在，为了按年计算AAPL对SPX收益率的线性回归，执行：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">129</span>]: by_year.apply(regress, <span class="hljs-string">'AAPL'</span>, [<span class="hljs-string">'SPX'</span>])</span><br><span class="line">Out[<span class="hljs-number">129</span>]: </span><br><span class="line">           SPX  intercept</span><br><span class="line"><span class="hljs-number">2003</span>  <span class="hljs-number">1.195406</span>   <span class="hljs-number">0.000710</span></span><br><span class="line"><span class="hljs-number">2004</span>  <span class="hljs-number">1.363463</span>   <span class="hljs-number">0.004201</span></span><br><span class="line"><span class="hljs-number">2005</span>  <span class="hljs-number">1.766415</span>   <span class="hljs-number">0.003246</span></span><br><span class="line"><span class="hljs-number">2006</span>  <span class="hljs-number">1.645496</span>   <span class="hljs-number">0.000080</span></span><br><span class="line"><span class="hljs-number">2007</span>  <span class="hljs-number">1.198761</span>   <span class="hljs-number">0.003438</span></span><br><span class="line"><span class="hljs-number">2008</span>  <span class="hljs-number">0.968016</span>  <span class="hljs-number">-0.001110</span></span><br><span class="line"><span class="hljs-number">2009</span>  <span class="hljs-number">0.879103</span>   <span class="hljs-number">0.002954</span></span><br><span class="line"><span class="hljs-number">2010</span>  <span class="hljs-number">1.052608</span>   <span class="hljs-number">0.001261</span></span><br><span class="line"><span class="hljs-number">2011</span>  <span class="hljs-number">0.806605</span>   <span class="hljs-number">0.001514</span></span><br></pre></td></tr></table></figure><h1 id="10-4-透视表和交叉表"><a href="#10-4-透视表和交叉表" class="headerlink" title="10.4 透视表和交叉表"></a>10.4 透视表和交叉表</h1><p>透视表（pivot table）是各种电子表格程序和其他数据分析软件中一种常见的数据汇总工具。它根据一个或多个键对数据进行聚合，并根据行和列上的分组键将数据分配到各个矩形区域中。在Python和pandas中，可以通过本章所介绍的groupby功能以及（能够利用层次化索引的）重塑运算制作透视表。DataFrame有一个pivot_table方法，此外还有一个顶级的pandas.pivot_table函数。除能为groupby提供便利之外，pivot_table还可以添加分项小计，也叫做margins。</p><p>回到小费数据集，假设我想要根据day和smoker计算分组平均数（pivot_table的默认聚合类型），并将day和smoker放到行上：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">130</span>]: tips.pivot_table(index=[<span class="hljs-string">'day'</span>, <span class="hljs-string">'smoker'</span>])</span><br><span class="line">Out[<span class="hljs-number">130</span>]: </span><br><span class="line">                 size       tip   tip_pct  total_bill</span><br><span class="line">day  smoker                                          </span><br><span class="line">Fri  No      <span class="hljs-number">2.250000</span>  <span class="hljs-number">2.812500</span>  <span class="hljs-number">0.151650</span>   <span class="hljs-number">18.420000</span></span><br><span class="line">     Yes     <span class="hljs-number">2.066667</span>  <span class="hljs-number">2.714000</span>  <span class="hljs-number">0.174783</span>   <span class="hljs-number">16.813333</span></span><br><span class="line">Sat  No      <span class="hljs-number">2.555556</span>  <span class="hljs-number">3.102889</span>  <span class="hljs-number">0.158048</span>   <span class="hljs-number">19.661778</span></span><br><span class="line">     Yes     <span class="hljs-number">2.476190</span>  <span class="hljs-number">2.875476</span>  <span class="hljs-number">0.147906</span>   <span class="hljs-number">21.276667</span></span><br><span class="line">Sun  No      <span class="hljs-number">2.929825</span>  <span class="hljs-number">3.167895</span>  <span class="hljs-number">0.160113</span>   <span class="hljs-number">20.506667</span></span><br><span class="line">     Yes     <span class="hljs-number">2.578947</span>  <span class="hljs-number">3.516842</span>  <span class="hljs-number">0.187250</span>   <span class="hljs-number">24.120000</span></span><br><span class="line">Thur No      <span class="hljs-number">2.488889</span>  <span class="hljs-number">2.673778</span>  <span class="hljs-number">0.160298</span>   <span class="hljs-number">17.113111</span></span><br><span class="line">     Yes     <span class="hljs-number">2.352941</span>  <span class="hljs-number">3.030000</span>  <span class="hljs-number">0.163863</span>   <span class="hljs-number">19.190588</span></span><br></pre></td></tr></table></figure><p>可以用groupby直接来做。现在，假设我们只想聚合tip_pct和size，而且想根据time进行分组。我将smoker放到列上，把day放到行上：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">131</span>]: tips.pivot_table([<span class="hljs-string">'tip_pct'</span>, <span class="hljs-string">'size'</span>], index=[<span class="hljs-string">'time'</span>, <span class="hljs-string">'day'</span>],</span><br><span class="line">   .....:                  columns=<span class="hljs-string">'smoker'</span>)</span><br><span class="line">Out[<span class="hljs-number">131</span>]: </span><br><span class="line">                 size             tip_pct          </span><br><span class="line">smoker             No       Yes        No       Yes</span><br><span class="line">time   day                                         </span><br><span class="line">Dinner Fri   <span class="hljs-number">2.000000</span>  <span class="hljs-number">2.222222</span>  <span class="hljs-number">0.139622</span>  <span class="hljs-number">0.165347</span></span><br><span class="line">       Sat   <span class="hljs-number">2.555556</span>  <span class="hljs-number">2.476190</span>  <span class="hljs-number">0.158048</span>  <span class="hljs-number">0.147906</span></span><br><span class="line">       Sun   <span class="hljs-number">2.929825</span>  <span class="hljs-number">2.578947</span>  <span class="hljs-number">0.160113</span>  <span class="hljs-number">0.187250</span></span><br><span class="line">       Thur  <span class="hljs-number">2.000000</span>       NaN  <span class="hljs-number">0.159744</span>       NaN</span><br><span class="line">Lunch  Fri   <span class="hljs-number">3.000000</span>  <span class="hljs-number">1.833333</span>  <span class="hljs-number">0.187735</span>  <span class="hljs-number">0.188937</span></span><br><span class="line">       Thur  <span class="hljs-number">2.500000</span>  <span class="hljs-number">2.352941</span>  <span class="hljs-number">0.160311</span>  <span class="hljs-number">0.163863</span></span><br></pre></td></tr></table></figure><p>还可以对这个表作进一步的处理，传入margins=True添加分项小计。这将会添加标签为All的行和列，其值对应于单个等级中所有数据的分组统计：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">132</span>]: tips.pivot_table([<span class="hljs-string">'tip_pct'</span>, <span class="hljs-string">'size'</span>], index=[<span class="hljs-string">'time'</span>, <span class="hljs-string">'day'</span>],</span><br><span class="line">   .....:                  columns=<span class="hljs-string">'smoker'</span>, margins=<span class="hljs-literal">True</span>)</span><br><span class="line">Out[<span class="hljs-number">132</span>]: </span><br><span class="line">                 size                       tip_pct                    </span><br><span class="line">smoker             No       Yes       All        No       Yes       All</span><br><span class="line">time   day                                                             </span><br><span class="line">Dinner Fri   <span class="hljs-number">2.000000</span>  <span class="hljs-number">2.222222</span>  <span class="hljs-number">2.166667</span>  <span class="hljs-number">0.139622</span>  <span class="hljs-number">0.165347</span>  <span class="hljs-number">0.158916</span></span><br><span class="line">       Sat   <span class="hljs-number">2.555556</span>  <span class="hljs-number">2.476190</span>  <span class="hljs-number">2.517241</span>  <span class="hljs-number">0.158048</span>  <span class="hljs-number">0.147906</span>  <span class="hljs-number">0.153152</span></span><br><span class="line">       Sun   <span class="hljs-number">2.929825</span>  <span class="hljs-number">2.578947</span>  <span class="hljs-number">2.842105</span>  <span class="hljs-number">0.160113</span>  <span class="hljs-number">0.187250</span>  <span class="hljs-number">0.166897</span></span><br><span class="line">       Thur  <span class="hljs-number">2.000000</span>       NaN  <span class="hljs-number">2.000000</span>  <span class="hljs-number">0.159744</span>       NaN  <span class="hljs-number">0.159744</span></span><br><span class="line">Lunch  Fri   <span class="hljs-number">3.000000</span>  <span class="hljs-number">1.833333</span>  <span class="hljs-number">2.000000</span>  <span class="hljs-number">0.187735</span>  <span class="hljs-number">0.188937</span>  <span class="hljs-number">0.188765</span></span><br><span class="line">       Thur  <span class="hljs-number">2.500000</span>  <span class="hljs-number">2.352941</span>  <span class="hljs-number">2.459016</span>  <span class="hljs-number">0.160311</span>  <span class="hljs-number">0.163863</span>  <span class="hljs-number">0.161301</span></span><br><span class="line">All          <span class="hljs-number">2.668874</span>  <span class="hljs-number">2.408602</span>  <span class="hljs-number">2.569672</span>  <span class="hljs-number">0.159328</span>  <span class="hljs-number">0.163196</span>  <span class="hljs-number">0.160803</span></span><br></pre></td></tr></table></figure><p>这里，All值为平均数：不单独考虑烟民与非烟民（All列），不单独考虑行分组两个级别中的任何单项（All行）。</p><p>要使用其他的聚合函数，将其传给aggfunc即可。例如，使用count或len可以得到有关分组大小的交叉表（计数或频率）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">133</span>]: tips.pivot_table(<span class="hljs-string">'tip_pct'</span>, index=[<span class="hljs-string">'time'</span>, <span class="hljs-string">'smoker'</span>], columns=<span class="hljs-string">'day'</span>,</span><br><span class="line">   .....:                  aggfunc=len, margins=<span class="hljs-literal">True</span>)</span><br><span class="line">Out[<span class="hljs-number">133</span>]: </span><br><span class="line">day             Fri   Sat   Sun  Thur    All</span><br><span class="line">time   smoker                               </span><br><span class="line">Dinner No       <span class="hljs-number">3.0</span>  <span class="hljs-number">45.0</span>  <span class="hljs-number">57.0</span>   <span class="hljs-number">1.0</span>  <span class="hljs-number">106.0</span></span><br><span class="line">       Yes      <span class="hljs-number">9.0</span>  <span class="hljs-number">42.0</span>  <span class="hljs-number">19.0</span>   NaN   <span class="hljs-number">70.0</span></span><br><span class="line">Lunch  No       <span class="hljs-number">1.0</span>   NaN   NaN  <span class="hljs-number">44.0</span>   <span class="hljs-number">45.0</span></span><br><span class="line">       Yes      <span class="hljs-number">6.0</span>   NaN   NaN  <span class="hljs-number">17.0</span>   <span class="hljs-number">23.0</span></span><br><span class="line">All            <span class="hljs-number">19.0</span>  <span class="hljs-number">87.0</span>  <span class="hljs-number">76.0</span>  <span class="hljs-number">62.0</span>  <span class="hljs-number">244.0</span></span><br></pre></td></tr></table></figure><p>如果存在空的组合（也就是NA），你可能会希望设置一个fill_value：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">134</span>]: tips.pivot_table(<span class="hljs-string">'tip_pct'</span>, index=[<span class="hljs-string">'time'</span>, <span class="hljs-string">'size'</span>, <span class="hljs-string">'smoker'</span>],</span><br><span class="line">   .....:                  columns=<span class="hljs-string">'day'</span>, aggfunc=<span class="hljs-string">'mean'</span>, fill_value=<span class="hljs-number">0</span>)</span><br><span class="line">Out[<span class="hljs-number">134</span>]: </span><br><span class="line">day                      Fri       Sat       Sun      Thur</span><br><span class="line">time   size smoker                                        </span><br><span class="line">Dinner <span class="hljs-number">1</span>    No      <span class="hljs-number">0.000000</span>  <span class="hljs-number">0.137931</span>  <span class="hljs-number">0.000000</span>  <span class="hljs-number">0.000000</span></span><br><span class="line">            Yes     <span class="hljs-number">0.000000</span>  <span class="hljs-number">0.325733</span>  <span class="hljs-number">0.000000</span>  <span class="hljs-number">0.000000</span></span><br><span class="line">       <span class="hljs-number">2</span>    No      <span class="hljs-number">0.139622</span>  <span class="hljs-number">0.162705</span>  <span class="hljs-number">0.168859</span>  <span class="hljs-number">0.159744</span></span><br><span class="line">            Yes     <span class="hljs-number">0.171297</span>  <span class="hljs-number">0.148668</span>  <span class="hljs-number">0.207893</span>  <span class="hljs-number">0.000000</span></span><br><span class="line">       <span class="hljs-number">3</span>    No      <span class="hljs-number">0.000000</span>  <span class="hljs-number">0.154661</span>  <span class="hljs-number">0.152663</span>  <span class="hljs-number">0.000000</span></span><br><span class="line">            Yes     <span class="hljs-number">0.000000</span>  <span class="hljs-number">0.144995</span>  <span class="hljs-number">0.152660</span>  <span class="hljs-number">0.000000</span></span><br><span class="line">       <span class="hljs-number">4</span>    No      <span class="hljs-number">0.000000</span>  <span class="hljs-number">0.150096</span>  <span class="hljs-number">0.148143</span>  <span class="hljs-number">0.000000</span></span><br><span class="line">            Yes     <span class="hljs-number">0.117750</span>  <span class="hljs-number">0.124515</span>  <span class="hljs-number">0.193370</span>  <span class="hljs-number">0.000000</span></span><br><span class="line">       <span class="hljs-number">5</span>    No      <span class="hljs-number">0.000000</span>  <span class="hljs-number">0.000000</span>  <span class="hljs-number">0.206928</span>  <span class="hljs-number">0.000000</span></span><br><span class="line">Yes     <span class="hljs-number">0.000000</span>  <span class="hljs-number">0.106572</span>  <span class="hljs-number">0.065660</span>  <span class="hljs-number">0.000000</span></span><br><span class="line"><span class="hljs-meta">... </span>                     ...       ...       ...       ...</span><br><span class="line">Lunch  <span class="hljs-number">1</span>    No      <span class="hljs-number">0.000000</span>  <span class="hljs-number">0.000000</span>  <span class="hljs-number">0.000000</span>  <span class="hljs-number">0.181728</span></span><br><span class="line">            Yes     <span class="hljs-number">0.223776</span>  <span class="hljs-number">0.000000</span>  <span class="hljs-number">0.000000</span>  <span class="hljs-number">0.000000</span></span><br><span class="line">       <span class="hljs-number">2</span>    No      <span class="hljs-number">0.000000</span>  <span class="hljs-number">0.000000</span>  <span class="hljs-number">0.000000</span>  <span class="hljs-number">0.166005</span></span><br><span class="line">            Yes     <span class="hljs-number">0.181969</span>  <span class="hljs-number">0.000000</span>  <span class="hljs-number">0.000000</span>  <span class="hljs-number">0.158843</span></span><br><span class="line">       <span class="hljs-number">3</span>    No      <span class="hljs-number">0.187735</span>  <span class="hljs-number">0.000000</span>  <span class="hljs-number">0.000000</span>  <span class="hljs-number">0.084246</span></span><br><span class="line">            Yes     <span class="hljs-number">0.000000</span>  <span class="hljs-number">0.000000</span>  <span class="hljs-number">0.000000</span>  <span class="hljs-number">0.204952</span></span><br><span class="line">       <span class="hljs-number">4</span>    No      <span class="hljs-number">0.000000</span>  <span class="hljs-number">0.000000</span>  <span class="hljs-number">0.000000</span>  <span class="hljs-number">0.138919</span></span><br><span class="line">            Yes     <span class="hljs-number">0.000000</span>  <span class="hljs-number">0.000000</span>  <span class="hljs-number">0.000000</span>  <span class="hljs-number">0.155410</span></span><br><span class="line">       <span class="hljs-number">5</span>    No      <span class="hljs-number">0.000000</span>  <span class="hljs-number">0.000000</span>  <span class="hljs-number">0.000000</span>  <span class="hljs-number">0.121389</span></span><br><span class="line">       <span class="hljs-number">6</span>    No      <span class="hljs-number">0.000000</span>  <span class="hljs-number">0.000000</span>  <span class="hljs-number">0.000000</span>  <span class="hljs-number">0.173706</span></span><br><span class="line">[<span class="hljs-number">21</span> rows x <span class="hljs-number">4</span> columns]</span><br></pre></td></tr></table></figure><p>pivot_table的参数说明请参见表10-2。</p><p><img src="/images/blog/7178691-c9e01844c4803a42.webp" alt="img"></p><p>表10-2 pivot_table的选项</p><h2 id="交叉表：crosstab"><a href="#交叉表：crosstab" class="headerlink" title="交叉表：crosstab"></a>交叉表：crosstab</h2><p>交叉表（cross-tabulation，简称crosstab）是一种用于计算分组频率的特殊透视表。看下面的例子：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">138</span>]: data</span><br><span class="line">Out[<span class="hljs-number">138</span>]:</span><br><span class="line">   Sample Nationality    Handedness</span><br><span class="line"><span class="hljs-number">0</span>       <span class="hljs-number">1</span>         USA  Right-handed</span><br><span class="line"><span class="hljs-number">1</span>       <span class="hljs-number">2</span>       Japan   Left-handed</span><br><span class="line"><span class="hljs-number">2</span>       <span class="hljs-number">3</span>         USA  Right-handed</span><br><span class="line"><span class="hljs-number">3</span>       <span class="hljs-number">4</span>       Japan  Right-handed</span><br><span class="line"><span class="hljs-number">4</span>       <span class="hljs-number">5</span>       Japan   Left-handed</span><br><span class="line"><span class="hljs-number">5</span>       <span class="hljs-number">6</span>       Japan  Right-handed</span><br><span class="line"><span class="hljs-number">6</span>       <span class="hljs-number">7</span>         USA  Right-handed</span><br><span class="line"><span class="hljs-number">7</span>       <span class="hljs-number">8</span>         USA   Left-handed</span><br><span class="line"><span class="hljs-number">8</span>       <span class="hljs-number">9</span>       Japan  Right-handed</span><br><span class="line"><span class="hljs-number">9</span>      <span class="hljs-number">10</span>         USA  Right-handed</span><br></pre></td></tr></table></figure><p>作为调查分析的一部分，我们可能想要根据国籍和用手习惯对这段数据进行统计汇总。虽然可以用pivot_table实现该功能，但是pandas.crosstab函数会更方便：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">139</span>]: pd.crosstab(data.Nationality, data.Handedness, margins=<span class="hljs-literal">True</span>)</span><br><span class="line">Out[<span class="hljs-number">139</span>]: </span><br><span class="line">Handedness   Left-handed  Right-handed  All</span><br><span class="line">Nationality</span><br><span class="line">Japan                  <span class="hljs-number">2</span>             <span class="hljs-number">3</span>    <span class="hljs-number">5</span></span><br><span class="line">USA                    <span class="hljs-number">1</span>             <span class="hljs-number">4</span>    <span class="hljs-number">5</span></span><br><span class="line">All                    <span class="hljs-number">3</span>             <span class="hljs-number">7</span>   <span class="hljs-number">10</span></span><br></pre></td></tr></table></figure><p>crosstab的前两个参数可以是数组或Series，或是数组列表。就像小费数据：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">140</span>]: pd.crosstab([tips.time, tips.day], tips.smoker, margins=<span class="hljs-literal">True</span>)</span><br><span class="line">Out[<span class="hljs-number">140</span>]: </span><br><span class="line">smoker        No  Yes  All</span><br><span class="line">time   day                </span><br><span class="line">Dinner Fri     <span class="hljs-number">3</span>    <span class="hljs-number">9</span>   <span class="hljs-number">12</span></span><br><span class="line">       Sat    <span class="hljs-number">45</span>   <span class="hljs-number">42</span>   <span class="hljs-number">87</span></span><br><span class="line">       Sun    <span class="hljs-number">57</span>   <span class="hljs-number">19</span>   <span class="hljs-number">76</span></span><br><span class="line">       Thur    <span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">1</span></span><br><span class="line">Lunch  Fri     <span class="hljs-number">1</span>    <span class="hljs-number">6</span>    <span class="hljs-number">7</span></span><br><span class="line">       Thur   <span class="hljs-number">44</span>   <span class="hljs-number">17</span>   <span class="hljs-number">61</span></span><br><span class="line">All          <span class="hljs-number">151</span>   <span class="hljs-number">93</span>  <span class="hljs-number">244</span></span><br></pre></td></tr></table></figure><h1 id="10-5-总结"><a href="#10-5-总结" class="headerlink" title="10.5 总结"></a>10.5 总结</h1><p>掌握pandas数据分组工具既有助于数据清理，也有助于建模或统计分析工作。在第14章，我们会看几个例子，对真实数据使用groupby。</p><p>在下一章，我们将关注时间序列数据。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载自&lt;a href=&quot;https://www.jianshu.com/p/b94deb5c7eb1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;../《利用Python进行数据分析·第2版》第1章%20准备工作&quot;&gt;第1章 准备工作&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第2章%20Python语法基础，IPython和Jupyter%20Notebooks&quot;&gt;第2章 Python语法基础，IPython和Jupyter Notebooks&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第3章%20Python的数据结构、函数和文件&quot;&gt;第3章 Python的数据结构、函数和文件&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第4章%20NumPy基础：数组和矢量计算&quot;&gt;第4章 NumPy基础：数组和矢量计算&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第5章%20pandas入门&quot;&gt;第5章 pandas入门&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第6章%20数据加载、存储与文件格式&quot;&gt;第6章 数据加载、存储与文件格式&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第7章%20数据清洗和准备&quot;&gt;第7章 数据清洗和准备&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第8章%20数据规整：聚合、合并和重塑&quot;&gt;第8章 数据规整：聚合、合并和重塑&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第9章%20绘图和可视化&quot;&gt;第9章 绘图和可视化&lt;/a&gt;&lt;br&gt;第10章 数据聚合与分组运算&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第11章%20时间序列&quot;&gt;第11章 时间序列&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第12章%20pandas高级应用&quot;&gt;第12章 pandas高级应用&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第13章%20Python建模库介绍&quot;&gt;第13章 Python建模库介绍&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第14章%20数据分析案例&quot;&gt;第14章 数据分析案例&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》附录A%20NumPy高级应用&quot;&gt;附录A NumPy高级应用&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》附录B%20更多关于IPython的内容（完）&quot;&gt;附录B 更多关于IPython的内容（完）&lt;/a&gt;      &lt;/p&gt;
    
    </summary>
    
    
      <category term="数据分析" scheme="https://glanhoo.coding.me/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="https://glanhoo.coding.me/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="pandas" scheme="https://glanhoo.coding.me/tags/pandas/"/>
    
      <category term="python" scheme="https://glanhoo.coding.me/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>《利用Python进行数据分析·第2版》第9章 绘图和可视化</title>
    <link href="https://glanhoo.coding.me/2019/11/05/%E3%80%8A%E5%88%A9%E7%94%A8Python%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%C2%B7%E7%AC%AC2%E7%89%88%E3%80%8B%E7%AC%AC9%E7%AB%A0%20%E7%BB%98%E5%9B%BE%E5%92%8C%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <id>https://glanhoo.coding.me/2019/11/05/%E3%80%8A%E5%88%A9%E7%94%A8Python%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%C2%B7%E7%AC%AC2%E7%89%88%E3%80%8B%E7%AC%AC9%E7%AB%A0%20%E7%BB%98%E5%9B%BE%E5%92%8C%E5%8F%AF%E8%A7%86%E5%8C%96/</id>
    <published>2019-11-05T01:58:29.000Z</published>
    <updated>2019-12-11T02:21:13.719Z</updated>
    
    <content type="html"><![CDATA[<p>转载自<a href="https://www.jianshu.com/p/7a0eafdd1340" target="_blank" rel="noopener">简书</a></p><p><a href="../《利用Python进行数据分析·第2版》第1章%20准备工作">第1章 准备工作</a><br> <a href="../《利用Python进行数据分析·第2版》第2章%20Python语法基础，IPython和Jupyter%20Notebooks">第2章 Python语法基础，IPython和Jupyter Notebooks</a><br> <a href="../《利用Python进行数据分析·第2版》第3章%20Python的数据结构、函数和文件">第3章 Python的数据结构、函数和文件</a><br> <a href="../《利用Python进行数据分析·第2版》第4章%20NumPy基础：数组和矢量计算">第4章 NumPy基础：数组和矢量计算</a><br> <a href="../《利用Python进行数据分析·第2版》第5章%20pandas入门">第5章 pandas入门</a><br> <a href="../《利用Python进行数据分析·第2版》第6章%20数据加载、存储与文件格式">第6章 数据加载、存储与文件格式</a><br> <a href="../《利用Python进行数据分析·第2版》第7章%20数据清洗和准备">第7章 数据清洗和准备</a><br> <a href="../《利用Python进行数据分析·第2版》第8章%20数据规整：聚合、合并和重塑">第8章 数据规整：聚合、合并和重塑</a><br>第9章 绘图和可视化<br> <a href="../《利用Python进行数据分析·第2版》第10章%20数据聚合与分组运算">第10章 数据聚合与分组运算</a><br> <a href="../《利用Python进行数据分析·第2版》第11章%20时间序列">第11章 时间序列</a><br> <a href="../《利用Python进行数据分析·第2版》第12章%20pandas高级应用">第12章 pandas高级应用</a><br> <a href="../《利用Python进行数据分析·第2版》第13章%20Python建模库介绍">第13章 Python建模库介绍</a><br> <a href="../《利用Python进行数据分析·第2版》第14章%20数据分析案例">第14章 数据分析案例</a><br> <a href="../《利用Python进行数据分析·第2版》附录A%20NumPy高级应用">附录A NumPy高级应用</a><br> <a href="../《利用Python进行数据分析·第2版》附录B%20更多关于IPython的内容（完）">附录B 更多关于IPython的内容（完）</a>      </p><a id="more"></a><hr><p>信息可视化（也叫绘图）是数据分析中最重要的工作之一。它可能是探索过程的一部分，例如，帮助我们找出异常值、必要的数据转换、得出有关模型的idea等。另外，做一个可交互的数据可视化也许是工作的最终目标。Python有许多库进行静态或动态的数据可视化，但我这里重要关注于matplotlib（<a href="http://matplotlib.org/）和基于它的库。" target="_blank" rel="noopener">http://matplotlib.org/）和基于它的库。</a></p><p>matplotlib是一个用于创建出版质量图表的桌面绘图包（主要是2D方面）。该项目是由John Hunter于2002年启动的，其目的是为Python构建一个MATLAB式的绘图接口。matplotlib和IPython社区进行合作，简化了从IPython shell（包括现在的Jupyter notebook）进行交互式绘图。matplotlib支持各种操作系统上许多不同的GUI后端，而且还能将图片导出为各种常见的矢量（vector）和光栅（raster）图：PDF、SVG、JPG、PNG、BMP、GIF等。除了几张，本书中的大部分图都是用它生成的。</p><p>随着时间的发展，matplotlib衍生出了多个数据可视化的工具集，它们使用matplotlib作为底层。其中之一是seaborn（<a href="http://seaborn.pydata.org/），本章后面会学习它。" target="_blank" rel="noopener">http://seaborn.pydata.org/），本章后面会学习它。</a></p><p>学习本章代码案例的最简单方法是在Jupyter notebook进行交互式绘图。在Jupyter notebook中执行下面的语句：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib notebook</span><br></pre></td></tr></table></figure><h1 id="9-1-matplotlib-API入门"><a href="#9-1-matplotlib-API入门" class="headerlink" title="9.1 matplotlib API入门"></a>9.1 matplotlib API入门</h1><p>matplotlib的通常引入约定是：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">11</span>]: <span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt</span><br></pre></td></tr></table></figure><p>在Jupyter中运行%matplotlib notebook（或在IPython中运行%matplotlib），就可以创建一个简单的图形。如果一切设置正确，会看到图9-1：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">12</span>]: <span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">13</span>]: data = np.arange(<span class="hljs-number">10</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">14</span>]: data</span><br><span class="line">Out[<span class="hljs-number">14</span>]: array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">15</span>]: plt.plot(data)</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-7032e333a6ecdd37.webp" alt="img"></p><p>图9-1 简单的线图</p><p>虽然seaborn这样的库和pandas的内置绘图函数能够处理许多普通的绘图任务，但如果需要自定义一些高级功能的话就必须学习matplotlib API。</p><blockquote><p>笔记：虽然本书没有详细地讨论matplotlib的各种功能，但足以将你引入门。matplotlib的示例库和文档是学习高级特性的最好资源。</p></blockquote><h2 id="Figure和Subplot"><a href="#Figure和Subplot" class="headerlink" title="Figure和Subplot"></a>Figure和Subplot</h2><p>matplotlib的图像都位于Figure对象中。你可以用plt.figure创建一个新的Figure：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">16</span>]: fig = plt.figure()</span><br></pre></td></tr></table></figure><p>如果用的是IPython，这时会弹出一个空窗口，但在Jupyter中，必须再输入更多命令才能看到。plt.figure有一些选项，特别是figsize，它用于确保当图片保存到磁盘时具有一定的大小和纵横比。</p><p>不能通过空Figure绘图。必须用add_subplot创建一个或多个subplot才行：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">17</span>]: ax1 = fig.add_subplot(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)</span><br></pre></td></tr></table></figure><p>这条代码的意思是：图像应该是2×2的（即最多4张图），且当前选中的是4个subplot中的第一个（编号从1开始）。如果再把后面两个subplot也创建出来，最终得到的图像如图9-2所示：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">18</span>]: ax2 = fig.add_subplot(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">19</span>]: ax3 = fig.add_subplot(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-b8cff158e64eae74.webp" alt="img"></p><p>图9-2 带有三个subplot的Figure</p><blockquote><p>提示：使用Jupyter notebook有一点不同，即每个小窗重新执行后，图形会被重置。因此，对于复杂的图形，，你必须将所有的绘图命令存在一个小窗里。</p></blockquote><p>这里，我们运行同一个小窗里的所有命令：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure()</span><br><span class="line">ax1 = fig.add_subplot(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)</span><br><span class="line">ax2 = fig.add_subplot(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>)</span><br><span class="line">ax3 = fig.add_subplot(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)</span><br></pre></td></tr></table></figure><p>如果这时执行一条绘图命令（如plt.plot([1.5, 3.5, -2, 1.6])），matplotlib就会在最后一个用过的subplot（如果没有则创建一个）上进行绘制，隐藏创建figure和subplot的过程。因此，如果我们执行下列命令，你就会得到如图9-3所示的结果：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">20</span>]: plt.plot(np.random.randn(<span class="hljs-number">50</span>).cumsum(), <span class="hljs-string">'k--'</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-7bcbd5e56fdbbd92.webp" alt="img"></p><p>图9-3 绘制一次之后的图像</p><p>“k–”是一个线型选项，用于告诉matplotlib绘制黑色虚线图。上面那些由fig.add_subplot所返回的对象是AxesSubplot对象，直接调用它们的实例方法就可以在其它空着的格子里面画图了，如图9-4所示：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">21</span>]: ax1.hist(np.random.randn(<span class="hljs-number">100</span>), bins=<span class="hljs-number">20</span>, color=<span class="hljs-string">'k'</span>, alpha=<span class="hljs-number">0.3</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">22</span>]: ax2.scatter(np.arange(<span class="hljs-number">30</span>), np.arange(<span class="hljs-number">30</span>) + <span class="hljs-number">3</span> * np.random.randn(<span class="hljs-number">30</span>))</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-2297bcaf355db24c.webp" alt="img"></p><p>图9-4 继续绘制两次之后的图像</p><p>你可以在matplotlib的文档中找到各种图表类型。</p><p>创建包含subplot网格的figure是一个非常常见的任务，matplotlib有一个更为方便的方法plt.subplots，它可以创建一个新的Figure，并返回一个含有已创建的subplot对象的NumPy数组：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">24</span>]: fig, axes = plt.subplots(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">25</span>]: axes</span><br><span class="line">Out[<span class="hljs-number">25</span>]: </span><br><span class="line">array([[&lt;matplotlib.axes._subplots.AxesSubplot object at <span class="hljs-number">0x7fb626374048</span>&gt;,</span><br><span class="line">        &lt;matplotlib.axes._subplots.AxesSubplot object at <span class="hljs-number">0x7fb62625db00</span>&gt;,</span><br><span class="line">        &lt;matplotlib.axes._subplots.AxesSubplot object at <span class="hljs-number">0x7fb6262f6c88</span>&gt;],</span><br><span class="line">       [&lt;matplotlib.axes._subplots.AxesSubplot object at <span class="hljs-number">0x7fb6261a36a0</span>&gt;,</span><br><span class="line">        &lt;matplotlib.axes._subplots.AxesSubplot object at <span class="hljs-number">0x7fb626181860</span>&gt;,</span><br><span class="line">        &lt;matplotlib.axes._subplots.AxesSubplot object at <span class="hljs-number">0x7fb6260fd4e0</span>&gt;]], dtype</span><br><span class="line">=object)</span><br></pre></td></tr></table></figure><p>这是非常实用的，因为可以轻松地对axes数组进行索引，就好像是一个二维数组一样，例如axes[0,1]。你还可以通过sharex和sharey指定subplot应该具有相同的X轴或Y轴。在比较相同范围的数据时，这也是非常实用的，否则，matplotlib会自动缩放各图表的界限。有关该方法的更多信息，请参见表9-1。</p><p><img src="/images/blog/7178691-88bb55faca7d01ba.webp" alt="img"></p><p>表9-1 pyplot.subplots的选项</p><h2 id="调整subplot周围的间距"><a href="#调整subplot周围的间距" class="headerlink" title="调整subplot周围的间距"></a>调整subplot周围的间距</h2><p>默认情况下，matplotlib会在subplot外围留下一定的边距，并在subplot之间留下一定的间距。间距跟图像的高度和宽度有关，因此，如果你调整了图像大小（不管是编程还是手工），间距也会自动调整。利用Figure的subplots_adjust方法可以轻而易举地修改间距，此外，它也是个顶级函数：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">subplots_adjust(left=<span class="hljs-literal">None</span>, bottom=<span class="hljs-literal">None</span>, right=<span class="hljs-literal">None</span>, top=<span class="hljs-literal">None</span>,</span><br><span class="line">                wspace=<span class="hljs-literal">None</span>, hspace=<span class="hljs-literal">None</span>)</span><br></pre></td></tr></table></figure><p>wspace和hspace用于控制宽度和高度的百分比，可以用作subplot之间的间距。下面是一个简单的例子，其中我将间距收缩到了0（如图9-5所示）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fig, axes = plt.subplots(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, sharex=<span class="hljs-literal">True</span>, sharey=<span class="hljs-literal">True</span>)</span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">2</span>):</span><br><span class="line">    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">2</span>):</span><br><span class="line">        axes[i, j].hist(np.random.randn(<span class="hljs-number">500</span>), bins=<span class="hljs-number">50</span>, color=<span class="hljs-string">'k'</span>, alpha=<span class="hljs-number">0.5</span>)</span><br><span class="line">plt.subplots_adjust(wspace=<span class="hljs-number">0</span>, hspace=<span class="hljs-number">0</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-80be7ffc3dec88a5.webp" alt="img"></p><p>图9-5 各subplot之间没有间距</p><p>不难看出，其中的轴标签重叠了。matplotlib不会检查标签是否重叠，所以对于这种情况，你只能自己设定刻度位置和刻度标签。后面几节将会详细介绍该内容。</p><h2 id="颜色、标记和线型"><a href="#颜色、标记和线型" class="headerlink" title="颜色、标记和线型"></a>颜色、标记和线型</h2><p>matplotlib的plot函数接受一组X和Y坐标，还可以接受一个表示颜色和线型的字符串缩写。例如，要根据x和y绘制绿色虚线，你可以执行如下代码：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ax.plot(x, y, <span class="hljs-string">'g--'</span>)</span><br></pre></td></tr></table></figure><p>这种在一个字符串中指定颜色和线型的方式非常方便。在实际中，如果你是用代码绘图，你可能不想通过处理字符串来获得想要的格式。通过下面这种更为明确的方式也能得到同样的效果：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ax.plot(x, y, linestyle=<span class="hljs-string">'--'</span>, color=<span class="hljs-string">'g'</span>)</span><br></pre></td></tr></table></figure><p>常用的颜色可以使用颜色缩写，你也可以指定颜色码（例如，’#CECECE’）。你可以通过查看plot的文档字符串查看所有线型的合集（在IPython和Jupyter中使用plot?）。</p><p>线图可以使用标记强调数据点。因为matplotlib可以创建连续线图，在点之间进行插值，因此有时可能不太容易看出真实数据点的位置。标记也可以放到格式字符串中，但标记类型和线型必须放在颜色后面（见图9-6）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">30</span>]: <span class="hljs-keyword">from</span> numpy.random <span class="hljs-keyword">import</span> randn</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">31</span>]: plt.plot(randn(<span class="hljs-number">30</span>).cumsum(), <span class="hljs-string">'ko--'</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-404d816f3e1d6621.webp" alt="img"></p><p>图9-6 带有标记的线型图示例</p><p>还可以将其写成更为明确的形式：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plot(randn(<span class="hljs-number">30</span>).cumsum(), color=<span class="hljs-string">'k'</span>, linestyle=<span class="hljs-string">'dashed'</span>, marker=<span class="hljs-string">'o'</span>)</span><br></pre></td></tr></table></figure><p>在线型图中，非实际数据点默认是按线性方式插值的。可以通过drawstyle选项修改（见图9-7）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">33</span>]: data = np.random.randn(<span class="hljs-number">30</span>).cumsum()</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">34</span>]: plt.plot(data, <span class="hljs-string">'k--'</span>, label=<span class="hljs-string">'Default'</span>)</span><br><span class="line">Out[<span class="hljs-number">34</span>]: [&lt;matplotlib.lines.Line2D at <span class="hljs-number">0x7fb624d86160</span>&gt;]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">35</span>]: plt.plot(data, <span class="hljs-string">'k-'</span>, drawstyle=<span class="hljs-string">'steps-post'</span>, label=<span class="hljs-string">'steps-post'</span>)</span><br><span class="line">Out[<span class="hljs-number">35</span>]: [&lt;matplotlib.lines.Line2D at <span class="hljs-number">0x7fb624d869e8</span>&gt;]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">36</span>]: plt.legend(loc=<span class="hljs-string">'best'</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-3ec7642e1a592f08.webp" alt="img"></p><p>图9-7 不同drawstyle选项的线型图</p><p>你可能注意到运行上面代码时有输出&lt;matplotlib.lines.Line2D at …&gt;。matplotlib会返回引用了新添加的子组件的对象。大多数时候，你可以放心地忽略这些输出。这里，因为我们传递了label参数到plot，我们可以创建一个plot图例，指明每条使用plt.legend的线。</p><blockquote><p>笔记：你必须调用plt.legend（或使用ax.legend，如果引用了轴的话）来创建图例，无论你绘图时是否传递label标签选项。</p></blockquote><h2 id="刻度、标签和图例"><a href="#刻度、标签和图例" class="headerlink" title="刻度、标签和图例"></a>刻度、标签和图例</h2><p>对于大多数的图表装饰项，其主要实现方式有二：使用过程型的pyplot接口（例如，matplotlib.pyplot）以及更为面向对象的原生matplotlib API。</p><p>pyplot接口的设计目的就是交互式使用，含有诸如xlim、xticks和xticklabels之类的方法。它们分别控制图表的范围、刻度位置、刻度标签等。其使用方式有以下两种：</p><ul><li>调用时不带参数，则返回当前的参数值（例如，plt.xlim()返回当前的X轴绘图范围）。</li><li>调用时带参数，则设置参数值（例如，plt.xlim([0,10])会将X轴的范围设置为0到10）。</li></ul><p>所有这些方法都是对当前或最近创建的AxesSubplot起作用的。它们各自对应subplot对象上的两个方法，以xlim为例，就是ax.get_xlim和ax.set_xlim。我更喜欢使用subplot的实例方法（因为我喜欢明确的事情，而且在处理多个subplot时这样也更清楚一些）。当然你完全可以选择自己觉得方便的那个。</p><h2 id="设置标题、轴标签、刻度以及刻度标签"><a href="#设置标题、轴标签、刻度以及刻度标签" class="headerlink" title="设置标题、轴标签、刻度以及刻度标签"></a>设置标题、轴标签、刻度以及刻度标签</h2><p>为了说明自定义轴，我将创建一个简单的图像并绘制一段随机漫步（如图9-8所示）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">37</span>]: fig = plt.figure()</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">38</span>]: ax = fig.add_subplot(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">39</span>]: ax.plot(np.random.randn(<span class="hljs-number">1000</span>).cumsum())</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-caf9300dacb61fa4.webp" alt="img"></p><p>图9-8 用于演示xticks的简单线型图（带有标签）</p><p>要改变x轴刻度，最简单的办法是使用set_xticks和set_xticklabels。前者告诉matplotlib要将刻度放在数据范围中的哪些位置，默认情况下，这些位置也就是刻度标签。但我们可以通过set_xticklabels将任何其他的值用作标签：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">40</span>]: ticks = ax.set_xticks([<span class="hljs-number">0</span>, <span class="hljs-number">250</span>, <span class="hljs-number">500</span>, <span class="hljs-number">750</span>, <span class="hljs-number">1000</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">41</span>]: labels = ax.set_xticklabels([<span class="hljs-string">'one'</span>, <span class="hljs-string">'two'</span>, <span class="hljs-string">'three'</span>, <span class="hljs-string">'four'</span>, <span class="hljs-string">'five'</span>],</span><br><span class="line">   ....:                             rotation=<span class="hljs-number">30</span>, fontsize=<span class="hljs-string">'small'</span>)</span><br></pre></td></tr></table></figure><p>rotation选项设定x刻度标签倾斜30度。最后，再用set_xlabel为X轴设置一个名称，并用set_title设置一个标题（见图9-9的结果）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">42</span>]: ax.set_title(<span class="hljs-string">'My first matplotlib plot'</span>)</span><br><span class="line">Out[<span class="hljs-number">42</span>]: &lt;matplotlib.text.Text at <span class="hljs-number">0x7fb624d055f8</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">43</span>]: ax.set_xlabel(<span class="hljs-string">'Stages'</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-741f968323bd818f.webp" alt="img"></p><p>图9-9 用于演示xticks的简单线型图</p><p>Y轴的修改方式与此类似，只需将上述代码中的x替换为y即可。轴的类有集合方法，可以批量设定绘图选项。前面的例子，也可以写为：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">props = &#123;</span><br><span class="line">    <span class="hljs-string">'title'</span>: <span class="hljs-string">'My first matplotlib plot'</span>,</span><br><span class="line">    <span class="hljs-string">'xlabel'</span>: <span class="hljs-string">'Stages'</span></span><br><span class="line">&#125;</span><br><span class="line">ax.set(**props)</span><br></pre></td></tr></table></figure><h2 id="添加图例"><a href="#添加图例" class="headerlink" title="添加图例"></a>添加图例</h2><p>图例（legend）是另一种用于标识图表元素的重要工具。添加图例的方式有多种。最简单的是在添加subplot的时候传入label参数：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">44</span>]: <span class="hljs-keyword">from</span> numpy.random <span class="hljs-keyword">import</span> randn</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">45</span>]: fig = plt.figure(); ax = fig.add_subplot(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">46</span>]: ax.plot(randn(<span class="hljs-number">1000</span>).cumsum(), <span class="hljs-string">'k'</span>, label=<span class="hljs-string">'one'</span>)</span><br><span class="line">Out[<span class="hljs-number">46</span>]: [&lt;matplotlib.lines.Line2D at <span class="hljs-number">0x7fb624bdf860</span>&gt;]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">47</span>]: ax.plot(randn(<span class="hljs-number">1000</span>).cumsum(), <span class="hljs-string">'k--'</span>, label=<span class="hljs-string">'two'</span>)</span><br><span class="line">Out[<span class="hljs-number">47</span>]: [&lt;matplotlib.lines.Line2D at <span class="hljs-number">0x7fb624be90f0</span>&gt;]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">48</span>]: ax.plot(randn(<span class="hljs-number">1000</span>).cumsum(), <span class="hljs-string">'k.'</span>, label=<span class="hljs-string">'three'</span>)</span><br><span class="line">Out[<span class="hljs-number">48</span>]: [&lt;matplotlib.lines.Line2D at <span class="hljs-number">0x7fb624be9160</span>&gt;]</span><br></pre></td></tr></table></figure><p>在此之后，你可以调用ax.legend()或plt.legend()来自动创建图例（结果见图9-10）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">49</span>]: ax.legend(loc=<span class="hljs-string">'best'</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-651ff89750c0a89b.webp" alt="img"></p><p>图9-10 带有三条线以及图例的简单线型图</p><p>legend方法有几个其它的loc位置参数选项。请查看文档字符串（使用ax.legend?）。</p><p>loc告诉matplotlib要将图例放在哪。如果你不是吹毛求疵的话，”best”是不错的选择，因为它会选择最不碍事的位置。要从图例中去除一个或多个元素，不传入label或传入label=’<em>nolegend</em>‘即可。（中文第一版这里把best错写成了beat）</p><h2 id="注解以及在Subplot上绘图"><a href="#注解以及在Subplot上绘图" class="headerlink" title="注解以及在Subplot上绘图"></a>注解以及在Subplot上绘图</h2><p>除标准的绘图类型，你可能还希望绘制一些子集的注解，可能是文本、箭头或其他图形等。注解和文字可以通过text、arrow和annotate函数进行添加。text可以将文本绘制在图表的指定坐标(x,y)，还可以加上一些自定义格式：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ax.text(x, y, <span class="hljs-string">'Hello world!'</span>,</span><br><span class="line">        family=<span class="hljs-string">'monospace'</span>, fontsize=<span class="hljs-number">10</span>)</span><br></pre></td></tr></table></figure><p>注解中可以既含有文本也含有箭头。例如，我们根据最近的标准普尔500指数价格（来自Yahoo!Finance）绘制一张曲线图，并标出2008年到2009年金融危机期间的一些重要日期。你可以在Jupyter notebook的一个小窗中试验这段代码（图9-11是结果）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="hljs-string">'examples/spx.csv'</span>, index_col=<span class="hljs-number">0</span>, parse_dates=<span class="hljs-literal">True</span>)</span><br><span class="line">spx = data[<span class="hljs-string">'SPX'</span>]</span><br><span class="line"></span><br><span class="line">spx.plot(ax=ax, style=<span class="hljs-string">'k-'</span>)</span><br><span class="line"></span><br><span class="line">crisis_data = [</span><br><span class="line">    (datetime(<span class="hljs-number">2007</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>), <span class="hljs-string">'Peak of bull market'</span>),</span><br><span class="line">    (datetime(<span class="hljs-number">2008</span>, <span class="hljs-number">3</span>, <span class="hljs-number">12</span>), <span class="hljs-string">'Bear Stearns Fails'</span>),</span><br><span class="line">    (datetime(<span class="hljs-number">2008</span>, <span class="hljs-number">9</span>, <span class="hljs-number">15</span>), <span class="hljs-string">'Lehman Bankruptcy'</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> date, label <span class="hljs-keyword">in</span> crisis_data:</span><br><span class="line">    ax.annotate(label, xy=(date, spx.asof(date) + <span class="hljs-number">75</span>),</span><br><span class="line">                xytext=(date, spx.asof(date) + <span class="hljs-number">225</span>),</span><br><span class="line">                arrowprops=dict(facecolor=<span class="hljs-string">'black'</span>, headwidth=<span class="hljs-number">4</span>, width=<span class="hljs-number">2</span>,</span><br><span class="line">                                headlength=<span class="hljs-number">4</span>),</span><br><span class="line">                horizontalalignment=<span class="hljs-string">'left'</span>, verticalalignment=<span class="hljs-string">'top'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Zoom in on 2007-2010</span></span><br><span class="line">ax.set_xlim([<span class="hljs-string">'1/1/2007'</span>, <span class="hljs-string">'1/1/2011'</span>])</span><br><span class="line">ax.set_ylim([<span class="hljs-number">600</span>, <span class="hljs-number">1800</span>])</span><br><span class="line"></span><br><span class="line">ax.set_title(<span class="hljs-string">'Important dates in the 2008-2009 financial crisis'</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-3127eaa51f5e4c2c.webp" alt="img"></p><p>图9-11 2008-2009年金融危机期间的重要日期</p><p>这张图中有几个重要的点要强调：ax.annotate方法可以在指定的x和y坐标轴绘制标签。我们使用set_xlim和set_ylim人工设定起始和结束边界，而不使用matplotlib的默认方法。最后，用ax.set_title添加图标标题。</p><p>更多有关注解的示例，请访问matplotlib的在线示例库。</p><p>图形的绘制要麻烦一些。matplotlib有一些表示常见图形的对象。这些对象被称为块（patch）。其中有些（如Rectangle和Circle），可以在matplotlib.pyplot中找到，但完整集合位于matplotlib.patches。</p><p>要在图表中添加一个图形，你需要创建一个块对象shp，然后通过ax.add_patch(shp)将其添加到subplot中（如图9-12所示）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)</span><br><span class="line"></span><br><span class="line">rect = plt.Rectangle((<span class="hljs-number">0.2</span>, <span class="hljs-number">0.75</span>), <span class="hljs-number">0.4</span>, <span class="hljs-number">0.15</span>, color=<span class="hljs-string">'k'</span>, alpha=<span class="hljs-number">0.3</span>)</span><br><span class="line">circ = plt.Circle((<span class="hljs-number">0.7</span>, <span class="hljs-number">0.2</span>), <span class="hljs-number">0.15</span>, color=<span class="hljs-string">'b'</span>, alpha=<span class="hljs-number">0.3</span>)</span><br><span class="line">pgon = plt.Polygon([[<span class="hljs-number">0.15</span>, <span class="hljs-number">0.15</span>], [<span class="hljs-number">0.35</span>, <span class="hljs-number">0.4</span>], [<span class="hljs-number">0.2</span>, <span class="hljs-number">0.6</span>]],</span><br><span class="line">                   color=<span class="hljs-string">'g'</span>, alpha=<span class="hljs-number">0.5</span>)</span><br><span class="line"></span><br><span class="line">ax.add_patch(rect)</span><br><span class="line">ax.add_patch(circ)</span><br><span class="line">ax.add_patch(pgon)</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-1f8a3d7a3a02d7d8.webp" alt="img"></p><p>图9-12 由三个块图形组成的图</p><p>如果查看许多常见图表对象的具体实现代码，你就会发现它们其实就是由块patch组装而成的。</p><h2 id="将图表保存到文件"><a href="#将图表保存到文件" class="headerlink" title="将图表保存到文件"></a>将图表保存到文件</h2><p>利用plt.savefig可以将当前图表保存到文件。该方法相当于Figure对象的实例方法savefig。例如，要将图表保存为SVG文件，你只需输入：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.savefig(<span class="hljs-string">'figpath.svg'</span>)</span><br></pre></td></tr></table></figure><p>文件类型是通过文件扩展名推断出来的。因此，如果你使用的是.pdf，就会得到一个PDF文件。我在发布图片时最常用到两个重要的选项是dpi（控制“每英寸点数”分辨率）和bbox_inches（可以剪除当前图表周围的空白部分）。要得到一张带有最小白边且分辨率为400DPI的PNG图片，你可以：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.savefig(<span class="hljs-string">'figpath.png'</span>, dpi=<span class="hljs-number">400</span>, bbox_inches=<span class="hljs-string">'tight'</span>)</span><br></pre></td></tr></table></figure><p>savefig并非一定要写入磁盘，也可以写入任何文件型的对象，比如BytesIO：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> BytesIO</span><br><span class="line">buffer = BytesIO()</span><br><span class="line">plt.savefig(buffer)</span><br><span class="line">plot_data = buffer.getvalue()</span><br></pre></td></tr></table></figure><p>表9-2列出了savefig的其它选项。</p><p><img src="/images/blog/7178691-4bee796bf7262423.webp" alt="img"></p><p>表9-2 Figure.savefig的选项</p><h2 id="matplotlib配置"><a href="#matplotlib配置" class="headerlink" title="matplotlib配置"></a>matplotlib配置</h2><p>matplotlib自带一些配色方案，以及为生成出版质量的图片而设定的默认配置信息。幸运的是，几乎所有默认行为都能通过一组全局参数进行自定义，它们可以管理图像大小、subplot边距、配色方案、字体大小、网格类型等。一种Python编程方式配置系统的方法是使用rc方法。例如，要将全局的图像默认大小设置为10×10，你可以执行：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.rc(<span class="hljs-string">'figure'</span>, figsize=(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>))</span><br></pre></td></tr></table></figure><p>rc的第一个参数是希望自定义的对象，如’figure’、’axes’、’xtick’、’ytick’、’grid’、’legend’等。其后可以跟上一系列的关键字参数。一个简单的办法是将这些选项写成一个字典：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">font_options = &#123;<span class="hljs-string">'family'</span> : <span class="hljs-string">'monospace'</span>,</span><br><span class="line">                <span class="hljs-string">'weight'</span> : <span class="hljs-string">'bold'</span>,</span><br><span class="line">                <span class="hljs-string">'size'</span>   : <span class="hljs-string">'small'</span>&#125;</span><br><span class="line">plt.rc(<span class="hljs-string">'font'</span>, **font_options)</span><br></pre></td></tr></table></figure><p>要了解全部的自定义选项，请查阅matplotlib的配置文件matplotlibrc（位于matplotlib/mpl-data目录中）。如果对该文件进行了自定义，并将其放在你自己的.matplotlibrc目录中，则每次使用matplotlib时就会加载该文件。</p><p>下一节，我们会看到，seaborn包有若干内置的绘图主题或类型，它们使用了matplotlib的内部配置。</p><h1 id="9-2-使用pandas和seaborn绘图"><a href="#9-2-使用pandas和seaborn绘图" class="headerlink" title="9.2 使用pandas和seaborn绘图"></a>9.2 使用pandas和seaborn绘图</h1><p>matplotlib实际上是一种比较低级的工具。要绘制一张图表，你组装一些基本组件就行：数据展示（即图表类型：线型图、柱状图、盒形图、散布图、等值线图等）、图例、标题、刻度标签以及其他注解型信息。</p><p>在pandas中，我们有多列数据，还有行和列标签。pandas自身就有内置的方法，用于简化从DataFrame和Series绘制图形。另一个库seaborn（<a href="https://seaborn.pydata.org/），由Michael" target="_blank" rel="noopener">https://seaborn.pydata.org/），由Michael</a> Waskom创建的静态图形库。Seaborn简化了许多常见可视类型的创建。</p><blockquote><p>提示：引入seaborn会修改matplotlib默认的颜色方案和绘图类型，以提高可读性和美观度。即使你不使用seaborn API，你可能也会引入seaborn，作为提高美观度和绘制常见matplotlib图形的简化方法。</p></blockquote><h2 id="线型图"><a href="#线型图" class="headerlink" title="线型图"></a>线型图</h2><p>Series和DataFrame都有一个用于生成各类图表的plot方法。默认情况下，它们所生成的是线型图（如图9-13所示）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">60</span>]: s = pd.Series(np.random.randn(<span class="hljs-number">10</span>).cumsum(), index=np.arange(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">61</span>]: s.plot()</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-f28e5ab2ac94c7a2.webp" alt="img"></p><p>图9-13 简单的Series图表示例</p><p>该Series对象的索引会被传给matplotlib，并用以绘制X轴。可以通过use_index=False禁用该功能。X轴的刻度和界限可以通过xticks和xlim选项进行调节，Y轴就用yticks和ylim。plot参数的完整列表请参见表9-3。我只会讲解其中几个，剩下的就留给读者自己去研究了。</p><p><img src="/images/blog/7178691-6d9fbf863c09370a.webp" alt="img"></p><p><img src="/images/blog/7178691-44e50562aeb5eb49.webp" alt="img"></p><p>表9-3 Series.plot方法的参数</p><p>pandas的大部分绘图方法都有一个可选的ax参数，它可以是一个matplotlib的subplot对象。这使你能够在网格布局中更为灵活地处理subplot的位置。</p><p>DataFrame的plot方法会在一个subplot中为各列绘制一条线，并自动创建图例（如图9-14所示）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">62</span>]: df = pd.DataFrame(np.random.randn(<span class="hljs-number">10</span>, <span class="hljs-number">4</span>).cumsum(<span class="hljs-number">0</span>),</span><br><span class="line">   ....:                   columns=[<span class="hljs-string">'A'</span>, <span class="hljs-string">'B'</span>, <span class="hljs-string">'C'</span>, <span class="hljs-string">'D'</span>],</span><br><span class="line">   ....:                   index=np.arange(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">63</span>]: df.plot()</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-a1234d5e5ee41a40.webp" alt="img"></p><p>图9-14 简单的DataFrame绘图</p><p>plot属性包含一批不同绘图类型的方法。例如，df.plot()等价于df.plot.line()。后面会学习这些方法。</p><blockquote><p>笔记：plot的其他关键字参数会被传给相应的matplotlib绘图函数，所以要更深入地自定义图表，就必须学习更多有关matplotlib API的知识。</p></blockquote><p>DataFrame还有一些用于对列进行灵活处理的选项，例如，是要将所有列都绘制到一个subplot中还是创建各自的subplot。详细信息请参见表9-4。</p><p><img src="/images/blog/7178691-96651ecaa90f1c68.webp" alt="img"></p><p>表9-4 专用于DataFrame的plot参数</p><blockquote><p>注意： 有关时间序列的绘图，请见第11章。</p></blockquote><h2 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h2><p>plot.bar()和plot.barh()分别绘制水平和垂直的柱状图。这时，Series和DataFrame的索引将会被用作X（bar）或Y（barh）刻度（如图9-15所示）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">64</span>]: fig, axes = plt.subplots(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">65</span>]: data = pd.Series(np.random.rand(<span class="hljs-number">16</span>), index=list(<span class="hljs-string">'abcdefghijklmnop'</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">66</span>]: data.plot.bar(ax=axes[<span class="hljs-number">0</span>], color=<span class="hljs-string">'k'</span>, alpha=<span class="hljs-number">0.7</span>)</span><br><span class="line">Out[<span class="hljs-number">66</span>]: &lt;matplotlib.axes._subplots.AxesSubplot at <span class="hljs-number">0x7fb62493d470</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">67</span>]: data.plot.barh(ax=axes[<span class="hljs-number">1</span>], color=<span class="hljs-string">'k'</span>, alpha=<span class="hljs-number">0.7</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-cd54c7ccfa3f0687.webp" alt="img"></p><p>图9-15 水平和垂直的柱状图</p><p>color=’k’和alpha=0.7设定了图形的颜色为黑色，并使用部分的填充透明度。对于DataFrame，柱状图会将每一行的值分为一组，并排显示，如图9-16所示：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">69</span>]: df = pd.DataFrame(np.random.rand(<span class="hljs-number">6</span>, <span class="hljs-number">4</span>),</span><br><span class="line">   ....:                   index=[<span class="hljs-string">'one'</span>, <span class="hljs-string">'two'</span>, <span class="hljs-string">'three'</span>, <span class="hljs-string">'four'</span>, <span class="hljs-string">'five'</span>, <span class="hljs-string">'six'</span>],</span><br><span class="line">   ....:                   columns=pd.Index([<span class="hljs-string">'A'</span>, <span class="hljs-string">'B'</span>, <span class="hljs-string">'C'</span>, <span class="hljs-string">'D'</span>], name=<span class="hljs-string">'Genus'</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">70</span>]: df</span><br><span class="line">Out[<span class="hljs-number">70</span>]: </span><br><span class="line">Genus         A         B         C         D</span><br><span class="line">one    <span class="hljs-number">0.370670</span>  <span class="hljs-number">0.602792</span>  <span class="hljs-number">0.229159</span>  <span class="hljs-number">0.486744</span></span><br><span class="line">two    <span class="hljs-number">0.420082</span>  <span class="hljs-number">0.571653</span>  <span class="hljs-number">0.049024</span>  <span class="hljs-number">0.880592</span></span><br><span class="line">three  <span class="hljs-number">0.814568</span>  <span class="hljs-number">0.277160</span>  <span class="hljs-number">0.880316</span>  <span class="hljs-number">0.431326</span></span><br><span class="line">four   <span class="hljs-number">0.374020</span>  <span class="hljs-number">0.899420</span>  <span class="hljs-number">0.460304</span>  <span class="hljs-number">0.100843</span></span><br><span class="line">five   <span class="hljs-number">0.433270</span>  <span class="hljs-number">0.125107</span>  <span class="hljs-number">0.494675</span>  <span class="hljs-number">0.961825</span></span><br><span class="line">six    <span class="hljs-number">0.601648</span>  <span class="hljs-number">0.478576</span>  <span class="hljs-number">0.205690</span>  <span class="hljs-number">0.560547</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">71</span>]: df.plot.bar()</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-bfc141acb37d99b5.webp" alt="img"></p><p>图9-16 DataFrame的柱状图</p><p>注意，DataFrame各列的名称”Genus”被用作了图例的标题。</p><p>设置stacked=True即可为DataFrame生成堆积柱状图，这样每行的值就会被堆积在一起（如图9-17所示）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">73</span>]: df.plot.barh(stacked=<span class="hljs-literal">True</span>, alpha=<span class="hljs-number">0.5</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-c19e4246eb897978.webp" alt="img"></p><p>图9-17 DataFrame的堆积柱状图</p><blockquote><p>笔记：柱状图有一个非常不错的用法：利用value_counts图形化显示Series中各值的出现频率，比如s.value_counts().plot.bar()。</p></blockquote><p>再以本书前面用过的那个有关小费的数据集为例，假设我们想要做一张堆积柱状图以展示每天各种聚会规模的数据点的百分比。我用read_csv将数据加载进来，然后根据日期和聚会规模创建一张交叉表：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">75</span>]: tips = pd.read_csv(<span class="hljs-string">'examples/tips.csv'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">76</span>]: party_counts = pd.crosstab(tips[<span class="hljs-string">'day'</span>], tips[<span class="hljs-string">'size'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">77</span>]: party_counts</span><br><span class="line">Out[<span class="hljs-number">77</span>]: </span><br><span class="line">size  <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span></span><br><span class="line">day                      </span><br><span class="line">Fri   <span class="hljs-number">1</span>  <span class="hljs-number">16</span>   <span class="hljs-number">1</span>   <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span></span><br><span class="line">Sat   <span class="hljs-number">2</span>  <span class="hljs-number">53</span>  <span class="hljs-number">18</span>  <span class="hljs-number">13</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span></span><br><span class="line">Sun   <span class="hljs-number">0</span>  <span class="hljs-number">39</span>  <span class="hljs-number">15</span>  <span class="hljs-number">18</span>  <span class="hljs-number">3</span>  <span class="hljs-number">1</span></span><br><span class="line">Thur  <span class="hljs-number">1</span>  <span class="hljs-number">48</span>   <span class="hljs-number">4</span>   <span class="hljs-number">5</span>  <span class="hljs-number">1</span>  <span class="hljs-number">3</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Not many 1- and 6-person parties</span></span><br><span class="line">In [<span class="hljs-number">78</span>]: party_counts = party_counts.loc[:, <span class="hljs-number">2</span>:<span class="hljs-number">5</span>]</span><br></pre></td></tr></table></figure><p>然后进行规格化，使得各行的和为1，并生成图表（如图9-18所示）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># Normalize to sum to 1</span></span><br><span class="line">In [<span class="hljs-number">79</span>]: party_pcts = party_counts.div(party_counts.sum(<span class="hljs-number">1</span>), axis=<span class="hljs-number">0</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">80</span>]: party_pcts</span><br><span class="line">Out[<span class="hljs-number">80</span>]: </span><br><span class="line">size         <span class="hljs-number">2</span>         <span class="hljs-number">3</span>         <span class="hljs-number">4</span>         <span class="hljs-number">5</span></span><br><span class="line">day                                         </span><br><span class="line">Fri   <span class="hljs-number">0.888889</span>  <span class="hljs-number">0.055556</span>  <span class="hljs-number">0.055556</span>  <span class="hljs-number">0.000000</span></span><br><span class="line">Sat   <span class="hljs-number">0.623529</span>  <span class="hljs-number">0.211765</span>  <span class="hljs-number">0.152941</span>  <span class="hljs-number">0.011765</span></span><br><span class="line">Sun   <span class="hljs-number">0.520000</span>  <span class="hljs-number">0.200000</span>  <span class="hljs-number">0.240000</span>  <span class="hljs-number">0.040000</span></span><br><span class="line">Thur  <span class="hljs-number">0.827586</span>  <span class="hljs-number">0.068966</span>  <span class="hljs-number">0.086207</span>  <span class="hljs-number">0.017241</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">81</span>]: party_pcts.plot.bar()</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-2918f67936823834.webp" alt="img"></p><p>图9-18 每天各种聚会规模的比例</p><p>于是，通过该数据集就可以看出，聚会规模在周末会变大。</p><p>对于在绘制一个图形之前，需要进行合计的数据，使用seaborn可以减少工作量。用seaborn来看每天的小费比例（图9-19是结果）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">83</span>]: <span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">84</span>]: tips[<span class="hljs-string">'tip_pct'</span>] = tips[<span class="hljs-string">'tip'</span>] / (tips[<span class="hljs-string">'total_bill'</span>] - tips[<span class="hljs-string">'tip'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">85</span>]: tips.head()</span><br><span class="line">Out[<span class="hljs-number">85</span>]: </span><br><span class="line">   total_bill   tip smoker  day    time  size   tip_pct</span><br><span class="line"><span class="hljs-number">0</span>       <span class="hljs-number">16.99</span>  <span class="hljs-number">1.01</span>     No  Sun  Dinner     <span class="hljs-number">2</span>  <span class="hljs-number">0.063204</span></span><br><span class="line"><span class="hljs-number">1</span>       <span class="hljs-number">10.34</span>  <span class="hljs-number">1.66</span>     No  Sun  Dinner     <span class="hljs-number">3</span>  <span class="hljs-number">0.191244</span></span><br><span class="line"><span class="hljs-number">2</span>       <span class="hljs-number">21.01</span>  <span class="hljs-number">3.50</span>     No  Sun  Dinner     <span class="hljs-number">3</span>  <span class="hljs-number">0.199886</span></span><br><span class="line"><span class="hljs-number">3</span>       <span class="hljs-number">23.68</span>  <span class="hljs-number">3.31</span>     No  Sun  Dinner     <span class="hljs-number">2</span>  <span class="hljs-number">0.162494</span></span><br><span class="line"><span class="hljs-number">4</span>       <span class="hljs-number">24.59</span>  <span class="hljs-number">3.61</span>     No  Sun  Dinner     <span class="hljs-number">4</span>  <span class="hljs-number">0.172069</span></span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">86</span>]: sns.barplot(x=<span class="hljs-string">'tip_pct'</span>, y=<span class="hljs-string">'day'</span>, data=tips, orient=<span class="hljs-string">'h'</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-c33e8b3add99904b.webp" alt="img"></p><p>图9-19 小费的每日比例，带有误差条</p><p>seaborn的绘制函数使用data参数，它可能是pandas的DataFrame。其它的参数是关于列的名字。因为一天的每个值有多次观察，柱状图的值是tip_pct的平均值。绘制在柱状图上的黑线代表95%置信区间（可以通过可选参数配置）。</p><p>seaborn.barplot有颜色选项，使我们能够通过一个额外的值设置（见图9-20）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">88</span>]: sns.barplot(x=<span class="hljs-string">'tip_pct'</span>, y=<span class="hljs-string">'day'</span>, hue=<span class="hljs-string">'time'</span>, data=tips, orient=<span class="hljs-string">'h'</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-06abe2f070222115.webp" alt="img"></p><p>图9-20 根据天和时间的小费比例</p><p>注意，seaborn已经自动修改了图形的美观度：默认调色板，图形背景和网格线的颜色。你可以用seaborn.set在不同的图形外观之间切换：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">90</span>]: sns.set(style=<span class="hljs-string">"whitegrid"</span>)</span><br></pre></td></tr></table></figure><h2 id="直方图和密度图"><a href="#直方图和密度图" class="headerlink" title="直方图和密度图"></a>直方图和密度图</h2><p>直方图（histogram）是一种可以对值频率进行离散化显示的柱状图。数据点被拆分到离散的、间隔均匀的面元中，绘制的是各面元中数据点的数量。再以前面那个小费数据为例，通过在Series使用plot.hist方法，我们可以生成一张“小费占消费总额百分比”的直方图（如图9-21所示）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">92</span>]: tips[<span class="hljs-string">'tip_pct'</span>].plot.hist(bins=<span class="hljs-number">50</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-255279376f7649a3.webp" alt="img"></p><p>图9-21 小费百分比的直方图</p><p>与此相关的一种图表类型是密度图，它是通过计算“可能会产生观测数据的连续概率分布的估计”而产生的。一般的过程是将该分布近似为一组核（即诸如正态分布之类的较为简单的分布）。因此，密度图也被称作KDE（Kernel Density Estimate，核密度估计）图。使用plot.kde和标准混合正态分布估计即可生成一张密度图（见图9-22）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">94</span>]: tips[<span class="hljs-string">'tip_pct'</span>].plot.density()</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-ee929d033159516a.webp" alt="img"></p><p>图9-22 小费百分比的密度图</p><p>seaborn的distplot方法绘制直方图和密度图更加简单，还可以同时画出直方图和连续密度估计图。作为例子，考虑一个双峰分布，由两个不同的标准正态分布组成（见图9-23）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">96</span>]: comp1 = np.random.normal(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, size=<span class="hljs-number">200</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">97</span>]: comp2 = np.random.normal(<span class="hljs-number">10</span>, <span class="hljs-number">2</span>, size=<span class="hljs-number">200</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">98</span>]: values = pd.Series(np.concatenate([comp1, comp2]))</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">99</span>]: sns.distplot(values, bins=<span class="hljs-number">100</span>, color=<span class="hljs-string">'k'</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-975f04d750c4efe2.webp" alt="img"></p><p>图9-23 标准混合密度估计的标准直方图</p><h2 id="散布图或点图"><a href="#散布图或点图" class="headerlink" title="散布图或点图"></a>散布图或点图</h2><p>点图或散布图是观察两个一维数据序列之间的关系的有效手段。在下面这个例子中，我加载了来自statsmodels项目的macrodata数据集，选择了几个变量，然后计算对数差：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">100</span>]: macro = pd.read_csv(<span class="hljs-string">'examples/macrodata.csv'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">101</span>]: data = macro[[<span class="hljs-string">'cpi'</span>, <span class="hljs-string">'m1'</span>, <span class="hljs-string">'tbilrate'</span>, <span class="hljs-string">'unemp'</span>]]</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">102</span>]: trans_data = np.log(data).diff().dropna()</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">103</span>]: trans_data[<span class="hljs-number">-5</span>:]</span><br><span class="line">Out[<span class="hljs-number">103</span>]: </span><br><span class="line">          cpi        m1  tbilrate     unemp</span><br><span class="line"><span class="hljs-number">198</span> <span class="hljs-number">-0.007904</span>  <span class="hljs-number">0.045361</span> <span class="hljs-number">-0.396881</span>  <span class="hljs-number">0.105361</span></span><br><span class="line"><span class="hljs-number">199</span> <span class="hljs-number">-0.021979</span>  <span class="hljs-number">0.066753</span> <span class="hljs-number">-2.277267</span>  <span class="hljs-number">0.139762</span></span><br><span class="line"><span class="hljs-number">200</span>  <span class="hljs-number">0.002340</span>  <span class="hljs-number">0.010286</span>  <span class="hljs-number">0.606136</span>  <span class="hljs-number">0.160343</span></span><br><span class="line"><span class="hljs-number">201</span>  <span class="hljs-number">0.008419</span>  <span class="hljs-number">0.037461</span> <span class="hljs-number">-0.200671</span>  <span class="hljs-number">0.127339</span></span><br><span class="line"><span class="hljs-number">202</span>  <span class="hljs-number">0.008894</span>  <span class="hljs-number">0.012202</span> <span class="hljs-number">-0.405465</span>  <span class="hljs-number">0.042560</span></span><br></pre></td></tr></table></figure><p>然后可以使用seaborn的regplot方法，它可以做一个散布图，并加上一条线性回归的线（见图9-24）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">105</span>]: sns.regplot(<span class="hljs-string">'m1'</span>, <span class="hljs-string">'unemp'</span>, data=trans_data)</span><br><span class="line">Out[<span class="hljs-number">105</span>]: &lt;matplotlib.axes._subplots.AxesSubplot at <span class="hljs-number">0x7fb613720be0</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="hljs-number">106</span>]: plt.title(<span class="hljs-string">'Changes in log %s versus log %s'</span> % (<span class="hljs-string">'m1'</span>, <span class="hljs-string">'unemp'</span>))</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-2133d20739478a80.webp" alt="img"></p><p>图9-24 seaborn的回归/散布图</p><p>在探索式数据分析工作中，同时观察一组变量的散布图是很有意义的，这也被称为散布图矩阵（scatter plot matrix）。纯手工创建这样的图表很费工夫，所以seaborn提供了一个便捷的pairplot函数，它支持在对角线上放置每个变量的直方图或密度估计（见图9-25）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">107</span>]: sns.pairplot(trans_data, diag_kind=<span class="hljs-string">'kde'</span>, plot_kws=&#123;<span class="hljs-string">'alpha'</span>: <span class="hljs-number">0.2</span>&#125;)</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-20aa530a44e06f61.webp" alt="img"></p><p>图9-25 statsmodels macro data的散布图矩阵</p><p>你可能注意到了plot_kws参数。它可以让我们传递配置选项到非对角线元素上的图形使用。对于更详细的配置选项，可以查阅seaborn.pairplot文档字符串。</p><h2 id="分面网格（facet-grid）和类型数据"><a href="#分面网格（facet-grid）和类型数据" class="headerlink" title="分面网格（facet grid）和类型数据"></a>分面网格（facet grid）和类型数据</h2><p>要是数据集有额外的分组维度呢？有多个分类变量的数据可视化的一种方法是使用小面网格。seaborn有一个有用的内置函数factorplot，可以简化制作多种分面图（见图9-26）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">108</span>]: sns.factorplot(x=<span class="hljs-string">'day'</span>, y=<span class="hljs-string">'tip_pct'</span>, hue=<span class="hljs-string">'time'</span>, col=<span class="hljs-string">'smoker'</span>,</span><br><span class="line">  .....:                kind=<span class="hljs-string">'bar'</span>, data=tips[tips.tip_pct &lt; <span class="hljs-number">1</span>])</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-737ba19a0cbdd46f.webp" alt="img"></p><p>图9-26 按照天/时间/吸烟者的小费百分比</p><p>除了在分面中用不同的颜色按时间分组，我们还可以通过给每个时间值添加一行来扩展分面网格：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">109</span>]: sns.factorplot(x=<span class="hljs-string">'day'</span>, y=<span class="hljs-string">'tip_pct'</span>, row=<span class="hljs-string">'time'</span>,</span><br><span class="line">   .....:                col=<span class="hljs-string">'smoker'</span>,</span><br><span class="line">   .....:                kind=<span class="hljs-string">'bar'</span>, data=tips[tips.tip_pct &lt; <span class="hljs-number">1</span>])</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-4e52192441c609f7.webp" alt="img"></p><p>图9-27 按天的tip_pct，通过time/smoker分面</p><p>factorplot支持其它的绘图类型，你可能会用到。例如，盒图（它可以显示中位数，四分位数，和异常值）就是一个有用的可视化类型（见图9-28）：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="hljs-number">110</span>]: sns.factorplot(x=<span class="hljs-string">'tip_pct'</span>, y=<span class="hljs-string">'day'</span>, kind=<span class="hljs-string">'box'</span>,</span><br><span class="line">   .....:                data=tips[tips.tip_pct &lt; <span class="hljs-number">0.5</span>])</span><br></pre></td></tr></table></figure><p><img src="/images/blog/7178691-356fb27a7c658920.webp" alt="img"></p><p>图9-28 按天的tip_pct的盒图</p><p>使用更通用的seaborn.FacetGrid类，你可以创建自己的分面网格。请查阅seaborn的文档（<a href="https://seaborn.pydata.org/）。" target="_blank" rel="noopener">https://seaborn.pydata.org/）。</a></p><h1 id="9-3-其它的Python可视化工具"><a href="#9-3-其它的Python可视化工具" class="headerlink" title="9.3 其它的Python可视化工具"></a>9.3 其它的Python可视化工具</h1><p>与其它开源库类似，Python创建图形的方式非常多（根本罗列不完）。自从2010年，许多开发工作都集中在创建交互式图形以便在Web上发布。利用工具如Boken（<a href="https://bokeh.pydata.org/en/latest/）和Plotly（https://github.com/plotly/plotly.py），现在可以创建动态交互图形，用于网页浏览器。" target="_blank" rel="noopener">https://bokeh.pydata.org/en/latest/）和Plotly（https://github.com/plotly/plotly.py），现在可以创建动态交互图形，用于网页浏览器。</a></p><p>对于创建用于打印或网页的静态图形，我建议默认使用matplotlib和附加的库，比如pandas和seaborn。对于其它数据可视化要求，学习其它的可用工具可能是有用的。我鼓励你探索绘图的生态系统，因为它将持续发展。</p><h1 id="9-4-总结"><a href="#9-4-总结" class="headerlink" title="9.4 总结"></a>9.4 总结</h1><p>本章的目的是熟悉一些基本的数据可视化操作，使用pandas，matplotlib，和seaborn。如果视觉显示数据分析的结果对你的工作很重要，我鼓励你寻求更多的资源来了解更高效的数据可视化。这是一个活跃的研究领域，你可以通过在线和纸质的形式学习许多优秀的资源。</p><p>下一章，我们将重点放在pandas的数据聚合和分组操作上。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载自&lt;a href=&quot;https://www.jianshu.com/p/7a0eafdd1340&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;../《利用Python进行数据分析·第2版》第1章%20准备工作&quot;&gt;第1章 准备工作&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第2章%20Python语法基础，IPython和Jupyter%20Notebooks&quot;&gt;第2章 Python语法基础，IPython和Jupyter Notebooks&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第3章%20Python的数据结构、函数和文件&quot;&gt;第3章 Python的数据结构、函数和文件&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第4章%20NumPy基础：数组和矢量计算&quot;&gt;第4章 NumPy基础：数组和矢量计算&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第5章%20pandas入门&quot;&gt;第5章 pandas入门&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第6章%20数据加载、存储与文件格式&quot;&gt;第6章 数据加载、存储与文件格式&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第7章%20数据清洗和准备&quot;&gt;第7章 数据清洗和准备&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第8章%20数据规整：聚合、合并和重塑&quot;&gt;第8章 数据规整：聚合、合并和重塑&lt;/a&gt;&lt;br&gt;第9章 绘图和可视化&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第10章%20数据聚合与分组运算&quot;&gt;第10章 数据聚合与分组运算&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第11章%20时间序列&quot;&gt;第11章 时间序列&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第12章%20pandas高级应用&quot;&gt;第12章 pandas高级应用&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第13章%20Python建模库介绍&quot;&gt;第13章 Python建模库介绍&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》第14章%20数据分析案例&quot;&gt;第14章 数据分析案例&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》附录A%20NumPy高级应用&quot;&gt;附录A NumPy高级应用&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;../《利用Python进行数据分析·第2版》附录B%20更多关于IPython的内容（完）&quot;&gt;附录B 更多关于IPython的内容（完）&lt;/a&gt;      &lt;/p&gt;
    
    </summary>
    
    
      <category term="数据分析" scheme="https://glanhoo.coding.me/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="https://glanhoo.coding.me/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="pandas" scheme="https://glanhoo.coding.me/tags/pandas/"/>
    
      <category term="python" scheme="https://glanhoo.coding.me/tags/python/"/>
    
  </entry>
  
</feed>
