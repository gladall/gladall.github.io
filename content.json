{"pages":[{"title":"about","text":"联系方式 手机:15521314367 Email:gladall@126.com 技能 熟练使用django flask 框架 掌握Flask生态定制Web业务: Flask-migrate,click,Flask-SQLAlchemy, Flask-Login, Flask-Redis, Flask-Session, Flask-Session, Flask-Session, Flask-RESTful, Flask-Mail 熟练使用Django 模板, Jinja, Mako渲染模板 mysql,mongodb,redis 熟悉 git 使用 html/css3/ES6,ES7 jQuery,bootstrap 熟练使用webpack构建前端项目 vue/vuex/axios/vue-router PC端 UI:elemnt-UI,AntDesgin,iView 移动端 UI: vant,cube UI 使用Easymock,json-server,faker伪造前后端数据 熟悉 WebSocket 使用pre-commit搭配autoPEP8在git提交前自动格式化。 熟练掌握 Requests, BeautifulSoup, Xpath, Selector 熟悉使用scrapy 框架爬去网站信息 熟悉linux基本命令 了解docker环境搭建高可用集群 python虚拟环境工具使用 virtualenv,virtualenvwrapper 掌握 WSGI服务器:gunicorn uWSGI 分发请求 掌握 supervisor 对项目进行托管 熟悉常用算法如冒泡，快排，堆排等 设计模式 了解JWT OAuth与Django REST Framework搭配实现单点登录 了解RPC 工作经历2015/10 ~ 2017/12 沈阳智趣办公信息技术有限公司 负责内部局域网络维护； 处理网络及计算机故障； 进行办公设备的日常维护及管理； 负责病毒的查杀，维护网络系统安全； 2017/12 ~ 2019/01 沈阳优泉健康科技有限公司 负责公司产品服务器端开发工作； 在上级的领导和监督下定期完成量化的工作要求，并能独立处理和解决所负责的任务； 进行程序单元、功能的测试，查出软件存在的缺陷并保证其质量； 进行编制项目文档和质量记录的工作； 维护软件使之保持可用性和稳定性； 项目经验项目名称: CRM项目描述: Django 开发的企业资源管理系统;包含人事管理、财务管理、CRM、进销存管理、物流管理、服务站点管理、 供应商管理等功能; 负责业务: 用户登录、注册功能、图片验证码、用户输入校验功能; 实现基于角色的权限控制系统为不同用户展示不同的功能页面。 客户跟进记录管理 实现公, 私客户管理 进销存管理 数据库信息的关键字查询, 组合筛选以及导出 excel; 通过封装Quick组件对项目重构。 项目名称: Infinity项目描述: 基于 python 的 django-rest-framework 框架和前端框架vue.js 实现前后端分离的在线平台，实现在线播放以及购商品等功能，并实现了对商品价格策略的管理和定义。以及对“商品”的详细信息进行分类实现商品分级，并实现息推送以及支付宝在线支付。 负责业务: 集成polyv托管加密视频 为认证系统提供反爬虫图片验证码 集成微信服务号推送平台消息 实现购物车业务, 基于Redis, 缓存用户购物车数据, 处理订单 实现结算订单的相关业务,计算优惠券相关逻辑 调用支付宝接口实现支付订单相关业务 项目: Flask自我评价Whatever you do, do it a hundred percent. When you work, work. When you laugh,laugh. when you eat, eat. like it is your last meal.","link":"/about/index.html"}],"posts":[{"title":"hexo博客icarus主题的修改","text":"hexo博客icarus主题修改配置文件的修改 博客配置文件，也就是hexo博客根目录下的 _config.yml icarus主题的配置文件themes/icarus/_config.yml 博客配置文件12345678910111213141516171819202122232425262728293031323334353637# 浏览器上标签显示名字title: Lanhoo's blog# 语言language: zh-CN# 若想在gitee或coding直接用三级域名来作博客的地址，要建立跟用户名同名的项目，并把它设置成pagesurl: https://gitee.com/gladall/gladallroot: /# 部署多个不同的gitdeploy: - type: git repo: https://gitee.com/gladall/gladall.git branch: master - type: git repo: https://git.dev.tencent.com/glanhoo/glanhoo.git branch: mastermarked: gfm: true pedantic: false sanitize: false smartypants: true autolink: true smartLists: true # 表格空行多的问题bug处理 breaks: false # 添加rss# Extensionsplugins: hexo-generator-feed#Feed Atom feed: type: atom path: atom.xml limit: 20 icarus/_config.yml文件的修改1234567891011121314151617181920212223242526272829# 网站的图标，只能用ico后缀的文件favicon: /images/grid32.ico# 给导航起中文名，并把不用的链接给注释掉navbar: # Navigation bar menu links menu: 主页: / 归档: /archives 分类: /categories 标签: /tags 关于: /about # Navigation bar links to be shown on the right # links: # My GitHub: # icon: fab fa-github # url: 'https://github.com/lanhoo' article: # Code highlight theme # https://github.com/highlightjs/highlight.js/tree/master/src/styles highlight: atom-one-dark # Whether to show article thumbnail images # 不显示缩略图 thumbnail: false # Whether to show estimate article reading time readtime: true # 文章自动开启目录toc: true 样式的修改自定义样式 在themes/icarus/source/css下新建了CSS文件 新建user2.css文件 该样式主要是使markdonw的表格更加美观，还有设置文章目录最大的长度。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758.table-area &gt; table, table.dataframe { width: 100%; /*表格宽度*/ max-width: 65em; /*表格最大宽度，避免表格过宽*/ border: 1px solid #dedede; /*表格外边框设置*/ margin: 15px auto; /*外边距*/ border-collapse: collapse; /*使用单一线条的边框*/ empty-cells: show; /*单元格无内容依旧绘制边框*/ border-radius: 4px;}.table-area &gt; table th,.table-area &gt; table td { height: 30px; /*统一每一行的默认高度*/ border: 1px solid #dedede; /*内部边框样式*/ padding: 0 10px; /*内边距*/}table.dataframe th, table.dataframe td { height: 30px; /*统一每一行的默认高度*/ border: 1px solid #dedede; /*内部边框样式*/ padding: 0 10px; /*内边距*/}.table-area &gt; table th, table.dataframe th { font-weight: bold; /*加粗*/ /*text-align: center !important; /*内容居中，加上 !important 避免被 Markdown 样式覆盖*/ background: rgba(158,188,226,0.2); /*背景色*/}.table-area &gt; table th, table.dataframe th { white-space: nowrap; /*表头内容强制在一行显示*/}.table-area &gt; table td:nth-child(1), table.dataframe td:nth-child(1) { /*首列不换行*/ white-space: nowrap;}.table-area &gt; table tbody tr:nth-child(2n) , table.dataframe tbody tr:nth-child(2n){ /*隔行变色*/ background: rgba(102, 128, 153, 0.05);}.table-area &gt; table tr:hover , table.dataframe tr:hover{ background: #efefef;}table.dataframe thead th { text-align: left;}.table-area { overflow: auto;}#toc{ max-height: 400px; overflow: auto;}#toc .menu{ font-size: 13px;} 修改style.styl文件12345678910111213141516/* --------------------------------- * 突出标题 是文章栏下的 * --------------------------------- */h1.title border-left: #0085e2a1 6px solid margin-left: -1.5rem padding-left: 1rem/* --------------------------------- * 关于我的大小 * --------------------------------- */.button.is-rounded margin-left: 3em margin-right: 3em 使自定义的样式文件生效 修改head.ejs 文件位置themes/icars/layout/common/head.ejs 12&lt;!-- 添加如下代码，使页面自动关联自定义样式 --&gt;&lt;link rel=\"stylesheet\" href=\"&lt;%- config.root %&gt;css/user2.css\" media=\"screen\" type=\"text/css\"&gt; themes/icarus/layout/common/scripts.ejs文件的修改 12345&lt;script&gt;// 给指定的表格添加样式，使表格更美观$(\".content &gt; table\").wrap(\"&lt;div class='table-area'&gt;&lt;/div&gt;\");$(\"table.dataframe\").wrap(\"&lt;div class='table-area'&gt;&lt;/div&gt;\");&lt;/script&gt; 使阅读文章时是两栏，而主页是三栏 修改themes/icarus/layout/layout.ejs文件， 1234567891011&lt;% function col(){ if(!is_post()){ return main_column_class(); } else{ return 'is-6-tablet is-6-desktop is-9-widescreen'; } } %&gt;&lt;!-- 将main_column_class() 改为 col() --&gt;&lt;div class=\"column &lt;%= col() %&gt; has-order-2 column-main\"&gt;&lt;%- body %&gt;&lt;/div&gt; 修改themes/icarus/layout/common/widget.ejs文件 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172&lt;% if (get_widgets(position).length &amp;&amp; !is_post()) { %&gt; &lt;!-- 修改 --&gt; &lt;% function side_column_class() { switch (column_count()) { case 2: return 'is-4-tablet is-4-desktop is-4-widescreen'; case 3: return 'is-4-tablet is-4-desktop is-3-widescreen'; } return ''; } %&gt; &lt;% function visibility_class() { if (column_count() === 3 &amp;&amp; position === 'right') { return 'is-hidden-touch is-hidden-desktop-only'; } return ''; } %&gt; &lt;% function order_class() { return position === 'left' ? 'has-order-1' : 'has-order-3'; } %&gt; &lt;% function sticky_class(position) { return get_config('sidebar.' + position + '.sticky', false) ? 'is-sticky' : ''; } %&gt; &lt;div class=\"column &lt;%= side_column_class() %&gt; &lt;%= visibility_class() %&gt; &lt;%= order_class() %&gt; column-&lt;%= position %&gt; &lt;%= sticky_class(position) %&gt;\"&gt; &lt;% get_widgets(position).forEach(widget =&gt; {%&gt; &lt;%- partial('widget/' + widget.type, { widget, post: page }) %&gt; &lt;% }) %&gt; &lt;% if (position === 'left') { %&gt; &lt;div class=\"column-right-shadow is-hidden-widescreen &lt;%= sticky_class('right') %&gt;\"&gt; &lt;% get_widgets('right').forEach(widget =&gt; {%&gt; &lt;%- partial('widget/' + widget.type, { widget, post: page }) %&gt; &lt;% }) %&gt; &lt;/div&gt; &lt;% } %&gt; &lt;/div&gt; &lt;% } %&gt; &lt;!-- 粘贴的部分 --&gt; &lt;% if (position === 'right' &amp;&amp; is_post()) { %&gt; &lt;!-- 修改，可选保留的栏 --&gt; &lt;% function side_column_class() { switch (column_count()) { case 2: return 'is-4-tablet is-4-desktop is-4-widescreen'; case 3: return 'is-4-tablet is-4-desktop is-3-widescreen'; } return ''; } %&gt; &lt;% function visibility_class() { if (column_count() === 3 &amp;&amp; position === 'right') { return 'is-hidden-touch is-hidden-desktop-only'; } return ''; } %&gt; &lt;% function order_class() { return position === 'right' ? 'has-order-3' : 'has-order-1'; &lt;!-- 修改 --&gt; } %&gt; &lt;% function sticky_class(position) { return get_config('sidebar.' + position + '.sticky', false) ? 'is-sticky' : ''; } %&gt; &lt;div class=\"column &lt;%= side_column_class() %&gt; &lt;%= visibility_class() %&gt; &lt;%= order_class() %&gt; column-&lt;%= position %&gt; &lt;%= sticky_class(position) %&gt;\"&gt; &lt;% get_widgets(position).forEach(widget =&gt; {%&gt; &lt;%- partial('widget/' + widget.type, { widget, post: page }) %&gt; &lt;% }) %&gt; &lt;% if (position === 'left') { %&gt; &lt;div class=\"column-right-shadow is-hidden-widescreen &lt;%= sticky_class('right') %&gt;\"&gt; &lt;% get_widgets('right').forEach(widget =&gt; {%&gt; &lt;%- partial('widget/' + widget.type, { widget, post: page }) %&gt; &lt;% }) %&gt; &lt;/div&gt; &lt;% } %&gt; &lt;/div&gt; &lt;% } %&gt; 其他修改 点击更多时不要跳转到自己定义的锚点处 themes/icarus/layout/share/sharejs.ejs修改，分享图标的禁用 123&lt;div class=\"social-share\" data-disabled=\"diandian, linkedin, douban\"&gt;&lt;/div&gt;&lt;%- _css(cdn('social-share.js', '1.0.16', 'dist/css/share.min.css')) %&gt;&lt;%- _js(cdn('social-share.js', '1.0.16', 'dist/js/social-share.min.js')) %&gt;","link":"/2019/08/04/hexo%E5%8D%9A%E5%AE%A2icarus%E4%B8%BB%E9%A2%98%E7%9A%84%E4%BF%AE%E6%94%B9/"},{"title":"manjaro系统必备软件","text":"一开始使用的是ubuntu 系列的系统，但总有些软件安装好麻烦，即使安装好了，总会字体、介面、图标等等问题。后来经一朋友的帮助下，安装成功了arch ,软件库非常丰富，当组件、软件、系统方面有更新会提示升级，非常便捷友好。后来安装QGIS后，检测不到python，使用不了；同时由于我是多系统，一不小心把GRUB搞坏了，每次都要进入arch系统都要敲命令改参数。 我不得不考虑更换系统了，那哥们是一条一条命令把arch装好的，对我来说难度有点大。后来了解到arch系列下的manjaro，它不仅美化了介面，也集成了arch的软件管理系统。尝试了下，能够成功使用QGIS,安装系统也像之前安装ubuntu一样便捷。 下面就罗列一些安装必备软件。 fusuma 当在win系统或mac上使用三指或四指使用触摸板时，非常方便快捷，而在linux上实现三指或四指功能就不得不提这个fusuma。 github地址 开始尝试输入sudo pacman -S fusuma， 没有 在软件管理器里有，点击安装 修改配置文件.config/fusuma/config.yml，我的配置如下： 1234567891011121314151617181920212223242526272829303132swipe: 3: left: shortcut: 'xdotool key alt+Left' right: shortcut: 'xdotool key alt+Right' up: shortcut: 'xdotool key super+d' # 显示桌面 down: shortcut: 'xdotool key ctrl+F9' # 选择当前桌面的程序 4: left: command: 'xdotool key ctrl+F1' # 切换左边的桌面 right: command: 'xdotool key ctrl+F2' # 切换右边的桌面 up: command: 'xdotool key ctrl+F8' # 选择桌面 down: command: 'xdotool key ctrl+F10' # 选择全部桌面的程序pinch: in: shortcut: 'ctrl+shift+plus' out: shortcut: 'ctrl+minus'threshold: swipe: 0.5 pinch: 0.2interval: swipe: 0.2 pinch: 0.2 设置开机自动启动 编写脚本文件fusuma.sh： 12#!/bin/bashfusuma &amp; 在开机和关机设置中的自动启动添加这个脚本文件，重启就可以了。 当出现这样的错误时： 12[lanhoo@lanhoo-pc sh_files]$ fusumaE, [2019-10-28T15:46:38.774809 #1647] ERROR -- : Touchpad is not found 要给input group 加上当前的用户 1sudo gpasswd -a $USER input 123[lanhoo@lanhoo-pc sh_files]$ sudo gpasswd -a $USER input[sudo] lanhoo 的密码：正在将用户“lanhoo”加入到“input”组中 GoldenDict 词典必备，下了两个词典，一个带有发音的，另一个多了2w个词 若发音不行，要设置一下：cvlc --play-and-exit -Vdummy 选中单词翻译的快捷键：ctrl + c + c zeal 文档管理查看工具，程序员必备，在mac上有dash，而在win和linux上可以使用zeal 设定显示快捷键 Visual Studio Code关联zeal 的插件安装，快捷键使用ctrl + h 一些docset的feed:https://github.com/quericy/Zeal-docset-CN flameshot 截图工具 设定快捷键 typora markdown编辑器","link":"/2019/10/02/manjaro%E7%B3%BB%E7%BB%9F%E5%BF%85%E5%A4%87%E8%BD%AF%E4%BB%B6/"},{"title":"mysql与pandas对照学习(0)","text":"缘由学习mysql时，发现了一个非常不错的网站：https://sqlzoo.net/wiki/SQL_Tutorial/zh 学习数据分析时，有个英文的网站，是比较pandas跟sql语句的不同写法：https://pandas.pydata.org/pandas-docs/stable/getting_started/comparison/comparison_with_sql.html 后来偶然发现有个国外网站介绍jupyter+sql结合的模块：https://www.datacamp.com/community/tutorials/sql-interface-within-jupyterlab 最后我就想到了在jupyter-notebook里记录学习sqlzoo的习题，用mysql和python的pandas模块两种方法来完成。 前期准备工作 首先得有mysql、jupyter 的环境，安装略过。 安装以下模块： ipython-sql: pip install ipython-sql SQLAlchemy: pip install sqlalchemy 导入sqlzoo里所用的数据集： 稍微会点爬虫的应该可以爬下来，我在这里提供下载地址方便大家： 下载地址：dbs.zip 在下载文件所在的文件夹里输入下面的命令还原数据库：mysql -u root -p &lt; dbs.sql","link":"/2019/09/20/mysql%E4%B8%8Epandas%E5%AF%B9%E7%85%A7%E5%AD%A6%E4%B9%A0-0/"},{"title":"mysql与pandas对照学习(1)","text":"sqlzoo:SELECT basics/zhSELECT_basics/zh 這個教程介紹SQL語言。我們會使用SELECT語句。我們會使用WORLD表格 name continent area population gdp Afghanistan Asia 652230 25500100 20343000000 Albania Europe 28748 2831741 12960000000 Algeria Africa 2381741 37100000 188681000000 Andorra Europe 468 78115 3712000000 Angola Africa 1246700 20609294 100990000000 …. name:國家名稱 continent:洲份 area:面積 population:人口 gdp:國內生產總值 In12%load_ext sql%sql mysql+pymysql://root:lanhoo@localhost/dbs Out&apos;Connected: root@dbs&apos;In123456import pandas as pdimport sqlalchemyengine = sqlalchemy.create_engine(\"mysql+pymysql://root:lanhoo@localhost/dbs\")world = pd.read_sql_table(\"world\", engine)%sql desc world; Out * mysql+pymysql://root:***@localhost/dbs 8 rows affected. Field Type Null Key Default Extra name varchar(255) YES None continent varchar(255) YES None area int(255) YES None population int(255) YES None gdp bigint(255) YES None capital varchar(255) YES None tld varchar(255) YES None flag varchar(255) YES None In1world.info() &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; RangeIndex: 195 entries, 0 to 194 Data columns (total 8 columns): name 195 non-null object continent 195 non-null object area 195 non-null int64 population 195 non-null int64 gdp 189 non-null float64 capital 194 non-null object tld 195 non-null object flag 195 non-null object dtypes: float64(1), int64(2), object(5) memory usage: 12.3+ KB1.德國 Germany 的人口這個例子顯示’France法國’的人口。字串應該在’單引號’中。 修改此例子,以顯示德國 Germany 的人口。 mysqlIn1%sql SELECT population FROM world WHERE name = 'Germany'; * mysql+pymysql://root:***@localhost/dbs 1 rows affected. population 80716000 pandasIn1world[world.name == \"Germany\"].population Out63 80716000 Name: population, dtype: int642.查詢面積為 5,000,000 以上平方公里的國家,對每個國家顯示她的名字和人均國內生產總值查詢顯示面積為 5,000,000 以上平方公里的國家,該國家的人口密度(population/area)。人口密度並不是 WORLD 表格中的欄,但我們可用公式(population/area)計算出來。 修改此例子,查詢面積為 5,000,000 以上平方公里的國家,對每個國家顯示她的名字和人均國內生產總值(gdp/population)。 mysqlIn1%sql SELECT name, gdp/population FROM world WHERE area &gt; 5000000; * mysql+pymysql://root:***@localhost/dbs 6 rows affected. name gdp/population Australia 66442.3775 Brazil 11115.2648 Canada 44739.2259 China 6121.7106 Russia 13902.8219 United States 51032.2945 pandasIn:方法一12# 这只求出人均生产总值world[world.area &gt; 5000000].apply(lambda x:x[\"gdp\"]/x[\"population\"], axis=1) Out8 66442.377524 23 11115.264751 30 44739.225919 35 6121.710599 140 13902.821918 185 51032.294546 dtype: float64In12# 这虽然得出结果，但没有分成两列，对后续操作不太好world[world.area &gt; 5000000].apply(lambda x:(x[\"name\"], x[\"gdp\"]/x[\"population\"]), axis=1) Out8 (Australia, 66442.37752436771) 23 (Brazil, 11115.264751422626) 30 (Canada, 44739.225919372744) 35 (China, 6121.710598592323) 140 (Russia, 13902.82191780822) 185 (United States, 51032.29454636844) dtype: objectIn:方法二12df = world[world.area &gt; 5000000] pd.DataFrame({\"name\": df.name, \"gdp/pop\": df.gdp/df.population}) Out name gdp/pop 8 Australia 66442.377524 23 Brazil 11115.264751 30 Canada 44739.225919 35 China 6121.710599 140 Russia 13902.821918 185 United States 51032.294546 3.顯示“Ireland 愛爾蘭”,“Iceland 冰島”,“Denmark 丹麥”的國家名稱和人口。檢查列表:單詞“IN”可以讓我們檢查一個項目是否在列表中。 此示例顯示了“Luxembourg 盧森堡”,“Mauritius 毛里求斯”和“Samoa 薩摩亞”的國家名稱和人口。 顯示“Ireland 愛爾蘭”,“Iceland 冰島”,“Denmark 丹麥”的國家名稱和人口。 mysqlIn1%sql SELECT name, population FROM world WHERE name IN ('Ireland', 'Iceland', 'Denmark'); * mysql+pymysql://root:***@localhost/dbs 3 rows affected.Out name population Denmark 5634437 Iceland 326340 Ireland 4593100 pandasIn1world[world.name.isin(['Ireland', 'Iceland', 'Denmark'])][[\"name\", \"population\"]] Out name population 46 Denmark 5634437 74 Iceland 326340 79 Ireland 4593100 4.以顯示面積為 200,000 及 250,000 之間的國家名稱和該國面積哪些國家是不是太小,又不是太大? BETWEEN 允許範圍檢查 - 注意,這是包含性的。 此例子顯示面積為 250,000 及 300,000 之間的國家名稱和該國面積。 修改此例子,以顯示面積為 200,000 及 250,000 之間的國家名稱和該國面積。 mysqlIn1%sql SELECT name, area FROM world WHERE area BETWEEN 200000 AND 250000; * mysql+pymysql://root:***@localhost/dbs 8 rows affected.Out name area Belarus 207600 Ghana 238533 Guinea 245857 Guyana 214969 Laos 236800 Romania 238391 Uganda 241550 United Kingdom 242900 pandasIn1world.query(\"200000&lt;=area&lt;=250000\")[[\"name\", \"area\"]] Out name area 15 Belarus 207600 64 Ghana 238533 68 Guinea 245857 70 Guyana 214969 90 Laos 236800 139 Romania 238391 181 Uganda 241550 184 United Kingdom 242900","link":"/2019/09/20/mysql%E4%B8%8Epandas%E5%AF%B9%E7%85%A7%E5%AD%A6%E4%B9%A0-1/"},{"title":"mysql与pandas对照学习(3)","text":"SELECT from Nobel Tutorial/zhSELECT from Nobel Tutorial/zh yr subject winner 1960 Chemistry Willard F. Libby 1960 Literature Saint-John Perse 1960 Medicine Sir Frank Macfarlane Burnet 1960 Medicine Peter Madawar … yr: 年份 subject: 獎項 winner: 得獎者 nobel 諾貝爾獎得獎者我們繼續練習簡單的單一表格SQL查詢。 這個教程是有關諾貝爾獎得獎者的： 1nobel(yr, subject, winner) yr: 年份 subject: 獎項 winner: 得獎者 練習使用SELECT語句。 1234567%load_ext sql%sql mysql+pymysql://root:lanhoo@localhost/dbsimport pandas as pdimport numpy as npimport sqlalchemyengine = sqlalchemy.create_engine(\"mysql+pymysql://root:lanhoo@localhost/dbs\")nobel = pd.read_sql_table(\"nobel\", engine) 1nobel.info() &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; RangeIndex: 895 entries, 0 to 894 Data columns (total 3 columns): yr 895 non-null object subject 895 non-null object winner 895 non-null object dtypes: object(3) memory usage: 21.1+ KB12# 更改yr字段为整型nobel.yr = nobel.yr.astype(np.int16) 1.更改查詢以顯示1950年諾貝爾獎的獎項資料。mysql123%sql SELECT yr, subject, winner \\ FROM nobel \\ WHERE yr = 1950 * mysql+pymysql://root:***@localhost/dbs 8 rows affected. yr subject winner 1950 Chemistry Kurt Alder 1950 Chemistry Otto Diels 1950 Literature Bertrand Russell 1950 Medicine Philip S. Hench 1950 Medicine Edward C. Kendall 1950 Medicine Tadeus Reichstein 1950 Peace Ralph Bunche 1950 Physics Cecil Powell pandas1nobel[nobel.yr == 1950] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } yr subject winner 637 1950 Chemistry Kurt Alder 638 1950 Chemistry Otto Diels 639 1950 Literature Bertrand Russell 640 1950 Medicine Philip S. Hench 641 1950 Medicine Edward C. Kendall 642 1950 Medicine Tadeus Reichstein 643 1950 Peace Ralph Bunche 644 1950 Physics Cecil Powell 2.顯示誰贏得了1962年文學獎(Literature)。mysql1234%sql SELECT winner \\FROM nobel \\WHERE yr = 1962 \\ AND subject = 'Literature' * mysql+pymysql://root:***@localhost/dbs 1 rows affected. winner John Steinbeck 12# 方法一nobel.query(\"yr==1962 and subject=='Literature'\")[[\"winner\"]] # query()可以进行一些简单的判断及其组合查询 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } winner 556 John Steinbeck 12# 方法二nobel[(nobel.yr == 1962) &amp; (nobel.subject == \"Literature\")][[\"winner\"]] # 这种查询要注意对条件判断加括号，并只能用『&amp;』、『|』和『~』 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } winner 556 John Steinbeck 关于『&amp;』、『|』和『~』的详细说明可以浏览这里 3.顯示“愛因斯坦”(‘Albert Einstein’) 的獲獎年份和獎項。mysql1%sql SELECT yr, subject FROM nobel WHERE winner='Albert Einstein' * mysql+pymysql://root:***@localhost/dbs 1 rows affected. yr subject 1921 Physics pandas1nobel.query(\"winner == 'Albert Einstein'\")[[\"yr\", \"subject\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } yr subject 792 1921 Physics 4.顯示2000年及以後的和平獎(‘Peace’)得獎者。mysql1%sql SELECT winner FROM nobel WHERE subject='Peace' and yr &gt;= 2000; * mysql+pymysql://root:***@localhost/dbs 22 rows affected. winner Tunisian National Dialogue Quartet Kailash Satyarthi Malala Yousafzai European Union Ellen Johnson Sirleaf Leymah Gbowee Tawakel Karman Liu Xiaobo Barack Obama Martti Ahtisaari Intergovernmental Panel on Climate Change Al Gore Grameen Bank Muhammad Yunus International Atomic Energy Agency Mohamed ElBaradei Wangari Maathai Shirin Ebadi Jimmy Carter United Nations Kofi Annan Kim Dae-jung pandas1nobel.query(\"subject=='Peace' and yr &gt;= 2000\")[[\"winner\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } winner 7 Tunisian National Dialogue Quartet 18 Kailash Satyarthi 19 Malala Yousafzai 42 European Union 52 Ellen Johnson Sirleaf 53 Leymah Gbowee 54 Tawakel Karman 66 Liu Xiaobo 78 Barack Obama 90 Martti Ahtisaari 102 Intergovernmental Panel on Climate Change 103 Al Gore 111 Grameen Bank 112 Muhammad Yunus 123 International Atomic Energy Agency 124 Mohamed ElBaradei 136 Wangari Maathai 147 Shirin Ebadi 160 Jimmy Carter 174 United Nations 175 Kofi Annan 188 Kim Dae-jung 5.顯示1980年至1989年(包含首尾)的文學獎(Literature)獲獎者所有細節（年，主題，獲獎者）。mysql1%sql SELECT * FROM nobel WHERE subject='Literature' AND yr BETWEEN 1980 AND 1989; * mysql+pymysql://root:***@localhost/dbs 10 rows affected. yr subject winner 1989 Literature Camilo José Cela 1988 Literature Naguib Mahfouz 1987 Literature Joseph Brodsky 1986 Literature Wole Soyinka 1985 Literature Claude Simon 1984 Literature Jaroslav Seifert 1983 Literature William Golding 1982 Literature Gabriel García Márquez 1981 Literature Elias Canetti 1980 Literature Czeslaw Milosz pandas1nobel.query(\"subject=='Literature' and 1980&lt;=yr&lt;=1989\") .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } yr subject winner 299 1989 Literature Camilo José Cela 310 1988 Literature Naguib Mahfouz 322 1987 Literature Joseph Brodsky 331 1986 Literature Wole Soyinka 341 1985 Literature Claude Simon 347 1984 Literature Jaroslav Seifert 356 1983 Literature William Golding 363 1982 Literature Gabriel García Márquez 373 1981 Literature Elias Canetti 384 1980 Literature Czeslaw Milosz 6.顯示總統獲勝者的所有細節： 西奧多•羅斯福 Theodore Roosevelt 伍德羅•威爾遜 Woodrow Wilson 吉米•卡特 Jimmy Cartermysql 12%sql SELECT * FROM nobel\\ WHERE winner IN ('Theodore Roosevelt', 'Woodrow Wilson', 'Jimmy Carter') * mysql+pymysql://root:***@localhost/dbs 3 rows affected. yr subject winner 2002 Peace Jimmy Carter 1919 Peace Woodrow Wilson 1906 Peace Theodore Roosevelt pandas1nobel.query(\"winner in ('Theodore Roosevelt', 'Woodrow Wilson', 'Jimmy Carter')\") # query()里面可以用in .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } yr subject winner 160 2002 Peace Jimmy Carter 800 1919 Peace Woodrow Wilson 862 1906 Peace Theodore Roosevelt 7.顯示名字為John 的得獎者。(注意:外國人名字(First name)在前，姓氏(Last name)在後) mysql1%sql SELECT winner FROM nobel WHERE winner LIKE 'John%'; * mysql+pymysql://root:***@localhost/dbs 26 rows affected. winner John O'Keefe John B. Gurdon John C. Mather John L. Hall John B. Fenn John E. Sulston John Pople John Hume John E. Walker John C. Harsanyi John F. Nash Jr. John C. Polanyi John R. Vane John H. van Vleck John Cornforth John R. Hicks John Bardeen John C. Kendrew John Steinbeck John Bardeen John F. Enders John Cockcroft John H. Northrop John R. Mott John Galsworthy John Macleod pandas1nobel[nobel.winner.str.startswith('John')][[\"winner\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } winner 16 John O'Keefe 40 John B. Gurdon 113 John C. Mather 126 John L. Hall 151 John B. Fenn 159 John E. Sulston 200 John Pople 206 John Hume 213 John E. Walker 249 John C. Harsanyi 250 John F. Nash Jr. 329 John C. Polanyi 366 John R. Vane 423 John H. van Vleck 433 John Cornforth 473 John R. Hicks 477 John Bardeen 554 John C. Kendrew 556 John Steinbeck 602 John Bardeen 612 John F. Enders 635 John Cockcroft 663 John H. Northrop 669 John R. Mott 729 John Galsworthy 780 John Macleod 8. 顯示1980年物理學(physics)獲獎者，及1984年化學獎(chemistry)獲得者。mysql1%sql SELECT * FROM nobel WHERE (yr=1980 AND subject='physics') OR (yr=1984 AND subject='chemistry') * mysql+pymysql://root:***@localhost/dbs 3 rows affected. yr subject winner 1984 Chemistry Bruce Merrifield 1980 Physics James Cronin 1980 Physics Val Fitch pandas1nobel.query(\"(yr==1980 and subject=='Physics') or (yr==1984 and subject=='Chemistry')\") .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } yr subject winner 345 1984 Chemistry Bruce Merrifield 389 1980 Physics James Cronin 390 1980 Physics Val Fitch 注意事项 在mysql里默认对大小写不敏感，因此subject='physics'能够得到结果。 而python的语句是对大小写敏感的，所以必须是subject=='Physics'. 9.查看1980年獲獎者，但不包括化學獎(Chemistry)和醫學獎(Medicine)。mysql1%sql SELECT * FROM nobel WHERE subject NOT IN ('Chemistry', 'Medicine') AND yr=1980; * mysql+pymysql://root:***@localhost/dbs 5 rows affected. yr subject winner 1980 Economics Lawrence R. Klein 1980 Literature Czeslaw Milosz 1980 Peace Adolfo Pérez Esquivel 1980 Physics James Cronin 1980 Physics Val Fitch pandas1nobel.query(\"subject not in ('Chemistry', 'Medicine') and yr==1980\") # not in 也是可以用在query()里 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } yr subject winner 383 1980 Economics Lawrence R. Klein 384 1980 Literature Czeslaw Milosz 388 1980 Peace Adolfo Pérez Esquivel 389 1980 Physics James Cronin 390 1980 Physics Val Fitch 10. 顯示早期的醫學獎(Medicine)得獎者（1910之前，不包括1910），及近年文學獎(Literature)得獎者（2004年以後，包括2004年）。mysql1%sql SELECT * FROM nobel WHERE (subject='Medicine' AND yr &lt; 1910) OR (subject='Literature' AND yr &gt;= 2004) * mysql+pymysql://root:***@localhost/dbs 23 rows affected. yr subject winner 2015 Literature Svetlana Alexievich 2014 Literature Patrick Modiano 2013 Literature Alice Munro 2012 Literature Mo Yan 2011 Literature Tomas Tranströmer 2010 Literature Mario Vargas Llosa 2009 Literature Herta Müller 2008 Literature Jean-Marie Gustave Le Clézio 2007 Literature Doris Lessing 2006 Literature Orhan Pamuk 2005 Literature Harold Pinter 2004 Literature Elfriede Jelinek 1909 Medicine Theodor Kocher 1908 Medicine Paul Ehrlich 1908 Medicine Ilya Mechnikov 1907 Medicine Alphonse Laveran 1906 Medicine Camillo Golgi 1906 Medicine Santiago Ramón y Cajal 1905 Medicine Robert Koch 1904 Medicine Ivan Pavlov 1903 Medicine Niels Ryberg Finsen 1902 Medicine Ronald Ross 1901 Medicine Emil von Behring pandas1nobel.query(\"(subject=='Medicine' and yr &lt; 1910) or (subject=='Literature' and yr &gt;= 2004)\") .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } yr subject winner 4 2015 Literature Svetlana Alexievich 14 2014 Literature Patrick Modiano 29 2013 Literature Alice Munro 39 2012 Literature Mo Yan 48 2011 Literature Tomas Tranströmer 64 2010 Literature Mario Vargas Llosa 74 2009 Literature Herta Müller 86 2008 Literature Jean-Marie Gustave Le Clézio 98 2007 Literature Doris Lessing 108 2006 Literature Orhan Pamuk 120 2005 Literature Harold Pinter 133 2004 Literature Elfriede Jelinek 840 1909 Medicine Theodor Kocher 847 1908 Medicine Paul Ehrlich 848 1908 Medicine Ilya Mechnikov 854 1907 Medicine Alphonse Laveran 860 1906 Medicine Camillo Golgi 861 1906 Medicine Santiago Ramón y Cajal 866 1905 Medicine Robert Koch 872 1904 Medicine Ivan Pavlov 877 1903 Medicine Niels Ryberg Finsen 884 1902 Medicine Ronald Ross 891 1901 Medicine Emil von Behring Harder Questions11. Find all details of the prize won by PETER GRÜNBERG Non-ASCII characters The u in his name has an umlaut. You may find this link useful https://en.wikipedia.org/wiki/%C3%9C#Keyboarding mysql1%sql SELECT * FROM nobel WHERE winner='PETER GRÜNBERG' * mysql+pymysql://root:***@localhost/dbs 1 rows affected. yr subject winner 2007 Physics Peter Grünberg pandas1nobel.query(\"winner=='Peter Grünberg'\") # 大小写问题在第8题里已经写明，但题目给的姓名是全大写，这样改动有些欠妥 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } yr subject winner 105 2007 Physics Peter Grünberg 12# 应该使用下面的代码来执行查询nobel[nobel.winner.str.upper() == \"PETER GRÜNBERG\"] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } yr subject winner 105 2007 Physics Peter Grünberg 12. 查找尤金•奧尼爾EUGENE O’NEILL得獎的所有細節 Find all details of the prize won by EUGENE O’NEILL 跳脫字符:單引號 你不能把一個單引號直接的放在字符串中。但您可連續使用兩個單引號在字符串中當作一個單引號。 mysql1%sql SELECT * FROM nobel WHERE winner='EUGENE O''NEILL'; * mysql+pymysql://root:***@localhost/dbs 1 rows affected. yr subject winner 1936 Literature Eugene O'Neill pandas1nobel[nobel.winner.str.upper() == \"EUGENE O'NEILL\"] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } yr subject winner 706 1936 Literature Eugene O'Neill 13. 騎士列隊 Knights in order列出爵士的獲獎者、年份、獎頁(爵士的名字以Sir開始)。先顯示最新獲獎者，然後同年再按名稱順序排列。 mysql1%sql SELECT winner, yr, subject FROM nobel WHERE winner LIKE 'Sir%' ORDER BY yr DESC, winner ASC; * mysql+pymysql://root:***@localhost/dbs 21 rows affected. winner yr subject Sir Martin J. Evans 2007 Medicine Sir Peter Mansfield 2003 Medicine Sir Paul Nurse 2001 Medicine Sir Harold Kroto 1996 Chemistry Sir James W. Black 1988 Medicine Sir Arthur Lewis 1979 Economics Sir Nevill F. Mott 1977 Physics Sir Bernard Katz 1970 Medicine Sir John Eccles 1963 Medicine Sir Frank Macfarlane Burnet 1960 Medicine Sir Cyril Hinshelwood 1956 Chemistry Sir Robert Robinson 1947 Chemistry Sir Alexander Fleming 1945 Medicine Sir Howard Florey 1945 Medicine Sir Henry Dale 1936 Medicine Sir Norman Angell 1933 Peace Sir Charles Sherrington 1932 Medicine Sir Venkata Raman 1930 Physics Sir Frederick Hopkins 1929 Medicine Sir Austen Chamberlain 1925 Peace Sir William Ramsay 1904 Chemistry pandas1nobel[nobel.winner.str.startswith(\"Sir\")][[\"winner\", \"yr\", \"subject\"]].sort_values(\"winner\").sort_values(\"yr\", ascending=False) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } winner yr subject 100 Sir Martin J. Evans 2007 Medicine 146 Sir Peter Mansfield 2003 Medicine 173 Sir Paul Nurse 2001 Medicine 224 Sir Harold Kroto 1996 Chemistry 311 Sir James W. Black 1988 Medicine 393 Sir Arthur Lewis 1979 Economics 422 Sir Nevill F. Mott 1977 Physics 490 Sir Bernard Katz 1970 Medicine 546 Sir John Eccles 1963 Medicine 570 Sir Frank Macfarlane Burnet 1960 Medicine 596 Sir Cyril Hinshelwood 1956 Chemistry 655 Sir Robert Robinson 1947 Chemistry 674 Sir Alexander Fleming 1945 Medicine 675 Sir Howard Florey 1945 Medicine 707 Sir Henry Dale 1936 Medicine 725 Sir Norman Angell 1933 Peace 731 Sir Charles Sherrington 1932 Medicine 743 Sir Venkata Raman 1930 Physics 748 Sir Frederick Hopkins 1929 Medicine 770 Sir Austen Chamberlain 1925 Peace 869 Sir William Ramsay 1904 Chemistry 注意事项 mysql里的order by与pandas里的sort_values()的排序字段顺序完全不同 14.The expression subject IN (‘Chemistry’,’Physics’) can be used as a value - it will be 0 or 1. Show the 1984 winners and subject ordered by subject and winner name; but list Chemistry and Physics last. 本题的提示1234%sql SELECT winner, subject, subject IN ('Physics','Chemistry')\\ FROM nobel\\ WHERE yr=1984\\ ORDER BY subject,winner * mysql+pymysql://root:***@localhost/dbs 9 rows affected. winner subject subject IN ('Physics','Chemistry') Bruce Merrifield Chemistry 1 Richard Stone Economics 0 Jaroslav Seifert Literature 0 César Milstein Medicine 0 Georges J.F. Köhler Medicine 0 Niels K. Jerne Medicine 0 Desmond Tutu Peace 0 Carlo Rubbia Physics 1 Simon van der Meer Physics 1 mysql1234%sql SELECT winner, subject\\ FROM nobel\\ WHERE yr=1984\\ ORDER BY subject IN ('Physics','Chemistry'),subject,winner * mysql+pymysql://root:***@localhost/dbs 9 rows affected. winner subject Richard Stone Economics Jaroslav Seifert Literature César Milstein Medicine Georges J.F. Köhler Medicine Niels K. Jerne Medicine Desmond Tutu Peace Bruce Merrifield Chemistry Carlo Rubbia Physics Simon van der Meer Physics pandas1df = nobel[nobel.yr==1984].copy() 12df[\"new\"] = df.subject.isin(['Physics','Chemistry']).astype(np.int8) # 也可以不转换类型，转不转结果一样df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } yr subject winner new 345 1984 Chemistry Bruce Merrifield 1 346 1984 Economics Richard Stone 0 347 1984 Literature Jaroslav Seifert 0 348 1984 Medicine Niels K. Jerne 0 349 1984 Medicine Georges J.F. Köhler 0 350 1984 Medicine César Milstein 0 351 1984 Peace Desmond Tutu 0 352 1984 Physics Carlo Rubbia 1 353 1984 Physics Simon van der Meer 1 1df.sort_values(\"winner\").sort_values(\"subject\").sort_values(\"new\")[[\"winner\", \"subject\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } winner subject 346 Richard Stone Economics 347 Jaroslav Seifert Literature 350 César Milstein Medicine 349 Georges J.F. Köhler Medicine 348 Niels K. Jerne Medicine 351 Desmond Tutu Peace 345 Bruce Merrifield Chemistry 352 Carlo Rubbia Physics 353 Simon van der Meer Physics","link":"/2019/09/22/mysql%E4%B8%8Epandas%E5%AF%B9%E7%85%A7%E5%AD%A6%E4%B9%A0-3/"},{"title":"mysql与pandas对照学习(4)","text":"SELECT within SELECT Tutorial/zhSELECT within SELECT Tutorial/zh 此教程教我們在SELECT查詢中使用別一個SELECT查詢，進行一些更複雜的查詢。 name國家名 continent洲份 area面積 population人口 gdp國民生產總值 Afghanistan Asia 652230 25500100 20343000000 Albania Europe 28748 2831741 12960000000 Algeria Africa 2381741 37100000 188681000000 Andorra Europe 468 78115 3712000000 Angola Africa 1246700 20609294 100990000000 … 如何使用子查詢 練習1234567%load_ext sql%sql mysql+pymysql://root:lanhoo@localhost/dbsimport pandas as pdimport numpy as npimport sqlalchemyengine = sqlalchemy.create_engine(\"mysql+pymysql://root:lanhoo@localhost/dbs\")world = pd.read_sql_table(\"world\", engine) 1.列出每個國家的名字 name，當中人口 population 是高於俄羅斯’Russia’的人口。 world(name, continent, area, population, gdp) mysql1234%sql SELECT name FROM world\\ WHERE population &gt;\\ (SELECT population FROM world\\ WHERE name='Russia') * mysql+pymysql://root:***@localhost/dbs 8 rows affected. name Bangladesh Brazil China India Indonesia Nigeria Pakistan United States pandas1temp = world[world[\"name\"] == \"Russia\"][\"population\"].iloc[0] # 或者使用.values[0] 1world[world.population &gt; temp][[\"name\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name 13 Bangladesh 23 Brazil 35 China 75 India 76 Indonesia 125 Nigeria 129 Pakistan 185 United States 2. 列出歐州每國家的人均GDP，當中人均GDP要高於英國’United Kingdom’的數值。 人均GDP 人均GDP即是 gdp除以population mysql12%sql SELECT name FROM world WHERE continent='Europe' AND \\gdp/population &gt; (SELECT gdp/population FROM world WHERE name='United Kingdom') * mysql+pymysql://root:***@localhost/dbs 17 rows affected. name Andorra Austria Belgium Denmark Finland France Germany Iceland Ireland Liechtenstein Luxembourg Monaco Netherlands Norway San Marino Sweden Switzerland pandas1uk = world[world[\"name\"] == \"United Kingdom\"] 1uk_gdp_per_person = uk[\"gdp\"] / uk[\"population\"] 1europe = world[world.continent==\"Europe\"] 1bools = europe[\"gdp\"] / europe[\"population\"] &gt; uk_gdp_per_person.values[0] 1europe[bools][[\"name\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name 3 Andorra 9 Austria 16 Belgium 46 Denmark 58 Finland 59 France 63 Germany 74 Iceland 79 Ireland 96 Liechtenstein 98 Luxembourg 112 Monaco 121 Netherlands 127 Norway 146 San Marino 166 Sweden 167 Switzerland 当涉及到列运算时，mysql比pandas简洁多了3. 在阿根廷Argentina 及 澳大利亞 Australia所在的洲份中，列出當中的國家名字 name 及洲分 continent 。按國字名字順序排序mysql12%sql SELECT name, continent FROM world WHERE continent IN (\\ SELECT continent FROM world WHERE name IN ('Argentina', 'Australia')) ORDER BY name * mysql+pymysql://root:***@localhost/dbs 27 rows affected. name continent Argentina South America Australia Oceania Bolivia South America Brazil South America Chile South America Colombia South America Ecuador South America Fiji Oceania Guyana South America Kiribati Oceania Marshall Islands Oceania Micronesia, Federated States of Oceania Nauru Oceania New Zealand Oceania Palau Oceania Papua New Guinea Oceania Paraguay South America Peru South America Saint Vincent and the Grenadines South America Samoa Oceania Solomon Islands Oceania Suriname South America Tonga Oceania Tuvalu Oceania Uruguay South America Vanuatu Oceania Venezuela South America pandas1temp = world.query(\"name in ('Argentina', 'Australia')\")[\"continent\"] 1world[world.continent.isin(temp)][[\"name\", \"continent\"]].sort_values(\"name\") .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name continent 6 Argentina South America 8 Australia Oceania 20 Bolivia South America 23 Brazil South America 34 Chile South America 36 Colombia South America 50 Ecuador South America 57 Fiji Oceania 70 Guyana South America 87 Kiribati Oceania 106 Marshall Islands Oceania 110 Micronesia, Federated States of Oceania 119 Nauru Oceania 122 New Zealand Oceania 130 Palau Oceania 132 Papua New Guinea Oceania 133 Paraguay South America 134 Peru South America 144 Saint Vincent and the Grenadines South America 145 Samoa Oceania 156 Solomon Islands Oceania 164 Suriname South America 175 Tonga Oceania 180 Tuvalu Oceania 186 Uruguay South America 188 Vanuatu Oceania 190 Venezuela South America 4. 哪一個國家的人口比加拿大Canada的多，但比波蘭Poland的少?列出國家名字name和人口population 。mysql123%sql SELECT name, population FROM world WHERE population &gt; (\\ SELECT population FROM world WHERE name='Canada') AND population &lt; (\\ SELECT population FROM world WHERE name='Poland') * mysql+pymysql://root:***@localhost/dbs 2 rows affected. name population Iraq 36004552 Sudan 37289406 pandas1canada_pop = world.query(\"name == 'Canada'\")[\"population\"].iloc[0] 1poland_pop = world.query(\"name == 'Poland'\")[\"population\"].iloc[0] 1world[(canada_pop &lt; world.population) &amp; (world.population &lt; poland_pop)][[\"name\", \"population\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name population 78 Iraq 36004552 163 Sudan 37289406 5. 顯示歐洲的國家名稱name和每個國家的人口population。以德國的人口的百分比作人口顯示。Germany德國（人口8000萬），在Europe歐洲國家的人口最多。Austria奧地利（人口850萬）擁有德國總人口的11％。 小數位數 您可以使用函數ROUND 刪除小數。 百分號 % 您可以使用函數 CONCAT 增加的百分比符號。 mysql12%sql SELECT name, CONCAT(ROUND(100 * population / (SELECT population FROM world WHERE name = 'Germany')), '%') AS t \\FROM world WHERE continent = 'Europe' * mysql+pymysql://root:***@localhost/dbs 44 rows affected. name t Albania 3% Andorra 0% Austria 11% Belarus 12% Belgium 14% Bosnia and Herzegovina 5% Bulgaria 9% Croatia 5% Czech Republic 13% Denmark 7% Estonia 2% Finland 7% France 82% Germany 100% Greece 14% Hungary 12% Iceland 0% Ireland 6% Italy 75% Kazakhstan 21% Latvia 2% Liechtenstein 0% Lithuania 4% Luxembourg 1% Macedonia 3% Malta 1% Moldova 4% Monaco 0% Montenegro 1% Netherlands 21% Norway 6% Poland 48% Portugal 13% Romania 25% San Marino 0% Serbia 9% Slovakia 7% Slovenia 3% Spain 58% Sweden 12% Switzerland 10% Ukraine 53% United Kingdom 79% Vatican City 0% pandas1germany_pop = world.query(\"name == 'Germany'\")[\"population\"].iloc[0] 12def func(x): return str(int(round(100*x/germany_pop, 0))) + \"%\" 1europe = world[world.continent == \"Europe\"].copy() # 因为下面会有新增一列的操作，要使用copy()来不引起SettingWithCopyWarning 1europe[\"t\"] = europe[\"population\"].apply(func) 1europe[[\"name\", \"t\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name t 1 Albania 3% 3 Andorra 0% 9 Austria 11% 15 Belarus 12% 16 Belgium 14% 21 Bosnia and Herzegovina 5% 25 Bulgaria 9% 42 Croatia 5% 45 Czech Republic 13% 46 Denmark 7% 55 Estonia 2% 58 Finland 7% 59 France 82% 63 Germany 100% 65 Greece 14% 73 Hungary 12% 74 Iceland 0% 79 Ireland 6% 81 Italy 75% 85 Kazakhstan 21% 91 Latvia 2% 96 Liechtenstein 0% 97 Lithuania 4% 98 Luxembourg 1% 99 Macedonia 3% 105 Malta 1% 111 Moldova 4% 112 Monaco 0% 114 Montenegro 1% 121 Netherlands 21% 127 Norway 6% 136 Poland 48% 137 Portugal 13% 139 Romania 25% 146 San Marino 0% 150 Serbia 9% 154 Slovakia 7% 155 Slovenia 3% 161 Spain 58% 166 Sweden 12% 167 Switzerland 10% 182 Ukraine 53% 184 United Kingdom 79% 189 Vatican City 0% 練習SQL中較重要的功能–群組函數，按此到下一個教程。 如要練習一些較少用的SQL功能，看下去。 我們可以用ALL 這個詞對一個列表進行&gt;=或&gt;或&lt;或&lt;=充當比較。例如，你可以用此查詢找到世界上最大的國家(以人口計算)： 12345SELECT name FROM world WHERE population &gt;= ALL(SELECT population FROM world WHERE population&gt;0) 你需在子查詢的條件中使用 population&gt;0，因為有些國家的記錄中，人口是沒有填入，只有 null值。 6.哪些國家的GDP比Europe歐洲的全部國家都要高呢? [只需列出 name 。] (有些國家的記錄中，GDP是NULL，沒有填入資料的。)mysql12%sql SELECT name FROM world WHERE gdp &gt; ALL( \\ SELECT gdp FROM world WHERE continent='Europe' AND gdp&gt;0) * mysql+pymysql://root:***@localhost/dbs 3 rows affected. name China Japan United States pandas1world[world.gdp &gt; world.query(\"continent=='Europe'\")[[\"gdp\"]].max()[0]][[\"name\"]] # 尝试用all()但没有成功 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name 35 China 83 Japan 185 United States 我們可以在子查詢，參閱外部查詢的數值。我們為表格再命名，便可以分別內外兩個不同的表格。 7. 在每一個州中找出最大面積的國家，列出洲份 continent, 國家名字 name 及面積 area。(有些國家的記錄中，AREA是NULL，沒有填入資料的。) mysql12345%sql SELECT continent, name, area FROM world x \\ WHERE area &gt;= ALL \\ (SELECT area FROM world y \\ WHERE y.continent=x.continent \\ AND area&gt;0) * mysql+pymysql://root:***@localhost/dbs 8 rows affected. continent name area Africa Algeria 2381741 Oceania Australia 7692024 South America Brazil 8515767 North America Canada 9984670 Asia China 9596961 Caribbean Cuba 109884 Europe Kazakhstan 2724900 Eurasia Russia 17125242 pandas方法一123# 先求出各洲中面积最大的area_max = world.groupby(\"continent\")[\"area\"].max()area_max continent Africa 2381741 Asia 9596961 Caribbean 109884 Eurasia 17125242 Europe 2724900 North America 9984670 Oceania 7692024 South America 8515767 Name: area, dtype: int6412345# 编写函数求出一个国家的面积是否是该国所在洲的最大面积def get_max(x): if x[\"area\"] == area_max[x[\"continent\"]]: return True return False 12# 运用apply()方法，列出展示的列world[world.apply(get_max, axis=\"columns\")][[\"continent\", \"name\", \"area\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } continent name area 2 Africa Algeria 2381741 8 Oceania Australia 7692024 23 South America Brazil 8515767 30 North America Canada 9984670 35 Asia China 9596961 43 Caribbean Cuba 109884 85 Europe Kazakhstan 2724900 140 Eurasia Russia 17125242 方法二，更加简洁123world[[\"continent\", \"name\", \"area\"]]\\ .sort_values(\"area\", ascending=False)\\ .drop_duplicates(\"continent\").sort_index() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } continent name area 2 Africa Algeria 2381741 8 Oceania Australia 7692024 23 South America Brazil 8515767 30 North America Canada 9984670 35 Asia China 9596961 43 Caribbean Cuba 109884 85 Europe Kazakhstan 2724900 140 Eurasia Russia 17125242 对方法二的说明 sort_values(&quot;area&quot;, ascending=False)根据面积大小降序排序 drop_duplicates(&quot;continent&quot;)由于面积最大的国家排在前面，根据洲名去重，就只留下各州面积最大的国家 sort_index()让结果跟前面的求解显示一样 8. 列出洲份名稱，和每個洲份中國家名字按子母順序是排首位的國家名。(即每洲只有列一國)mysql12%sql SELECT continent, name FROM world x WHERE name = ( \\ SELECT name FROM world y WHERE x.continent = y.continent ORDER BY name LIMIT 1) * mysql+pymysql://root:***@localhost/dbs 8 rows affected. continent name Asia Afghanistan Europe Albania Africa Algeria Caribbean Antigua and Barbuda South America Argentina Eurasia Armenia Oceania Australia North America Belize pandas1world[[\"continent\", \"name\"]].sort_values(\"name\").drop_duplicates(\"continent\") .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } continent name 0 Asia Afghanistan 1 Europe Albania 2 Africa Algeria 5 Caribbean Antigua and Barbuda 6 South America Argentina 7 Eurasia Armenia 8 Oceania Australia 17 North America Belize 9. 找出洲份，當中全部國家都有少於或等於 25000000 人口. 在這些洲份中，列出國家名字name，continent 洲份和population人口。mysql12%sql SELECT name, continent, population FROM world x WHERE 25000000 &gt;= ALL( \\SELECT population FROM world y WHERE population &gt; 0 AND x.continent = y.continent) * mysql+pymysql://root:***@localhost/dbs 25 rows affected. name continent population Antigua and Barbuda Caribbean 86295 Australia Oceania 23545500 Bahamas Caribbean 351461 Barbados Caribbean 285000 Cuba Caribbean 11167325 Dominica Caribbean 71293 Dominican Republic Caribbean 9445281 Fiji Oceania 858038 Grenada Caribbean 103328 Haiti Caribbean 10413211 Jamaica Caribbean 2717991 Kiribati Oceania 106461 Marshall Islands Oceania 56086 Micronesia, Federated States of Oceania 101351 Nauru Oceania 9945 New Zealand Oceania 4538520 Palau Oceania 20901 Papua New Guinea Oceania 7398500 Saint Lucia Caribbean 180000 Samoa Oceania 187820 Solomon Islands Oceania 581344 Tonga Oceania 103036 Trinidad and Tobago Caribbean 1328019 Tuvalu Oceania 11323 Vanuatu Oceania 264652 pandas1world.groupby(\"continent\")[\"population\"].max() &lt;= 25000000 # 先求出最大人口的国家都小于或等于25000000的洲 continent Africa False Asia False Caribbean True Eurasia False Europe False North America False Oceania True South America False Name: population, dtype: bool12small_pop_con = world.groupby(\"continent\")[\"population\"].max() &lt;= 25000000small_pop_con continent Africa False Asia False Caribbean True Eurasia False Europe False North America False Oceania True South America False Name: population, dtype: bool123# 方法一isin()arr = small_pop_con[small_pop_con].index.values # 也可以不用加.values，用index对象也行world[world[\"continent\"].isin(arr)][[\"name\", \"continent\", \"population\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name continent population 5 Antigua and Barbuda Caribbean 86295 8 Australia Oceania 23545500 11 Bahamas Caribbean 351461 14 Barbados Caribbean 285000 43 Cuba Caribbean 11167325 48 Dominica Caribbean 71293 49 Dominican Republic Caribbean 9445281 57 Fiji Oceania 858038 66 Grenada Caribbean 103328 71 Haiti Caribbean 10413211 82 Jamaica Caribbean 2717991 87 Kiribati Oceania 106461 106 Marshall Islands Oceania 56086 110 Micronesia, Federated States of Oceania 101351 119 Nauru Oceania 9945 122 New Zealand Oceania 4538520 130 Palau Oceania 20901 132 Papua New Guinea Oceania 7398500 143 Saint Lucia Caribbean 180000 145 Samoa Oceania 187820 156 Solomon Islands Oceania 581344 175 Tonga Oceania 103036 176 Trinidad and Tobago Caribbean 1328019 180 Tuvalu Oceania 11323 188 Vanuatu Oceania 264652 12# 方法二apply()world[[\"name\", \"continent\", \"population\"]][world[\"continent\"].apply(lambda x: small_pop_con[x])] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name continent population 5 Antigua and Barbuda Caribbean 86295 8 Australia Oceania 23545500 11 Bahamas Caribbean 351461 14 Barbados Caribbean 285000 43 Cuba Caribbean 11167325 48 Dominica Caribbean 71293 49 Dominican Republic Caribbean 9445281 57 Fiji Oceania 858038 66 Grenada Caribbean 103328 71 Haiti Caribbean 10413211 82 Jamaica Caribbean 2717991 87 Kiribati Oceania 106461 106 Marshall Islands Oceania 56086 110 Micronesia, Federated States of Oceania 101351 119 Nauru Oceania 9945 122 New Zealand Oceania 4538520 130 Palau Oceania 20901 132 Papua New Guinea Oceania 7398500 143 Saint Lucia Caribbean 180000 145 Samoa Oceania 187820 156 Solomon Islands Oceania 581344 175 Tonga Oceania 103036 176 Trinidad and Tobago Caribbean 1328019 180 Tuvalu Oceania 11323 188 Vanuatu Oceania 264652 对方法二的补充说明 world[[&quot;name&quot;, &quot;continent&quot;, &quot;population&quot;]]是一个有三列数据的DataFrame，它后面加方括号[]并方括号里面是长度与world长度一样的布尔数组，就会返回值为True的对应行数据。 world[&quot;continent&quot;].apply(lambda x: small_pop_con[x])就是返回一个长度跟world相同的布尔数组 1world[\"continent\"].apply(lambda x: small_pop_con[x]).tail() 190 False 191 False 192 False 193 False 194 False Name: continent, dtype: bool123# 一个简单的例子：world[world.continent == \"Caribbean\"]# 方括号里面就是返回一个长度跟world一样的布尔数组，它能够查询到符合条件的数据 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name continent area population gdp capital tld flag 5 Antigua and Barbuda Caribbean 442 86295 1.176000e+09 St. John's .ag //upload.wikimedia.org/wikipedia/commons/8/89/... 11 Bahamas Caribbean 13878 351461 8.043000e+09 Nassau .bs //upload.wikimedia.org/wikipedia/commons/9/93/... 14 Barbados Caribbean 430 285000 4.533000e+09 Bridgetown .bb //upload.wikimedia.org/wikipedia/commons/e/ef/... 43 Cuba Caribbean 109884 11167325 7.101700e+10 Havana .cu //upload.wikimedia.org/wikipedia/commons/b/bd/... 48 Dominica Caribbean 751 71293 4.990000e+08 Roseau .dm //upload.wikimedia.org/wikipedia/commons/c/c4/... 49 Dominican Republic Caribbean 48671 9445281 5.889800e+10 Santo Domingo .do //upload.wikimedia.org/wikipedia/commons/9/9f/... 66 Grenada Caribbean 344 103328 7.830000e+08 St. George's .gd //upload.wikimedia.org/wikipedia/commons/b/bc/... 71 Haiti Caribbean 27750 10413211 7.187000e+09 Port-au-Prince .ht //upload.wikimedia.org/wikipedia/commons/5/58/... 82 Jamaica Caribbean 10991 2717991 1.479500e+10 Kingston .jm //upload.wikimedia.org/wikipedia/commons/0/0a/... 143 Saint Lucia Caribbean 616 180000 1.318000e+09 Castries .lc //upload.wikimedia.org/wikipedia/commons/9/9f/... 176 Trinidad and Tobago Caribbean 5130 1328019 2.322500e+10 Port of Spain .tt //upload.wikimedia.org/wikipedia/commons/6/64/... 12# Series.apply()world[world.continent.apply(lambda x: x == \"Caribbean\")] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name continent area population gdp capital tld flag 5 Antigua and Barbuda Caribbean 442 86295 1.176000e+09 St. John's .ag //upload.wikimedia.org/wikipedia/commons/8/89/... 11 Bahamas Caribbean 13878 351461 8.043000e+09 Nassau .bs //upload.wikimedia.org/wikipedia/commons/9/93/... 14 Barbados Caribbean 430 285000 4.533000e+09 Bridgetown .bb //upload.wikimedia.org/wikipedia/commons/e/ef/... 43 Cuba Caribbean 109884 11167325 7.101700e+10 Havana .cu //upload.wikimedia.org/wikipedia/commons/b/bd/... 48 Dominica Caribbean 751 71293 4.990000e+08 Roseau .dm //upload.wikimedia.org/wikipedia/commons/c/c4/... 49 Dominican Republic Caribbean 48671 9445281 5.889800e+10 Santo Domingo .do //upload.wikimedia.org/wikipedia/commons/9/9f/... 66 Grenada Caribbean 344 103328 7.830000e+08 St. George's .gd //upload.wikimedia.org/wikipedia/commons/b/bc/... 71 Haiti Caribbean 27750 10413211 7.187000e+09 Port-au-Prince .ht //upload.wikimedia.org/wikipedia/commons/5/58/... 82 Jamaica Caribbean 10991 2717991 1.479500e+10 Kingston .jm //upload.wikimedia.org/wikipedia/commons/0/0a/... 143 Saint Lucia Caribbean 616 180000 1.318000e+09 Castries .lc //upload.wikimedia.org/wikipedia/commons/9/9f/... 176 Trinidad and Tobago Caribbean 5130 1328019 2.322500e+10 Port of Spain .tt //upload.wikimedia.org/wikipedia/commons/6/64/... 10. 有些國家的人口是同洲份的所有其他國的3倍或以上。列出 國家名字name 和 洲份 continent。mysql123%sql SELECT name, continent FROM world x WHERE x.population/3 &gt;= \\ALL((SELECT population FROM world y \\WHERE x.continent = y.continent AND x.name &lt;&gt; y.name AND y.population &gt; 0)) * mysql+pymysql://root:***@localhost/dbs 3 rows affected. name continent Australia Oceania Brazil South America Russia Eurasia pandas方法一，根据sql思路来求解12345def get_3times_p(x): flag = (world[\"name\"] != x[\"name\"]) &amp; (world[\"continent\"] == x[\"continent\"]) # 同一个洲的不同国家 if all(x[\"population\"] &gt;= world[flag].population * 3): return True return False 1world[world.apply(get_3times_p, axis=\"columns\")][[\"name\", \"continent\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name continent 8 Australia Oceania 23 Brazil South America 140 Russia Eurasia 方法二，最多人口国家是同一洲的第二大三倍或以上123w1 = world[[\"name\", \"continent\", \"population\"]]\\ # 各洲最多人口的国家 .sort_values(\"population\", ascending=False)\\ .drop_duplicates(\"continent\") 1w1.sort_values(\"continent\") .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name continent population 125 Nigeria Africa 178517000 35 China Asia 1365370000 43 Cuba Caribbean 11167325 140 Russia Eurasia 146000000 63 Germany Europe 80716000 185 United States North America 318320000 8 Australia Oceania 23545500 23 Brazil South America 202794000 123w2 = world.drop(index=w1.index)\\ # 各洲第二多人口的国家 .sort_values(\"population\", ascending=False)\\ .drop_duplicates(\"continent\")[[\"name\", \"continent\", \"population\"]] 1w2.sort_values(\"continent\") .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name continent population 56 Ethiopia Africa 87952991 75 India Asia 1246160000 71 Haiti Caribbean 10413211 7 Armenia Eurasia 3017400 59 France Europe 65906000 109 Mexico North America 119713203 132 Papua New Guinea Oceania 7398500 36 Colombia South America 47662000 1op = w1.sort_values(\"continent\")[\"population\"].values &gt;= (w2.sort_values(\"continent\")[\"population\"].values) * 3 12# 这里要给各洲的第一大人口国排序，不排就会出错，或者前面就排好先。w1.sort_values(\"continent\")[op].sort_index()[[\"name\", \"continent\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name continent 8 Australia Oceania 23 Brazil South America 140 Russia Eurasia 方法三，还是第一人口国跟第二人口国比较，但使用到shift()1p1 = world[[\"name\", \"continent\", \"population\"]].sort_values([\"continent\", \"population\"], ascending=[True, False]) 1p1.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name continent population 125 Nigeria Africa 178517000 56 Ethiopia Africa 87952991 38 Congo, Democratic Republic of Africa 69360000 158 South Africa Africa 52981991 86 Kenya Africa 45546000 1p1[\"compare\"] = p1.population - 3*p1.shift(-1).population 1p1.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name continent population compare 125 Nigeria Africa 178517000 -85341973.0 56 Ethiopia Africa 87952991 -120127009.0 38 Congo, Democratic Republic of Africa 69360000 -89585973.0 158 South Africa Africa 52981991 -83656009.0 86 Kenya Africa 45546000 -89240769.0 1p2 = p1.drop_duplicates(\"continent\") 1p2 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name continent population compare 125 Nigeria Africa 178517000 -8.534197e+07 35 China Asia 1365370000 -2.373110e+09 43 Cuba Caribbean 11167325 -2.007231e+07 140 Russia Eurasia 146000000 1.369478e+08 63 Germany Europe 80716000 -1.170020e+08 185 United States North America 318320000 -4.081961e+07 8 Australia Oceania 23545500 1.350000e+06 23 Brazil South America 202794000 5.980800e+07 1p2[p2[\"compare\"] &gt;= 0][[\"name\", \"continent\"]].sort_index() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name continent 8 Australia Oceania 23 Brazil South America 140 Russia Eurasia","link":"/2019/09/23/mysql%E4%B8%8Epandas%E5%AF%B9%E7%85%A7%E5%AD%A6%E4%B9%A0-4/"},{"title":"mysql与pandas对照学习(5)","text":"SUM and COUNT/zhSUM and COUNT/zh 全球統計:群組函數此教程是有關群組函數，例如COUNT, SUM 和 AVG。群組函數把多個數值運算，得出結果只有一個數值。例如SUM函數會把數值2,4,和5運算成結果11。 name continent area population gdp Afghanistan Asia 652230 25500100 20343000000 Albania Europe 28748 2831741 12960000000 Algeria Africa 2381741 37100000 188681000000 Andorra Europe 468 78115 3712000000 Angola Africa 1246700 20609294 100990000000 … name:國家名稱 continent:洲份 area:面積 population:人口 gdp:國內生產總值 示範使用 SUM, Count, MAX, DISTINCT 和 ORDER BY. 1234567%load_ext sql%sql mysql+pymysql://root:lanhoo@localhost/dbsimport pandas as pdimport numpy as npimport sqlalchemyengine = sqlalchemy.create_engine(\"mysql+pymysql://root:lanhoo@localhost/dbs\")world = pd.read_sql_table(\"world\", engine) 1. 展示世界的總人口。world(name, continent, area, population, gdp) mysql1%sql SELECT SUM(population) FROM world * mysql+pymysql://root:***@localhost/dbs 1 rows affected. SUM(population) 7118632738 pandas1world.population.sum() 71186327382. 列出所有的洲份, 每個只有一次。mysql1%sql SELECT DISTINCT continent FROM world * mysql+pymysql://root:***@localhost/dbs 8 rows affected. continent Asia Europe Africa Caribbean South America Eurasia Oceania North America pandas1world.continent.drop_duplicates() 0 Asia 1 Europe 2 Africa 5 Caribbean 6 South America 7 Eurasia 8 Oceania 17 North America Name: continent, dtype: object3. 找出非洲(Africa)的GDP總和。mysql1%sql SELECT SUM(gdp) FROM world WHERE continent='Africa'; * mysql+pymysql://root:***@localhost/dbs 1 rows affected. SUM(gdp) 1811788000000 pandas1world[world.continent == \"Africa\"].gdp.sum() 1811788000000.04. 有多少個國家具有至少百萬(1000000)的面積。mysql1%sql SELECT COUNT(1) FROM world WHERE area &gt; 1000000 * mysql+pymysql://root:***@localhost/dbs 1 rows affected. COUNT(1) 29 pandas1world[world.area &gt; 1000000].name.count() 295. (‘France’,’Germany’,’Spain’)（“法國”，“德國”，“西班牙”）的總人口是多少？mysql1%sql SELECT SUM(population) FROM world WHERE name IN ('France', 'Germany', 'Spain'); * mysql+pymysql://root:***@localhost/dbs 1 rows affected. SUM(population) 193231700 pandas1world[world.name.isin(['France', 'Germany', 'Spain'])].population.sum() 193231700 示範: 使用 GROUP BY 和 HAVING. 6. 對於每一個洲份，顯示洲份和國家的數量。msyql1%sql SELECT continent, COUNT(name) FROM world GROUP BY continent * mysql+pymysql://root:***@localhost/dbs 8 rows affected. continent COUNT(name) Africa 53 Asia 47 Caribbean 11 Eurasia 2 Europe 44 North America 11 Oceania 14 South America 13 pandas12# 方法一world.groupby(\"continent\").name.count() continent Africa 53 Asia 47 Caribbean 11 Eurasia 2 Europe 44 North America 11 Oceania 14 South America 13 Name: name, dtype: int6412# 方法二world.groupby(\"continent\").size() continent Africa 53 Asia 47 Caribbean 11 Eurasia 2 Europe 44 North America 11 Oceania 14 South America 13 dtype: int6412# 方法三world.continent.value_counts() Africa 53 Asia 47 Europe 44 Oceania 14 South America 13 North America 11 Caribbean 11 Eurasia 2 Name: continent, dtype: int647. 對於每一個洲份，顯示洲份和至少有1000萬人(10,000,000)口國家的數目。mysql1%sql SELECT continent, COUNT(name) FROM world WHERE population &gt;= 10000000 GROUP BY continent; * mysql+pymysql://root:***@localhost/dbs 8 rows affected. continent COUNT(name) Africa 29 Asia 26 Caribbean 2 Eurasia 1 Europe 14 North America 4 Oceania 1 South America 8 pandas1world[world.population &gt;= 10000000][\"continent\"].value_counts() Africa 29 Asia 26 Europe 14 South America 8 North America 4 Caribbean 2 Oceania 1 Eurasia 1 Name: continent, dtype: int648. 列出有至少100百萬(1億)(100,000,000)人口的洲份。mysql1%sql SELECT continent FROM world GROUP BY continent HAVING SUM(population) &gt;= 100000000; * mysql+pymysql://root:***@localhost/dbs 6 rows affected. continent Africa Asia Eurasia Europe North America South America pandas方法一1world.groupby(\"continent\").agg({\"population\": lambda x: sum(x) &gt;= 100000000}) # 这里可以看到哪些符合条件，哪些不符合 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } population continent Africa True Asia True Caribbean False Eurasia True Europe True North America True Oceania False South America True 12# 对上面的语句加了query()起到过滤的作用world.groupby(\"continent\").agg({\"population\": lambda x: sum(x) &gt;= 100000000}).query(\"population == True\") .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } population continent Africa True Asia True Eurasia True Europe True North America True South America True 12345# 最终的结果：world.groupby(\"continent\")\\ .agg({\"population\": lambda x: sum(x) &gt;= 100000000})\\ .query(\"population == True\")\\ .index.values array([&apos;Africa&apos;, &apos;Asia&apos;, &apos;Eurasia&apos;, &apos;Europe&apos;, &apos;North America&apos;, &apos;South America&apos;], dtype=object)方法二12# 使用groupby() 和 filter()的组合得到的是符合条件的各项源数据，还须对其进行唯一过滤。world.groupby(\"continent\").filter(lambda x: x[\"population\"].sum() &gt;= 100000000).head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name continent area population gdp capital tld flag 0 Afghanistan Asia 652230 25500100 2.036400e+10 Kabul .af //upload.wikimedia.org/wikipedia/commons/9/9a/... 1 Albania Europe 28748 2821977 1.204400e+10 Tirana .al //upload.wikimedia.org/wikipedia/commons/3/36/... 2 Algeria Africa 2381741 38700000 2.070210e+11 Algiers .dz //upload.wikimedia.org/wikipedia/commons/7/77/... 3 Andorra Europe 468 76098 3.222000e+09 Andorra la Vella .ad //upload.wikimedia.org/wikipedia/commons/1/19/... 4 Angola Africa 1246700 19183590 1.163080e+11 Luanda .ao //upload.wikimedia.org/wikipedia/commons/9/9d/... 1world.groupby(\"continent\").filter(lambda x: x[\"population\"].sum() &gt;= 100000000)[\"continent\"].unique() array([&apos;Asia&apos;, &apos;Europe&apos;, &apos;Africa&apos;, &apos;South America&apos;, &apos;Eurasia&apos;, &apos;North America&apos;], dtype=object)","link":"/2019/09/24/mysql%E4%B8%8Epandas%E5%AF%B9%E7%85%A7%E5%AD%A6%E4%B9%A0-5/"},{"title":"mysql与pandas对照学习(6)","text":"The JOIN operation/zhThe JOIN operation/zh game(賽事) id(編號) mdate(日期) stadium(場館) team1(隊伍1) team2(隊伍2) 1001 8 June 2012 National Stadium, Warsaw POL GRE 1002 8 June 2012 Stadion Miejski (Wroclaw) RUS CZE 1003 12 June 2012 Stadion Miejski (Wroclaw) GRE CZE 1004 12 June 2012 National Stadium, Warsaw POL RUS … goal(入球) matchid(賽事編號) teamid(隊伍編號) player(入球球員) gtime(入球時間) 1001 POL Robert Lewandowski 17 1001 GRE Dimitris Salpingidis 51 1002 RUS Alan Dzagoev 15 1001 RUS Roman Pavlyuchenko 82 … eteam(歐洲隊伍) id(編號) teamname(隊名) coach(教練) POL Poland Franciszek Smuda RUS Russia Dick Advocaat CZE Czech Republic Michal Bilek GRE Greece Fernando Santos … 合拼表格-- 歐洲國家盃 UEFA EURO 2012此教程是介召 JOIN的使用，讓你合拼2個或更多的表格。數據庫的表格貯存了在波蘭 Poland 和烏克欄 Ukraine的歐洲國家盃2012的賽事和入球資料。 123456789%load_ext sql%sql mysql+pymysql://root:lanhoo@localhost/dbsimport pandas as pdimport numpy as npimport sqlalchemyengine = sqlalchemy.create_engine(\"mysql+pymysql://root:lanhoo@localhost/dbs\")game = pd.read_sql_table(\"game\", engine)goal = pd.read_sql_table(\"goal\", engine)eteam = pd.read_sql_table(\"eteam\", engine) The sql extension is already loaded. To reload it, use: %reload_ext sql1.第一個例子列出球員姓氏為’Bender’的入球數據。 * 表示列出表格的全部欄位，簡化了寫matchid, teamid, player, gtime語句。 修改此SQL以列出 賽事編號matchid 和球員名 player ,該球員代表德國隊Germany入球的。要找出德國隊球員，要檢查: teamid = 'GER' mysql1%sql SELECT matchid, player FROM goal WHERE teamid = 'GER' * mysql+pymysql://root:***@localhost/dbs 10 rows affected. matchid player 1008 Mario Gómez 1010 Mario Gómez 1010 Mario Gómez 1012 Lukas Podolski 1012 Lars Bender 1026 Philipp Lahm 1026 Sami Khedira 1026 Miroslav Klose 1026 Marco Reus 1030 Mesut Özil pandas1goal.query(\" teamid == 'GER'\")[[\"matchid\", \"player\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } matchid player 15 1008 Mario Gómez 22 1010 Mario Gómez 23 1010 Mario Gómez 28 1012 Lukas Podolski 29 1012 Lars Bender 61 1026 Philipp Lahm 62 1026 Sami Khedira 63 1026 Miroslav Klose 64 1026 Marco Reus 69 1030 Mesut Özil 2.由以上查詢，你可見Lars Bender’s 於賽事 1012入球。.現在我們想知道此賽事的對賽隊伍是哪一隊。 留意在 goal 表格中的欄位 matchid ，是對應表格game的欄位id。我們可以在表格 game中找出賽事1012的資料。 只顯示賽事1012的 id, stadium, team1, team2 mysql1%sql SELECT id,stadium,team1,team2 FROM game WHERE id = 1012 * mysql+pymysql://root:***@localhost/dbs 1 rows affected. id stadium team1 team2 1012 Arena Lviv DEN GER 3.顯示每一個德國入球的球員名，隊伍名，場館和日期。我們可以利用JOIN來同時進行以上兩個步驟。 12SELECT * FROM game JOIN goal ON (id=matchid) 語句FROM 表示合拼兩個表格game 和 goal的數據。語句 ON 表示如何找出 game中每一列應該配對goal中的哪一列 -- goal的 id 必須配對game的 matchid 。 簡單來說，就是 ON (game.id=goal.matchid) 以下SQL列出每個入球的球員(來自goal表格)和場館名(來自game表格) 修改它來顯示每一個德國入球的球員名，隊伍名，場館和日期。 mysql12%sql SELECT player,teamid,stadium,mdate \\ FROM game JOIN goal ON (game.id=goal.matchid) WHERE teamid='GER' * mysql+pymysql://root:***@localhost/dbs 10 rows affected. player teamid stadium mdate Mario Gómez GER Arena Lviv 9 June 2012 Mario Gómez GER Metalist Stadium 13 June 2012 Mario Gómez GER Metalist Stadium 13 June 2012 Lukas Podolski GER Arena Lviv 17 June 2012 Lars Bender GER Arena Lviv 17 June 2012 Philipp Lahm GER PGE Arena Gdansk 22 June 2012 Sami Khedira GER PGE Arena Gdansk 22 June 2012 Miroslav Klose GER PGE Arena Gdansk 22 June 2012 Marco Reus GER PGE Arena Gdansk 22 June 2012 Mesut Özil GER National Stadium, Warsaw 28 June 2012 pandas123# 使用merge达到mysql里join的效果game.merge(goal, left_on=\"id\", right_on=\"matchid\")[[\"player\", \"teamid\", \"stadium\", \"mdate\"]]\\ .query(\"teamid == 'GER'\") .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } player teamid stadium mdate 15 Mario Gómez GER Arena Lviv 9 June 2012 22 Mario Gómez GER Metalist Stadium 13 June 2012 23 Mario Gómez GER Metalist Stadium 13 June 2012 28 Lukas Podolski GER Arena Lviv 17 June 2012 29 Lars Bender GER Arena Lviv 17 June 2012 61 Philipp Lahm GER PGE Arena Gdansk 22 June 2012 62 Sami Khedira GER PGE Arena Gdansk 22 June 2012 63 Miroslav Klose GER PGE Arena Gdansk 22 June 2012 64 Marco Reus GER PGE Arena Gdansk 22 June 2012 69 Mesut Özil GER National Stadium, Warsaw 28 June 2012 4.使用上題相同的 JOIN語句，列出球員名字叫Mario (player LIKE 'Mario%')有入球的 隊伍1 team1, 隊伍2 team2 和 球員名 player mysql1%sql SELECT team1, team2, player FROM goal JOIN game ON matchid = id WHERE player LIKE 'Mario%' * mysql+pymysql://root:***@localhost/dbs 9 rows affected. team1 team2 player GER POR Mario Gómez NED GER Mario Gómez NED GER Mario Gómez IRL CRO Mario Mandžukic IRL CRO Mario Mandžukic ITA CRO Mario Mandžukic ITA IRL Mario Balotelli GER ITA Mario Balotelli GER ITA Mario Balotelli pandas12temp = game.merge(goal, left_on=\"id\", right_on=\"matchid\")[[\"team1\", \"team2\", \"player\"]]temp[temp.player.str.startswith(\"Mario\")] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } team1 team2 player 15 GER POR Mario Gómez 22 NED GER Mario Gómez 23 NED GER Mario Gómez 33 IRL CRO Mario Mandžukic 34 IRL CRO Mario Mandžukic 37 ITA CRO Mario Mandžukic 44 ITA IRL Mario Balotelli 70 GER ITA Mario Balotelli 71 GER ITA Mario Balotelli 5.表格eteam 貯存了每一國家隊的資料，包括教練。你可以使用語句 goal JOIN eteam on teamid=id來合拼 JOIN 表格goal 到 表格eteam。 列出每場球賽中首10分鐘gtime&lt;=10有入球的球員 player, 隊伍teamid, 教練coach, 入球時間gtime mysql12%sql SELECT player, teamid, coach, gtime FROM goal \\JOIN eteam ON teamid=id WHERE gtime&lt;=10 * mysql+pymysql://root:***@localhost/dbs 4 rows affected. player teamid coach gtime Petr Jirácek CZE Michal Bílek 3 Václav Pilar CZE Michal Bílek 6 Mario Mandžukic CRO Slaven Bilic 3 Fernando Torres ESP Vicente del Bosque 4 pandas12eteam.merge(goal, left_on=\"id\", right_on=\"teamid\")\\ [[\"player\", \"teamid\", \"coach\", \"gtime\"]].query(\"gtime &lt;= 10\") .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } player teamid coach gtime 8 Petr Jirácek CZE Michal Bílek 3 9 Václav Pilar CZE Michal Bílek 6 39 Fernando Torres ESP Vicente del Bosque 4 57 Mario Mandžukic CRO Slaven Bilic 3 6.要合拼JOIN 表格game 和表格 eteam，你可以使用 game JOIN eteam ON (team1=eteam.id) 或 game JOIN eteam ON (team2=eteam.id) 注意欄位id同時是表格game 和表格 eteam的欄位，你要清楚指出eteam.id而不是只用id 列出’Fernando Santos’作為隊伍1 team1 的教練的賽事日期，和隊伍名。 mysql123%sql SELECT mdate, teamname FROM game JOIN eteam \\ON team1=eteam.id \\WHERE coach = 'Fernando Santos' * mysql+pymysql://root:***@localhost/dbs 2 rows affected. mdate teamname 12 June 2012 Greece 16 June 2012 Greece pandas12game.merge(eteam, left_on=\"team1\", right_on=\"id\")\\ .query(\"coach == 'Fernando Santos'\")[[\"mdate\", \"teamname\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } mdate teamname 3 12 June 2012 Greece 4 16 June 2012 Greece 7.列出場館 ‘National Stadium, Warsaw’的入球球員。 mysql12%sql SELECT player FROM goal JOIN game ON matchid = id \\WHERE stadium = 'National Stadium, Warsaw'; * mysql+pymysql://root:***@localhost/dbs 9 rows affected. player Robert Lewandowski Dimitris Salpingidis Alan Dzagoev Jakub Blaszczykowski Giorgos Karagounis Cristiano Ronaldo Mario Balotelli Mario Balotelli Mesut Özil pandas12goal.merge(game, left_on=\"matchid\", right_on=\"id\")\\ .query(\"stadium == 'National Stadium, Warsaw'\")[[\"player\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } player 0 Robert Lewandowski 1 Dimitris Salpingidis 10 Jakub Blaszczykowski 11 Alan Dzagoev 13 Giorgos Karagounis 60 Cristiano Ronaldo 69 Mesut Özil 70 Mario Balotelli 71 Mario Balotelli 更困難的題目8.以下例子找出德國-希臘Germany-Greece 的八強賽事的入球 例子 123SELECT player, gtime FROM game JOIN goal ON matchid = id WHERE (team1=&apos;GER&apos; AND team2=&apos;GRE&apos;) 修改它，只列出全部賽事，射入德國龍門的球員名字。 HINT 找非德國球員的入球，德國可以在賽事中作team1 隊伍１（主）或team2隊伍２（客）。 你可以用 teamid!='GER' 來防止列出德國球員。 你可以用 DISTINCT來防止球員出現兩次以上。 mysql123%sql SELECT DISTINCT player FROM game \\ JOIN goal ON matchid = id \\ WHERE ((team1='GER' OR team2='GER') AND teamid &lt;&gt; 'GER') * mysql+pymysql://root:***@localhost/dbs 5 rows affected. player Robin van Persie Michael Krohn-Dehli Georgios Samaras Dimitris Salpingidis Mario Balotelli pandas123game.merge(goal, left_on=\"id\", right_on=\"matchid\")\\ .query(\"(team1 == 'GER' or team2=='GER') and teamid != 'GER'\")\\ [[\"player\"]].drop_duplicates() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } player 21 Robin van Persie 27 Michael Krohn-Dehli 65 Georgios Samaras 66 Dimitris Salpingidis 70 Mario Balotelli 9.列出隊伍名稱 teamname 和該隊入球總數 COUNT and GROUP BY 你應該在SELECT語句中使用COUNT(*)和使用GROUP BY teamname mysql12%sql SELECT teamname, COUNT(player) \\ FROM eteam JOIN goal ON id=teamid GROUP BY teamname * mysql+pymysql://root:***@localhost/dbs 16 rows affected. teamname COUNT(player) Croatia 4 Czech Republic 4 Denmark 4 England 5 France 3 Germany 10 Greece 5 Italy 6 Netherlands 2 Poland 2 Portugal 6 Republic of Ireland 1 Russia 5 Spain 12 Sweden 5 Ukraine 2 pandas1eteam.merge(goal, left_on=\"id\", right_on=\"teamid\").groupby(\"teamname\").size() teamname Croatia 4 Czech Republic 4 Denmark 4 England 5 France 3 Germany 10 Greece 5 Italy 6 Netherlands 2 Poland 2 Portugal 6 Republic of Ireland 1 Russia 5 Spain 12 Sweden 5 Ukraine 2 dtype: int6410.列出場館名和在該場館的入球數字。 mysql12%sql SELECT stadium, COUNT(player) FROM \\ game JOIN goal ON id = matchid GROUP BY stadium * mysql+pymysql://root:***@localhost/dbs 8 rows affected. stadium COUNT(player) Arena Lviv 9 Donbass Arena 7 Metalist Stadium 7 National Stadium, Warsaw 9 Olimpiyskiy National Sports Complex 14 PGE Arena Gdansk 13 Stadion Miejski (Poznan) 8 Stadion Miejski (Wroclaw) 9 pandas1game.merge(goal, left_on=\"id\", right_on=\"matchid\").groupby(\"stadium\").size() stadium Arena Lviv 9 Donbass Arena 7 Metalist Stadium 7 National Stadium, Warsaw 9 Olimpiyskiy National Sports Complex 14 PGE Arena Gdansk 13 Stadion Miejski (Poznan) 8 Stadion Miejski (Wroclaw) 9 dtype: int6411.每一場波蘭’POL’有參與的賽事中，列出賽事編號 matchid, 日期date 和入球數字。 mysql方法一 使用 group_concat() 可以对分组后的元素进行拼接。前面再加上 distinct 可以对唯一的字符串去重 1234%sql SELECT matchid, group_concat(distinct mdate), count(teamid) \\ FROM game JOIN goal ON matchid = id \\ WHERE (team1 = 'POL' OR team2 = 'POL') \\ GROUP BY matchid * mysql+pymysql://root:***@localhost/dbs 3 rows affected. matchid group_concat(distinct mdate) count(teamid) 1001 8 June 2012 2 1004 12 June 2012 2 1005 16 June 2012 1 方法二1234%sql SELECT matchid, mdate, count(teamid) \\ FROM game JOIN goal ON matchid = id \\ WHERE (team1 = 'POL' OR team2 = 'POL') \\ GROUP BY matchid, mdate * mysql+pymysql://root:***@localhost/dbs 3 rows affected. matchid mdate count(teamid) 1001 8 June 2012 2 1004 12 June 2012 2 1005 16 June 2012 1 pandas1234game.merge(goal, left_on=\"id\", right_on=\"matchid\")\\ .query(\"team1 == 'POL' or team2 == 'POL'\")\\ .groupby([\"matchid\", \"mdate\"])\\ .agg({\"teamid\": \"count\"}) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } teamid matchid mdate 1001 8 June 2012 2 1004 12 June 2012 2 1005 16 June 2012 1 12.每一場德國’GER’有參與的賽事中，列出賽事編號 matchid, 日期date 和德國的入球數字。 mysql1234%sql SELECT matchid, mdate, COUNT(1) \\ FROM game JOIN goal ON matchid = id \\ WHERE (team1 = 'GER' OR team2 = 'GER') AND teamid = 'GER' \\ GROUP BY matchid, mdate * mysql+pymysql://root:***@localhost/dbs 5 rows affected. matchid mdate COUNT(1) 1008 9 June 2012 1 1010 13 June 2012 2 1012 17 June 2012 2 1026 22 June 2012 4 1030 28 June 2012 1 pandas1234game.merge(goal, left_on=\"id\", right_on=\"matchid\")\\ .query(\"(team1 == 'GER' or team2 == 'GER') and teamid == 'GER'\")\\ .groupby([\"matchid\", \"mdate\"])\\ .agg({\"matchid\":\"count\"}) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } matchid matchid mdate 1008 9 June 2012 1 1010 13 June 2012 2 1012 17 June 2012 2 1026 22 June 2012 4 1030 28 June 2012 1 13.List every match with the goals scored by each team as shown. This will use “CASE WHEN“ which has not been explained in any previous exercises. mdate team1 score1 team2 score2 1 July 2012 ESP 4 ITA 0 10 June 2012 ESP 1 ITA 1 10 June 2012 IRL 1 CRO 3 … Notice in the query given every goal is listed. If it was a team1 goal then a 1 appears in score1, otherwise there is a 0. You could SUM this column to get a count of the goals scored by team1. Sort your result by mdate, matchid, team1 and team2. mysql12345678%sql SELECT mdate,\\ team1,\\ SUM(CASE WHEN teamid = team1 THEN 1 ELSE 0 END) AS score1,\\ team2,\\ SUM(CASE WHEN teamid = team2 THEN 1 ELSE 0 END) AS score2 FROM \\ game LEFT JOIN goal ON (id = matchid) \\ GROUP BY mdate,team1,team2 \\ ORDER BY mdate, matchid, team1, team2 * mysql+pymysql://root:***@localhost/dbs 31 rows affected. mdate team1 score1 team2 score2 1 July 2012 ESP 4 ITA 0 10 June 2012 ESP 1 ITA 1 10 June 2012 IRL 1 CRO 3 11 June 2012 FRA 1 ENG 1 11 June 2012 UKR 2 SWE 1 12 June 2012 GRE 1 CZE 2 12 June 2012 POL 1 RUS 1 13 June 2012 DEN 2 POR 3 13 June 2012 NED 1 GER 2 14 June 2012 ITA 1 CRO 1 14 June 2012 ESP 4 IRL 0 15 June 2012 UKR 0 FRA 2 15 June 2012 SWE 2 ENG 3 16 June 2012 CZE 1 POL 0 16 June 2012 GRE 1 RUS 0 17 June 2012 POR 2 NED 1 17 June 2012 DEN 1 GER 2 18 June 2012 CRO 0 ESP 1 18 June 2012 ITA 2 IRL 0 19 June 2012 ENG 1 UKR 0 19 June 2012 SWE 2 FRA 0 21 June 2012 CZE 0 POR 1 22 June 2012 GER 4 GRE 2 23 June 2012 ESP 2 FRA 0 24 June 2012 ENG 0 ITA 0 27 June 2012 POR 0 ESP 0 28 June 2012 GER 1 ITA 2 8 June 2012 POL 1 GRE 1 8 June 2012 RUS 4 CZE 1 9 June 2012 NED 0 DEN 1 9 June 2012 GER 1 POR 0 pandas使用merge()12m1 = game.merge(goal, left_on=\"id\", right_on=\"matchid\")m1.info() &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; Int64Index: 76 entries, 0 to 75 Data columns (total 9 columns): id 76 non-null int64 mdate 76 non-null object stadium 76 non-null object team1 76 non-null object team2 76 non-null object matchid 76 non-null int64 teamid 76 non-null object player 76 non-null object gtime 76 non-null int64 dtypes: int64(3), object(6) memory usage: 5.9+ KB123# 使用np.where()达到三元运算的效果m1[\"score1\"] = np.where(m1.team1 == m1.teamid, 1, 0)m1[\"score2\"] = np.where(m1.team2 == m1.teamid, 1, 0) 1m1.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } id mdate stadium team1 team2 matchid teamid player gtime score1 score2 0 1001 8 June 2012 National Stadium, Warsaw POL GRE 1001 POL Robert Lewandowski 17 1 0 1 1001 8 June 2012 National Stadium, Warsaw POL GRE 1001 GRE Dimitris Salpingidis 51 0 1 2 1002 8 June 2012 Stadion Miejski (Wroclaw) RUS CZE 1002 RUS Alan Dzagoev 15 1 0 3 1002 8 June 2012 Stadion Miejski (Wroclaw) RUS CZE 1002 RUS Alan Dzagoev 79 1 0 4 1002 8 June 2012 Stadion Miejski (Wroclaw) RUS CZE 1002 RUS Roman Shirokov 24 1 0 1m1.groupby([\"mdate\", \"team1\", \"team2\"]).agg({\"score1\":sum, \"score2\": sum}).reset_index() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } mdate team1 team2 score1 score2 0 1 July 2012 ESP ITA 4 0 1 10 June 2012 ESP ITA 1 1 2 10 June 2012 IRL CRO 1 3 3 11 June 2012 FRA ENG 1 1 4 11 June 2012 UKR SWE 2 1 5 12 June 2012 GRE CZE 1 2 6 12 June 2012 POL RUS 1 1 7 13 June 2012 DEN POR 2 3 8 13 June 2012 NED GER 1 2 9 14 June 2012 ESP IRL 4 0 10 14 June 2012 ITA CRO 1 1 11 15 June 2012 SWE ENG 2 3 12 15 June 2012 UKR FRA 0 2 13 16 June 2012 CZE POL 1 0 14 16 June 2012 GRE RUS 1 0 15 17 June 2012 DEN GER 1 2 16 17 June 2012 POR NED 2 1 17 18 June 2012 CRO ESP 0 1 18 18 June 2012 ITA IRL 2 0 19 19 June 2012 ENG UKR 1 0 20 19 June 2012 SWE FRA 2 0 21 21 June 2012 CZE POR 0 1 22 22 June 2012 GER GRE 4 2 23 23 June 2012 ESP FRA 2 0 24 28 June 2012 GER ITA 1 2 25 8 June 2012 POL GRE 1 1 26 8 June 2012 RUS CZE 4 1 27 9 June 2012 GER POR 1 0 28 9 June 2012 NED DEN 0 1 注意上面的求解并非左连接，有数据的缺失,需要加上参数how=&quot;left&quot; 1m2 = game.merge(goal, left_on=\"id\", right_on=\"matchid\", how=\"left\") 1m2.info() &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; Int64Index: 78 entries, 0 to 77 Data columns (total 9 columns): id 78 non-null int64 mdate 78 non-null object stadium 78 non-null object team1 78 non-null object team2 78 non-null object matchid 76 non-null float64 teamid 76 non-null object player 76 non-null object gtime 76 non-null float64 dtypes: float64(2), int64(1), object(6) memory usage: 6.1+ KB12m2[\"score1\"] = np.where(m2.team1 == m2.teamid, 1, 0)m2[\"score2\"] = np.where(m2.team2 == m2.teamid, 1, 0) 1m2.groupby([\"mdate\", \"team1\", \"team2\"]).agg({\"score1\":sum, \"score2\": sum}).reset_index() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } mdate team1 team2 score1 score2 0 1 July 2012 ESP ITA 4 0 1 10 June 2012 ESP ITA 1 1 2 10 June 2012 IRL CRO 1 3 3 11 June 2012 FRA ENG 1 1 4 11 June 2012 UKR SWE 2 1 5 12 June 2012 GRE CZE 1 2 6 12 June 2012 POL RUS 1 1 7 13 June 2012 DEN POR 2 3 8 13 June 2012 NED GER 1 2 9 14 June 2012 ESP IRL 4 0 10 14 June 2012 ITA CRO 1 1 11 15 June 2012 SWE ENG 2 3 12 15 June 2012 UKR FRA 0 2 13 16 June 2012 CZE POL 1 0 14 16 June 2012 GRE RUS 1 0 15 17 June 2012 DEN GER 1 2 16 17 June 2012 POR NED 2 1 17 18 June 2012 CRO ESP 0 1 18 18 June 2012 ITA IRL 2 0 19 19 June 2012 ENG UKR 1 0 20 19 June 2012 SWE FRA 2 0 21 21 June 2012 CZE POR 0 1 22 22 June 2012 GER GRE 4 2 23 23 June 2012 ESP FRA 2 0 24 24 June 2012 ENG ITA 0 0 25 27 June 2012 POR ESP 0 0 26 28 June 2012 GER ITA 1 2 27 8 June 2012 POL GRE 1 1 28 8 June 2012 RUS CZE 4 1 29 9 June 2012 GER POR 1 0 30 9 June 2012 NED DEN 0 1 第13题里merge()默认的连接方式为how=&quot;inner&quot;，要改为&quot;left&quot;才是正确的答案","link":"/2019/09/25/mysql%E4%B8%8Epandas%E5%AF%B9%E7%85%A7%E5%AD%A6%E4%B9%A0-6/"},{"title":"mysql与pandas对照学习(8)","text":"Using NullUsing Null id dept name phone mobile 101 1 Shrivell 2753 07986 555 1234 102 1 Throd 2754 07122 555 1920 103 1 Splint 2293 104 Spiregrain 3287 105 2 Cutflower 3212 07996 555 6574 106 Deadyawn 3345 … id name 1 Computing 2 Design 3 Engineering … Teachers and DepartmentsThe school includes many departments. Most teachers work exclusively for a single department. Some teachers have no department.Selecting NULL values. 12345678%load_ext sql%sql mysql+pymysql://root:lanhoo@localhost/dbsimport pandas as pdimport numpy as npimport sqlalchemyengine = sqlalchemy.create_engine(\"mysql+pymysql://root:lanhoo@localhost/dbs\")teacher = pd.read_sql_table(\"teacher\", engine)dept = pd.read_sql_table(\"dept\", engine) 1.List the teachers who have NULL for their department.Why we cannot use = You might think that the phrase dept=NULL would work here but it doesn’t - you can use the phrase dept IS NULL That’s not a proper explanation. No it’s not, but you can read a better explanation at Wikipedia:NULL. mysql1%sql select name from teacher where dept IS NULL * mysql+pymysql://root:***@localhost/dbs 2 rows affected. name Spiregrain Deadyawn pandas1teacher[teacher.dept.isnull()][[\"name\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name 3 Spiregrain 5 Deadyawn 2. Note the INNER JOIN misses the teachers with no department and the departments with no teacher.mysql12%sql SELECT teacher.name t_name, dept.name d_name\\ FROM teacher INNER JOIN dept ON (teacher.dept=dept.id) * mysql+pymysql://root:***@localhost/dbs 4 rows affected. t_name d_name Shrivell Computing Throd Computing Splint Computing Cutflower Design pandas1teacher.merge(dept, left_on=\"dept\", right_on=\"id\")[[\"name_x\", \"name_y\"]] # pandas会自动给重名的加上后缀_x, _y .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name_x name_y 0 Shrivell Computing 1 Throd Computing 2 Splint Computing 3 Cutflower Design 1temp = teacher.merge(dept, left_on=\"dept\", right_on=\"id\")[[\"name_x\", \"name_y\"]] 1temp.columns = [\"t_name\", \"d_name\"] 1temp .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } t_name d_name 0 Shrivell Computing 1 Throd Computing 2 Splint Computing 3 Cutflower Design 3. Use a different JOIN so that all teachers are listed.mysql12%sql select teacher.name, dept.name from teacher left join dept \\ on (teacher.dept = dept.id) * mysql+pymysql://root:***@localhost/dbs 6 rows affected. name name_1 Shrivell Computing Throd Computing Splint Computing Cutflower Design Spiregrain None Deadyawn None pandas1teacher.merge(dept, left_on=\"dept\", right_on=\"id\", how=\"left\")[[\"name_x\", \"name_y\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name_x name_y 0 Shrivell Computing 1 Throd Computing 2 Splint Computing 3 Spiregrain NaN 4 Cutflower Design 5 Deadyawn NaN 4. Use a different JOIN so that all departments are listed.mysql12%sql select teacher.name, dept.name from teacher right join dept \\ on (teacher.dept = dept.id) * mysql+pymysql://root:***@localhost/dbs 5 rows affected. name name_1 Shrivell Computing Throd Computing Splint Computing Cutflower Design None Engineering pandas1teacher.merge(dept, left_on=\"dept\", right_on=\"id\", how=\"right\")[[\"name_x\", \"name_y\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name_x name_y 0 Shrivell Computing 1 Throd Computing 2 Splint Computing 3 Cutflower Design 4 NaN Engineering Using the COALESCE function 5.Use COALESCE to print the mobile number. Use the number ‘07986 444 2266’ if there is no number given. Show teacher name and mobile number or ‘07986 444 2266’ 1%sql select name, COALESCE(mobile, '07986 444 2266') from teacher * mysql+pymysql://root:***@localhost/dbs 6 rows affected. name COALESCE(mobile, '07986 444 2266') Shrivell 07986 555 1234 Throd 07122 555 1920 Splint 07986 444 2266 Spiregrain 07986 444 2266 Cutflower 07996 555 6574 Deadyawn 07986 444 2266 pandas1teacher[[\"name\", \"mobile\"]].fillna(\"07986 444 2266\") # 使用DataFrame.fillna()方法可以填充空值 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name mobile 0 Shrivell 07986 555 1234 1 Throd 07122 555 1920 2 Splint 07986 444 2266 3 Spiregrain 07986 444 2266 4 Cutflower 07996 555 6574 5 Deadyawn 07986 444 2266 6.Use the COALESCE function and a LEFT JOIN to print the teacher name and department name. Use the string ‘None’ where there is no department. mysql12%sql SELECT teacher.name, COALESCE(dept.name, 'None') \\FROM teacher LEFT JOIN dept ON (teacher.dept = dept.id) * mysql+pymysql://root:***@localhost/dbs 6 rows affected. name COALESCE(dept.name, 'None') Shrivell Computing Throd Computing Splint Computing Cutflower Design Spiregrain None Deadyawn None pandas1teacher.merge(dept, left_on=\"dept\", right_on=\"id\", how=\"left\")[[\"name_x\", \"name_y\"]].fillna(\"None\") .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name_x name_y 0 Shrivell Computing 1 Throd Computing 2 Splint Computing 3 Spiregrain None 4 Cutflower Design 5 Deadyawn None 7.Use COUNT to show the number of teachers and the number of mobile phones. mysql1%sql select count(name), count(mobile) from teacher * mysql+pymysql://root:***@localhost/dbs 1 rows affected. count(name) count(mobile) 6 3 pandas1teacher[[\"name\", \"mobile\"]].count() name 6 mobile 3 dtype: int64mysql的COUNT()跟pandas的count()都是对非空值进行计数8.Use COUNT and GROUP BY dept.name to show each department and the number of staff. Use a RIGHT JOIN to ensure that the Engineering department is listed. mysql12%sql select dept.name, count(teacher.id) from teacher right join dept \\on teacher.dept = dept.id group by dept.name * mysql+pymysql://root:***@localhost/dbs 3 rows affected. name count(teacher.id) Computing 3 Design 1 Engineering 0 pandas12# 后缀\"_x\"是代表teacher表，\"_y\"是代表dept表teacher.merge(dept, left_on=\"dept\", right_on=\"id\", how=\"right\").groupby(\"name_y\")[[\"id_x\"]].count() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } id_x name_y Computing 3 Design 1 Engineering 0 Using CASE 9.Use CASE to show the name of each teacher followed by ‘Sci’ if the teacher is in dept 1 or 2 and ‘Art’ otherwise. mysql1234%sql select teacher.name, \\ case when (teacher.dept = 1 or teacher.dept = 2) then 'Sci' \\ else 'Art' end \\ from teacher * mysql+pymysql://root:***@localhost/dbs 6 rows affected. name case when (teacher.dept = 1 or teacher.dept = 2) then 'Sci' else 'Art' end Shrivell Sci Throd Sci Splint Sci Spiregrain Art Cutflower Sci Deadyawn Art pandas1teacher9 = teacher.copy() # 下面要对数据进行新增一列，为了不修改原数据，这里就复制了一份 1teacher9[\"new_dept\"] = np.where((teacher.dept == 1) | (teacher.dept == 2), \"Sci\", \"Art\") # 这里只能用\"|\",而不能用\"or\" 1teacher9[[\"name\", \"new_dept\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name new_dept 0 Shrivell Sci 1 Throd Sci 2 Splint Sci 3 Spiregrain Art 4 Cutflower Sci 5 Deadyawn Art 10.Use CASE to show the name of each teacher followed by ‘Sci’ if the teacher is in dept 1 or 2, show ‘Art’ if the teacher’s dept is 3 and ‘None’ otherwise. mysql123456%sql select teacher.name, \\ case when (teacher.dept = 1 or teacher.dept = 2) then 'Sci' \\ when teacher.dept = 3 then 'Art' \\ else 'None' \\ end as new_dept \\ from teacher * mysql+pymysql://root:***@localhost/dbs 6 rows affected. name new_dept Shrivell Sci Throd Sci Splint Sci Spiregrain None Cutflower Sci Deadyawn None pandas12345678910# 不能np.where()，因为它有三种情况,但可以使用apply()def func(x): if x == 1 or x==2: return \"Sci\" elif x == 3: return \"Art\" else: return \"None\"teacher10 = teacher.copy()teacher10[\"new_dept\"] = teacher.dept.apply(func) 1teacher10[[\"name\", \"new_dept\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name new_dept 0 Shrivell Sci 1 Throd Sci 2 Splint Sci 3 Spiregrain None 4 Cutflower Sci 5 Deadyawn None","link":"/2019/09/27/mysql%E4%B8%8Epandas%E5%AF%B9%E7%85%A7%E5%AD%A6%E4%B9%A0-8/"},{"title":"mysql与pandas对照学习(9)","text":"Self joinSelf join Edinburgh BusesDetails of the database Looking at the data stops(id, name) route(num, company, pos, stop) stops id name route num company pos stop 12345678%load_ext sql%sql mysql+pymysql://root:lanhoo@localhost/dbsimport pandas as pdimport numpy as npimport sqlalchemyengine = sqlalchemy.create_engine(\"mysql+pymysql://root:lanhoo@localhost/dbs\")stops = pd.read_sql_table(\"stops\", engine)route = pd.read_sql_table(\"route\", engine) 1.How many stops are in the database. mysql1%sql SELECT COUNT(id) FROM stops; * mysql+pymysql://root:***@localhost/dbs 1 rows affected. COUNT(id) 246 pandas1stops.id.count() 2462.Find the id value for the stop ‘Craiglockhart’ mysql1%sql SELECT id FROM stops WHERE name = 'Craiglockhart'; * mysql+pymysql://root:***@localhost/dbs 1 rows affected. id 53 pandas1stops.query(\"name == 'Craiglockhart'\")[[\"id\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } id 52 53 3.Give the id and the name for the stops on the ‘4’ ‘LRT’ service. mysql1234%sql select id, name from stops \\where id in (select stop from route where num = '4' and company = 'LRT') # 一开始以为num为整型，写成 num = 4，虽然结果还是出来，mysql里设置了允许类型不匹配。# 后来改成 num = '4',没有那些警告,警告如下图 * mysql+pymysql://root:***@localhost/dbs 9 rows affected. id name 19 Bingham 53 Craiglockhart 85 Fairmilehead 115 Haymarket 117 Hillend 149 London Road 177 Northfield 179 Oxgangs 194 Princes Street pandas12stopids = route.query(\"num == '4' and company == 'LRT'\")[\"stop\"].values # 一开始是写成 num == 4 结果stopids为空stopids array([ 19, 53, 85, 115, 117, 149, 177, 179, 194])1stops[stops.id.isin(stopids)][[\"id\", \"name\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } id name 18 19 Bingham 52 53 Craiglockhart 83 85 Fairmilehead 113 115 Haymarket 115 117 Hillend 145 149 London Road 173 177 Northfield 175 179 Oxgangs 190 194 Princes Street Routes and stops4.The query shown gives the number of routes that visit either London Road (149) or Craiglockhart (53). Run the query and notice the two services that link these stops have a count of 2. Add a HAVING clause to restrict the output to these two routes. 示例 123SELECT company, num, COUNT(*)FROM route WHERE stop=149 OR stop=53GROUP BY company, num mysql123%sql SELECT company, num, COUNT(*) \\FROM route WHERE stop=149 OR stop=53 \\GROUP BY company, num HAVING COUNT(*)=2 * mysql+pymysql://root:***@localhost/dbs 2 rows affected. company num COUNT(*) LRT 4 2 LRT 45 2 pandas12temp = route[(route.stop == 149) | (route.stop == 53)].groupby([\"company\", \"num\"]).count().reset_index()temp .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } company num pos stop 0 LRT 10 1 1 1 LRT 15 1 1 2 LRT 20 1 1 3 LRT 26A 1 1 4 LRT 27 1 1 5 LRT 34 1 1 6 LRT 35 1 1 7 LRT 4 2 2 8 LRT 42 1 1 9 LRT 43 1 1 10 LRT 44 1 1 11 LRT 45 2 2 12 LRT 46A 1 1 13 LRT 47 1 1 14 LRT 5 1 1 15 LRT 51 1 1 16 LRT 63 1 1 17 LRT 65 1 1 18 LRT 75 1 1 19 LRT 87 1 1 20 LRT 87A 1 1 21 SMT 106 1 1 22 SMT 113 1 1 23 SMT 124 1 1 24 SMT 66 1 1 25 SMT 66A 1 1 26 SMT C5 1 1 27 SMT C55 1 1 1temp.query(\"pos == 2\")[[\"company\", \"num\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } company num 7 LRT 4 11 LRT 45 5.Execute the self join shown and observe that b.stop gives all the places you can get to from Craiglockhart, without changing routes. Change the query so that it shows the services from Craiglockhart to London Road. 示例 1234SELECT a.company, a.num, a.stop, b.stopFROM route a JOIN route b ON (a.company=b.company AND a.num=b.num)WHERE a.stop=53 … mysql12345%sql SELECT a.company, a.num, a.stop, b.stop \\FROM route a JOIN route b ON \\ (a.company=b.company AND a.num=b.num) \\WHERE a.stop=53 and b.stop = ( \\select id from stops where name = 'London Road') * mysql+pymysql://root:***@localhost/dbs 2 rows affected. company num stop stop_1 LRT 4 53 149 LRT 45 53 149 pandas12# merge()里的参数left_on不单是单个字段（字符串），也可以是多个字段（列表）route.merge(route, left_on=[\"num\", \"company\"], right_on=[\"num\", \"company\"]).query(\"stop_x == 53 and stop_y == 149\") .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } num company pos_x stop_x pos_y stop_y 3018 4 LRT 6 53 3 149 8680 45 LRT 7 53 4 149 123# 选取所需的列route.merge(route, left_on=[\"num\", \"company\"], right_on=[\"num\", \"company\"]).query(\"stop_x == 53 and stop_y == 149\")\\[[\"num\", \"company\", \"stop_x\", \"stop_y\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } num company stop_x stop_y 3018 4 LRT 53 149 8680 45 LRT 53 149 6.The query shown is similar to the previous one, however by joining two copies of the stops table we can refer to stops by name rather than by number. Change the query so that the services between ‘Craiglockhart’ and ‘London Road’ are shown. If you are tired of these places try ‘Fairmilehead’ against ‘Tollcross’ 示例 123456SELECT a.company, a.num, stopa.name, stopb.nameFROM route a JOIN route b ON (a.company=b.company AND a.num=b.num) JOIN stops stopa ON (a.stop=stopa.id) JOIN stops stopb ON (b.stop=stopb.id)WHERE stopa.name=&apos;Craiglockhart&apos; … mysql123456%sql SELECT a.company, a.num, stopa.name, stopb.name \\FROM route a JOIN route b ON \\ (a.company=b.company AND a.num=b.num) \\ JOIN stops stopa ON (a.stop=stopa.id) \\ JOIN stops stopb ON (b.stop=stopb.id) \\WHERE stopa.name='Craiglockhart' and stopb.name = 'London Road' * mysql+pymysql://root:***@localhost/dbs 2 rows affected. company num name name_1 LRT 4 Craiglockhart London Road LRT 45 Craiglockhart London Road pandas12345route.merge(route, left_on=[\"num\", \"company\"], right_on=[\"num\", \"company\"])\\ .merge(stops, left_on=\"stop_x\", right_on=\"id\")\\ .merge(stops, left_on=\"stop_y\", right_on=\"id\")\\ .query(\"name_x == 'Craiglockhart' and name_y == 'London Road'\")\\ [[\"company\", \"num\", \"name_x\", \"name_y\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } company num name_x name_y 361 LRT 4 Craiglockhart London Road 362 LRT 45 Craiglockhart London Road Using a self join7.Give a list of all the services which connect stops 115 and 137 (‘Haymarket’ and ‘Leith’) mysql123456%sql select DISTINCTROW a.company, a.num \\ # mysql里用了DISTINCTROW来删除重复行from route a join route b on \\(a.company = b.company and a.num = b.num) \\join stops stopa on (a.stop = stopa.id) \\join stops stopb on (b.stop = stopb.id) \\where stopa.name = 'Haymarket' and stopb.name = 'Leith' * mysql+pymysql://root:***@localhost/dbs 6 rows affected. company num LRT 12 LRT 2 LRT 22 LRT 25 LRT 2A SMT C5 pandas12345route.merge(route, left_on=[\"num\", \"company\"], right_on=[\"num\", \"company\"])\\ .merge(stops, left_on=\"stop_x\", right_on=\"id\")\\ .merge(stops, left_on=\"stop_y\", right_on=\"id\")\\ .query(\"name_x == 'Haymarket' and name_y == 'Leith'\")\\ [[\"company\", \"num\"]].drop_duplicates() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } company num 3574 LRT 12 3576 LRT 2 3578 LRT 2A 3580 SMT C5 3581 LRT 22 3582 LRT 25 8.Give a list of the services which connect the stops ‘Craiglockhart’ and ‘Tollcross’ mysql123456%sql SELECT DISTINCTROW a.company, a.num \\FROM route a JOIN route b \\ON (a.company = b.company AND a.num = b.num) \\JOIN stops stopa ON (a.stop = stopa.id) \\JOIN stops stopb ON (b.stop = stopb.id) \\WHERE stopa.name = 'Craiglockhart' AND stopb.name = 'Tollcross' * mysql+pymysql://root:***@localhost/dbs 4 rows affected. company num LRT 10 LRT 27 LRT 45 LRT 47 12345route.merge(route, left_on=[\"num\", \"company\"], right_on=[\"num\", \"company\"])\\ .merge(stops, left_on=\"stop_x\", right_on=\"id\")\\ .merge(stops, left_on=\"stop_y\", right_on=\"id\")\\ .query(\"name_x == 'Craiglockhart' and name_y == 'Tollcross'\")\\ [[\"company\", \"num\"]].drop_duplicates() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } company num 8325 LRT 47 8326 LRT 45 8327 LRT 27 8328 LRT 10 9.Give a distinct list of the stops which may be reached from ‘Craiglockhart’ by taking one bus, including ‘Craiglockhart’ itself, offered by the LRT company. Include the company and bus no. of the relevant services. mysql12345%sql select DISTINCTROW stopb.name, a.company, a.num from route a \\join route b on (a.company = b.company and a.num = b.num) \\join stops stopa on (a.stop = stopa.id) \\join stops stopb on (b.stop = stopb.id) \\where a.company = 'LRT' and stopa.name = 'Craiglockhart' * mysql+pymysql://root:***@localhost/dbs 46 rows affected. name company num Balerno LRT 47 Balerno Church LRT 47 Bingham LRT 4 Brunstane LRT 45 Canonmills LRT 27 Canonmills LRT 47 Cockburn Crescent LRT 47 Colinton LRT 10 Colinton LRT 45 Colinton LRT 47 Craiglockhart LRT 10 Craiglockhart LRT 27 Craiglockhart LRT 4 Craiglockhart LRT 45 Craiglockhart LRT 47 Crewe Toll LRT 27 Currie LRT 45 Currie LRT 47 Duddingston LRT 45 Fairmilehead LRT 4 Hanover Street LRT 27 Hanover Street LRT 45 Hanover Street LRT 47 Haymarket LRT 4 Hillend LRT 4 Hunters Tryst LRT 27 Leith LRT 10 Leith Walk LRT 10 London Road LRT 4 London Road LRT 45 Muirhouse LRT 10 Newhaven LRT 10 Northfield LRT 4 Northfield LRT 45 Oxgangs LRT 27 Oxgangs LRT 4 Princes Street LRT 10 Princes Street LRT 4 Riccarton Campus LRT 45 Silverknowes LRT 10 Silverknowes LRT 27 Tollcross LRT 10 Tollcross LRT 27 Tollcross LRT 45 Tollcross LRT 47 Torphin LRT 10 12345route.merge(route, left_on=[\"num\", \"company\"], right_on=[\"num\", \"company\"])\\ .merge(stops, left_on=\"stop_x\", right_on=\"id\")\\ .merge(stops, left_on=\"stop_y\", right_on=\"id\")\\ .query(\"company == 'LRT' and name_x == 'Craiglockhart'\")\\ [[\"name_y\", \"company\", \"num\"]].drop_duplicates().sort_values(\"name_y\") .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name_y company num 7424 Balerno LRT 47 7462 Balerno Church LRT 47 7850 Bingham LRT 4 6835 Brunstane LRT 45 1812 Canonmills LRT 47 1813 Canonmills LRT 27 7515 Cockburn Crescent LRT 47 8142 Colinton LRT 10 8141 Colinton LRT 45 8140 Colinton LRT 47 7880 Craiglockhart LRT 27 7879 Craiglockhart LRT 45 7878 Craiglockhart LRT 4 7877 Craiglockhart LRT 47 7881 Craiglockhart LRT 10 2074 Crewe Toll LRT 27 7585 Currie LRT 47 7586 Currie LRT 45 8222 Duddingston LRT 45 7936 Fairmilehead LRT 4 1397 Hanover Street LRT 27 1396 Hanover Street LRT 45 1395 Hanover Street LRT 47 6358 Haymarket LRT 4 7995 Hillend LRT 4 11223 Hunters Tryst LRT 27 3641 Leith LRT 10 9148 Leith Walk LRT 10 361 London Road LRT 4 362 London Road LRT 45 10607 Muirhouse LRT 10 5517 Newhaven LRT 10 7331 Northfield LRT 4 7332 Northfield LRT 45 8030 Oxgangs LRT 4 8031 Oxgangs LRT 27 5131 Princes Street LRT 10 5130 Princes Street LRT 4 8257 Riccarton Campus LRT 45 9641 Silverknowes LRT 10 9640 Silverknowes LRT 27 8326 Tollcross LRT 45 8327 Tollcross LRT 27 8325 Tollcross LRT 47 8328 Tollcross LRT 10 11671 Torphin LRT 10 10.Find the routes involving two buses that can go from Craiglockhart to Lochend. Show the bus no. and company for the first bus, the name of the stop for the transfer,and the bus no. and company for the second bus. Hint Self-join twice to find buses that visit Craiglockhart and Lochend, then join those on matching stops. mysql1234567%sql SELECT a.num, a.company, stops.name, c.num, c.company \\from route a join route b on a.company=b.company AND a.num=b.num \\join stops on stops.id=a.stop \\join route c on stops.id=c.stop \\join route d on c.company=d.company AND c.num=d.num \\where b.stop =(select id from stops where name= 'Craiglockhart') \\and d.stop =(select id from stops where name= 'Lochend') * mysql+pymysql://root:***@localhost/dbs 36 rows affected. num company name num_1 company_1 27 LRT Crewe Toll 20 LRT 4 LRT London Road 20 LRT 45 LRT London Road 20 LRT 27 LRT Canonmills 34 LRT 47 LRT Canonmills 34 LRT 10 LRT Leith 34 LRT 4 LRT London Road 34 LRT 45 LRT London Road 34 LRT 27 LRT Canonmills 35 LRT 47 LRT Canonmills 35 LRT 10 LRT Leith 35 LRT 4 LRT London Road 35 LRT 45 LRT London Road 35 LRT 45 LRT Duddingston 42 LRT 4 LRT London Road 42 LRT 45 LRT London Road 42 LRT 45 LRT Duddingston 46A LRT 4 LRT London Road 46A LRT 45 LRT London Road 46A LRT 4 LRT Haymarket 65 LRT 4 LRT London Road 65 LRT 45 LRT London Road 65 LRT 10 LRT Princes Street 65 LRT 4 LRT Princes Street 65 LRT 45 LRT Riccarton Campus 65 LRT 10 LRT Leith 87 LRT 4 LRT London Road 87 LRT 45 LRT London Road 87 LRT 4 LRT London Road 87A LRT 45 LRT London Road 87A LRT 4 LRT Haymarket C5 SMT 10 LRT Leith C5 SMT 4 LRT London Road C5 SMT 45 LRT London Road C5 SMT 10 LRT Princes Street C5 SMT 4 LRT Princes Street C5 SMT 1stops.query(\"name == 'Craiglockhart'\")[\"id\"] 52 53 Name: id, dtype: int641stops.query(\"name == 'Lochend'\")[\"id\"] 143 147 Name: id, dtype: int641234route.merge(route, left_on=[\"num\", \"company\"], right_on=[\"num\", \"company\"])\\ .merge(stops, left_on=\"stop_x\", right_on=\"id\")\\ .merge(route, left_on=\"id\", right_on=\"stop\").head()# 后面还有连接一个\"route\"，尝试过，会出现重复的列名，所以要先对数据更改列名 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } num_x company_x pos_x stop_x pos_y stop_y id name num_y company_y pos stop 0 124 SMT 9 1 9 1 1 Aberlady 124 SMT 9 1 1 124 SMT 9 1 1 39 1 Aberlady 124 SMT 9 1 2 124 SMT 9 1 2 95 1 Aberlady 124 SMT 9 1 3 124 SMT 9 1 4 149 1 Aberlady 124 SMT 9 1 4 124 SMT 9 1 8 151 1 Aberlady 124 SMT 9 1 123m = route.merge(route, left_on=[\"num\", \"company\"], right_on=[\"num\", \"company\"])\\ .merge(stops, left_on=\"stop_x\", right_on=\"id\")\\ .merge(route, left_on=\"id\", right_on=\"stop\") 1m.columns = [\"num_ab\", \"company_ab\", \"pos_a\", \"stop_a\", \"pos_b\", \"stop_b\", \"id\", \"name\", \"num_c\", \"company_c\", \"pos_c\", \"stop_c\"] 123m.merge(route, left_on=[\"company_c\", \"num_c\"], right_on=[\"company\", \"num\"])\\ .query(\"stop_b == 53 and stop == 147\")\\ [[\"num_ab\", \"company_ab\", \"name\", \"num_c\", \"company_c\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } num_ab company_ab name num_c company_c 25175 4 LRT London Road 34 LRT 26030 45 LRT London Road 34 LRT 31595 47 LRT Canonmills 34 LRT 32855 27 LRT Canonmills 34 LRT 44015 10 LRT Leith 34 LRT 54500 4 LRT London Road 35 LRT 55355 45 LRT London Road 35 LRT 60920 47 LRT Canonmills 35 LRT 62180 27 LRT Canonmills 35 LRT 73340 10 LRT Leith 35 LRT 160879 4 LRT London Road 20 LRT 161392 45 LRT London Road 20 LRT 165235 27 LRT Crewe Toll 20 LRT 252608 4 LRT London Road 42 LRT 253178 45 LRT London Road 42 LRT 268008 45 LRT Duddingston 42 LRT 317860 4 LRT London Road 46A LRT 318430 45 LRT London Road 46A LRT 333260 45 LRT Duddingston 46A LRT 367956 4 LRT London Road 65 LRT 368412 45 LRT London Road 65 LRT 369820 4 LRT Haymarket 65 LRT 373340 4 LRT Princes Street 65 LRT 375420 10 LRT Princes Street 65 LRT 377748 45 LRT Riccarton Campus 65 LRT 437423 4 LRT London Road 87 LRT 437993 45 LRT London Road 87 LRT 448623 10 LRT Leith 87 LRT 450915 4 LRT London Road 87A LRT 451314 45 LRT London Road 87A LRT 457918 4 LRT London Road C5 SMT 458545 45 LRT London Road C5 SMT 460481 4 LRT Haymarket C5 SMT 465321 4 LRT Princes Street C5 SMT 468181 10 LRT Princes Street C5 SMT 476508 10 LRT Leith C5 SMT 1_.count() # 这里有个小技巧：\"_\"表示前一个结果的输出 num_ab 36 company_ab 36 name 36 num_c 36 company_c 36 dtype: int64尽管结果得出跟mysql一样，但过程复杂了不少，pandas对处理多个自连接有些不太方便–得处理命名问题 12345# 这里展示了4个route关联，列名出现重复的现象route.merge(route, left_on=[\"num\", \"company\"], right_on=[\"num\", \"company\"])\\ .merge(stops, left_on=\"stop_x\", right_on=\"id\")\\ .merge(route, left_on=\"id\", right_on=\"stop\")\\ .merge(route, left_on=[\"company_y\", \"num_y\"], right_on=[\"company\", \"num\"]).head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } num_x company_x pos_x stop_x pos_y stop_y id name num_y company_y pos_x stop_x num company pos_y stop_y 0 124 SMT 9 1 9 1 1 Aberlady 124 SMT 9 1 124 SMT 9 1 1 124 SMT 9 1 9 1 1 Aberlady 124 SMT 9 1 124 SMT 1 39 2 124 SMT 9 1 9 1 1 Aberlady 124 SMT 9 1 124 SMT 2 95 3 124 SMT 9 1 9 1 1 Aberlady 124 SMT 9 1 124 SMT 4 149 4 124 SMT 9 1 9 1 1 Aberlady 124 SMT 9 1 124 SMT 8 151","link":"/2019/09/28/mysql%E4%B8%8Epandas%E5%AF%B9%E7%85%A7%E5%AD%A6%E4%B9%A0-9/"},{"title":"分享一个按照模板文件格式自动汇总统计的脚本","text":"前不久旧同事联系上我，说周报表更新了模板，看能不能改下之前写的程序，以便适应新的模板。我看了下，其实就多了新车当月起保保费，改动不是很多，就当天改好生成EXE文件发给了她。后面反馈使用没问题。 从系统里导出的表格如下： 要求的新的模板文件如下图：import pandas as pdfrom numpy import nan, whereimport datetimefrom os import walk, path, mkdirimport xlwtimport xlrdfrom xlutils.filter import process, XLRDReader, XLWTWriter# 复制样式def copy2(wb): w = XLWTWriter() process(XLRDReader(wb, 'unknown.xls'), w) return w.output[0][1], w.style_list# 空格转nandef space2nan(df, *col): for i in col: df[i] = df[i].str.strip() df[i] = where(df[i], df[i], nan)def get_df(xls_name): # 导出的表格表头在第6行，即header=5 data = pd.read_excel(xls_name, header=5) # errorse有三个选项，当出现错误时，为nan用'coerce' # errors : {‘ignore’, ‘raise’, ‘coerce’}, default ‘raise’ # If ‘raise’, then invalid parsing will raise an exception # If ‘coerce’, then invalid parsing will be set as NaT # If ‘ignore’, then invalid parsing will return the input data[\"起保日期\"] = pd.to_datetime(data[\"起保日期\"], errors='coerce') # 要对\"起保日期“列的数据进行删除，如删除”小计\", \" \"的行数据 data.dropna(how=\"any\", subset=[\"起保日期\"], inplace=True) # 导出来的数据里看似为空，其实里面是用空格\" \"的，要用下面的函数把它们转为nan space2nan(data, \"车辆大类\", \"使用性质\", \"新车标识\") # 对空值前行按照前面的值填充 data.fillna(method=\"ffill\", inplace=True) return data# 对当年/去年起保日期数据进行筛选def get_data(df, is_last_year=False): if is_last_year: year_num = last_year else: year_num = year if month_day: year_data = df[(df[\"起保日期\"] &lt;= datetime.datetime(year_num, int(month_day[:2]), int(month_day[2:]))) &amp; (df[\"起保日期\"] &gt;= datetime.datetime(year_num, 1, 1))] month_data = year_data[year_data[\"起保日期\"] &gt;= datetime.datetime(year_num, int(month_day[:2]), 1)] else: year_data = df[(df[\"起保日期\"] &lt; datetime.datetime(year_num, today.month, today.day)) &amp; (df[\"起保日期\"] &gt;= datetime.datetime(year_num, 1, 1))] month_data = year_data[year_data[\"起保日期\"] &gt;= datetime.datetime(year_num, month, 1)] # 这里的月数要注意 return year_data, month_data# 只保留两位小数，舍弃其他，不进位def get_decimal(flo): str_float = str(flo / 10000) wan, xiao = str_float.split(\".\") return float(\".\".join([wan, xiao[:2]]))def get_money(df): total = df[\"保费（元）\"].sum() car = df[df[\"使用性质\"] == \"家庭自用\"][\"保费（元）\"].sum() motor = df[df[\"车辆大类\"] == \"摩托车\"][\"保费（元）\"].sum() return get_decimal(total), get_decimal(car), get_decimal(motor)def write2(x, y, value): styles = s[rbs.cell_xf_index(x, y)] wbs.write(x, y, value, styles)# 写入模板文件def wrtie2template(): # 全车险 write2(5, 2, last_m_all) write2(5, 3, this_m_all) write2(5, 4, (this_m_all - last_m_all) / last_m_all) write2(5, 5, last_y_all) write2(5, 6, this_y_all) write2(5, 7, (this_y_all - last_y_all) / last_y_all) # 家用车 write2(6, 2, last_m_car) write2(6, 3, this_m_car) write2(6, 4, (this_m_car - last_m_car) / last_m_car) write2(6, 5, last_y_car) write2(6, 6, this_y_car) write2(6, 7, (this_y_car - last_y_car) / last_y_car) # 摩托车 write2(7, 2, last_m_motor) write2(7, 3, this_m_motor) write2(7, 4, (this_m_motor - last_m_motor) / last_m_motor) write2(7, 5, last_y_motor) write2(7, 6, this_y_motor) write2(7, 7, (this_y_motor - last_y_motor) / last_y_motor) # 新车 # 第一行 write2(5, 8, last_m_new_all) write2(5, 9, this_m_new_all) write2(5, 10, (this_m_new_all - last_m_new_all) / last_m_new_all) # 第二行 write2(6, 8, last_m_new_car) write2(6, 9, this_m_new_car) write2(6, 10, (this_m_new_car - last_m_new_car) / last_m_new_car) # 第三行 write2(7, 8, last_m_new_motor) write2(7, 9, this_m_new_motor) if last_m_new_motor == 0: if this_m_new_motor == 0: write2(7, 10, 0) else: write2(7, 10, 1) else: write2(7, 10, (this_m_new_motor - last_m_new_motor) / last_m_new_motor) # 添加日期 write2(2, 0, \"报送日期：\" + today_date) # 填写单位 write2(5, 0, \"XXXXXX公司\") rb.release_resources() # 关闭模板文件 wb.save(file_name)def main(): # 与模板相关的代码如下 rb = None # 查找模板文件 model_file = '' for root, dirs, files in walk(\"./模板文件\"): for name in files: if name.endswith(\".xls\") and not name.startswith(\".\"): model_file = path.join(root, name) rb = xlrd.open_workbook(model_file, formatting_info=True, on_demand=True) break else: input(\"在【模板文件】里没有找到模板文件，请关闭软件，并在模板文件夹内放置模板文件\") exit() wb, s = copy2(rb) wbs = wb.get_sheet(0) rbs = rb.get_sheet(0) today = datetime.datetime.now() year = today.year # 如果今天刚好是这个月的第一天，月的数字就得减一 if today.day == 1: month = today.month - 1 else: month = today.month last_year = year - 1 month_day = input(\"请输入要统计数据的截止日期(包含该日)，写上月日，4位数即可，如【0513】。默认是截止昨天，【回车】即可：\").strip() xls_last_year = \"\" # 保存去年销售数据的xls文件的路径 xls_this_year = \"\" # 保存今年销售数据的xls文件的路径 for root, dirs, files in walk(\".\"): for name in files: if name.endswith(\".xls\") and not name.startswith(\".\"): if name.startswith(str(last_year)): xls_last_year = path.join(root, name) else: temp = path.join(root, name) if temp != model_file: xls_this_year = temp print(\"去年数据文件：\", xls_last_year, \"\\t今年数据文件：\", xls_this_year) last_year_df = get_df(xls_last_year) this_year_df = get_df(xls_this_year) last_year_data, last_month_data = get_data(last_year_df, is_last_year=True) this_year_data, this_month_data = get_data(this_year_df) # 在当月数据中寻找新车 last_month_new_data = last_month_data[last_month_data[\"新车标识\"] == \"是\"] this_month_new_data = this_month_data[this_month_data[\"新车标识\"] == \"是\"] last_m_all, last_m_car, last_m_motor = get_money(last_month_data) last_y_all, last_y_car, last_y_motor = get_money(last_year_data) this_m_all, this_m_car, this_m_motor = get_money(this_month_data) this_y_all, this_y_car, this_y_motor = get_money(this_year_data) # 新增了当月累计新车保费统计 last_m_new_all, last_m_new_car, last_m_new_motor = get_money(last_month_new_data) this_m_new_all, this_m_new_car, this_m_new_motor = get_money(this_month_new_data) today_date = str(datetime.date.today()) # 写入模版文件 file_name = \"XXXXX车险起保保费周报表_\" + today_date + \".xls\" wrtie2template() input(\"已经成功生成《%s》文件。请剪切到其他文件夹保存。\\n按【回车】退出本程序，感谢您的使用。\" % file_name) if __name__ == '__main__': main() 在32位的win7或win10里把py文件生成exe文件 之前用64位的生成，测试运行也没问题，结果放在公司电脑上，出现64位的程序不能运行的问题，只好下个32位的win7来操作才把这个问题解决了。 在win7里要把python3安装好，并安装上面的py文件所用到的库。 12345pandasnumpyxlwtxlrdxlutils 确保在终端里能够正常运行脚本文件之后，安装pyinstaller 1pip install pyinstaller 使用下面命令打包生成可执行文件–exe文件 123456789101112pyinstaller -F monday.pyC:\\lanhoo\\mondayV3&gt;pyinstaller -F monday.py46 INFO: PyInstaller: 3.446 INFO: Python: 3.7.346 INFO: Platform: Windows-7-6.1.7601-SP146 INFO: wrote C:\\lanhoo\\mondayV3\\monday.spec46 INFO: UPX is not available.46 INFO: Extending PYTHONPATH with paths...31855 INFO: Appending archive to EXE C:\\lanhoo\\mondayV3\\dist\\monday.exe31886 INFO: Building EXE from EXE-00.toc completed successfully. 在当前目录里就会生成几个目录，其中dist目录里就有生成的exe文件了，这样就可以把它发给别人在微软的系统里使用了。","link":"/2019/11/08/%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%AA%E6%8C%89%E7%85%A7%E6%A8%A1%E6%9D%BF%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E8%87%AA%E5%8A%A8%E6%B1%87%E6%80%BB%E7%BB%9F%E8%AE%A1%E7%9A%84%E8%84%9A%E6%9C%AC/"},{"title":"mysql与pandas对照学习(2)","text":"SQLZOO:SELECT from WORLD Tutorial/zhSQLZOO:SELECT_from_WORLD_Tutorial/zh name continent area population gdp Afghanistan Asia 652230 25500100 20343000000 Albania Europe 28748 2831741 12960000000 Algeria Africa 2381741 37100000 188681000000 Andorra Europe 468 78115 3712000000 Angola Africa 1246700 20609294 100990000000 … name:國家名稱 continent:洲份 area:面積 population:人口 gdp:國內生產總值 1234567%load_ext sql%sql mysql+pymysql://root:lanhoo@localhost/dbsimport pandas as pdimport numpy as npimport sqlalchemyengine = sqlalchemy.create_engine(\"mysql+pymysql://root:lanhoo@localhost/dbs\")world = pd.read_sql_table(\"world\", engine) The sql extension is already loaded. To reload it, use: %reload_ext sql1.第一个例子展示简单的SQL命令閱讀此表的注意事項 觀察運行一個簡單的SQL命令的結果。 mysql12# 显示结果有点多，所以加了限制，只取前5%sql SELECT name, continent, population FROM world LIMIT 5 * mysql+pymysql://root:***@localhost/dbs 5 rows affected. name continent population Afghanistan Asia 25500100 Albania Europe 2821977 Algeria Africa 38700000 Andorra Europe 76098 Angola Africa 19183590 pandas1world[[\"name\", \"continent\", \"population\"]].head(5) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name continent population 0 Afghanistan Asia 25500100 1 Albania Europe 2821977 2 Algeria Africa 38700000 3 Andorra Europe 76098 4 Angola Africa 19183590 12# 方法二world.loc[:5, [\"name\", \"continent\", \"population\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name continent population 0 Afghanistan Asia 25500100 1 Albania Europe 2821977 2 Algeria Africa 38700000 3 Andorra Europe 76098 4 Angola Africa 19183590 5 Antigua and Barbuda Caribbean 86295 2.顯示具有至少2億人口的國家名稱如何使用WHERE來篩選記錄。 顯示具有至少2億人口的國家名稱。 2億是200000000，有八個零。 mysql1%sql SELECT name FROM world WHERE population&gt;200000000 * mysql+pymysql://root:***@localhost/dbs 5 rows affected. name Brazil China India Indonesia United States pandas1world.query(\"population &gt; 200000000\")[[\"name\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name 23 Brazil 35 China 75 India 76 Indonesia 185 United States 3.找出有至少200百萬(2億)人口的國家名稱，及人均國內生產總值。找出有至少200百萬(2億)人口的國家名稱，及人均國內生產總值。 求助：如何人均國內生產總值計算 人均國內生產總值，即是國內生產總值除以人口(GDP/population)。 mysql1%sql SELECT name, gdp/population FROM world WHERE population &gt; 200000000 * mysql+pymysql://root:***@localhost/dbs 5 rows affected. name gdp/population Brazil 11115.2648 China 6121.7106 India 1504.7931 Indonesia 3482.0205 United States 51032.2945 pandas12df = world[world.population &gt; 200000000]pd.DataFrame({\"name\": df.name, \"gdp/pop\": df.gdp / df.population}) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name gdp/pop 23 Brazil 11115.264751 35 China 6121.710599 75 India 1504.793124 76 Indonesia 3482.020488 185 United States 51032.294546 4.顯示’South America’南美洲大陸的國家名字和以百萬為單位人口數顯示’South America’南美洲大陸的國家名字和以百萬為單位人口數。 將人口population 除以一百萬(1000000)得可得到以百萬為單位人口數。 mysql1%sql SELECT name, population/1000000 FROM world WHERE continent = 'South America' * mysql+pymysql://root:***@localhost/dbs 13 rows affected. name population/1000000 Argentina 42.6695 Bolivia 10.0273 Brazil 202.7940 Chile 17.7730 Colombia 47.6620 Ecuador 15.7742 Guyana 0.7849 Paraguay 6.7834 Peru 30.4751 Saint Vincent and the Grenadines 0.1090 Suriname 0.5342 Uruguay 3.2863 Venezuela 28.9461 pandas12df = world[world.continent == \"South America\"]pd.DataFrame({\"name\": df.name, \"pop(million)\": df.population/1000000}) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name pop(million) 6 Argentina 42.669500 20 Bolivia 10.027254 23 Brazil 202.794000 34 Chile 17.773000 36 Colombia 47.662000 50 Ecuador 15.774200 70 Guyana 0.784894 133 Paraguay 6.783374 134 Peru 30.475144 144 Saint Vincent and the Grenadines 0.109000 164 Suriname 0.534189 186 Uruguay 3.286314 190 Venezuela 28.946101 5.顯示法國，德國，意大利(France, Germany, Italy)的國家名稱和人口。顯示法國，德國，意大利(France, Germany, Italy)的國家名稱和人口。 mysql1%sql SELECT name, population FROM world WHERE name in ('France', 'Germany', 'Italy') * mysql+pymysql://root:***@localhost/dbs 3 rows affected. name population France 65906000 Germany 80716000 Italy 60782668 pandas1world[world.name.isin([\"France\", \"Germany\", \"Italy\"])][[\"name\", \"population\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name population 59 France 65906000 63 Germany 80716000 81 Italy 60782668 6.顯示包含單詞“United”為名稱的國家。顯示包含單詞“United”為名稱的國家。 mysql1%sql SELECT name FROM world WHERE name LIKE '%United%'; * mysql+pymysql://root:***@localhost/dbs 3 rows affected. name United Arab Emirates United Kingdom United States pandas1world[world.name.str.contains(\"United\")][[\"name\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name 183 United Arab Emirates 184 United Kingdom 185 United States 7.展示大國的名稱，人口和面積。成為大國的兩種方式：如果它有3百萬平方公里以上的面積，或擁有250百萬(2.5億)以上人口。 展示大國的名稱，人口和面積。 mysql1%sql SELECT name, population, area FROM world WHERE area &gt; 3000000 or population &gt; 250000000; * mysql+pymysql://root:***@localhost/dbs 8 rows affected. name population area Australia 23545500 7692024 Brazil 202794000 8515767 Canada 35427524 9984670 China 1365370000 9596961 India 1246160000 3166414 Indonesia 252164800 1904569 Russia 146000000 17125242 United States 318320000 9826675 pandas12# 这样的顺序跟sql书写的顺序一致%time world[[\"name\", \"population\", \"area\"]].query(\"area &gt; 3000000 or population &gt; 250000000\") CPU times: user 19 ms, sys: 3.27 ms, total: 22.3 ms Wall time: 27.9 ms .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name population area 8 Australia 23545500 7692024 23 Brazil 202794000 8515767 30 Canada 35427524 9984670 35 China 1365370000 9596961 75 India 1246160000 3166414 76 Indonesia 252164800 1904569 140 Russia 146000000 17125242 185 United States 318320000 9826675 12# 而这种写法更推荐一些，先筛选再取所需的列，当数据量比较大，这种会更快些。%time world.query(\"area &gt; 3000000 or population &gt; 250000000\")[[\"name\", \"population\", \"area\"]] CPU times: user 21.3 ms, sys: 209 µs, total: 21.6 ms Wall time: 22.3 ms .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name population area 8 Australia 23545500 7692024 23 Brazil 202794000 8515767 30 Canada 35427524 9984670 35 China 1365370000 9596961 75 India 1246160000 3166414 76 Indonesia 252164800 1904569 140 Russia 146000000 17125242 185 United States 318320000 9826675 8.顯示以人口或面積為大國的國家，但不能同時兩者。顯示國家名稱，人口和面積美國、印度和中國(USA, India, China)是人口又大，同時面積又大的國家。排除這些國家。 顯示以人口或面積為大國的國家，但不能同時兩者。顯示國家名稱，人口和面積。 mysql12%sql SELECT name, population, area FROM world WHERE \\(area &gt;= 3000000 and population &lt; 250000000) or (area &lt; 3000000 and population &gt; 250000000); * mysql+pymysql://root:***@localhost/dbs 5 rows affected. name population area Australia 23545500 7692024 Brazil 202794000 8515767 Canada 35427524 9984670 Indonesia 252164800 1904569 Russia 146000000 17125242 pandas12345world.query(\"(area &gt;= 3000000 and population &lt; 250000000) or (area &lt; 3000000 and population &gt; 250000000)\")\\[[\"name\", \"population\", \"area\"]] # 先筛选只留下五行，再展示所需的列名# 下面的语句所得结果一样：# world[[\"name\", \"population\", \"area\"]]\\# .query(\"(area &gt;= 3000000 and population &lt; 250000000) or (area &lt; 3000000 and population &gt; 250000000)\") .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name population area 8 Australia 23545500 7692024 23 Brazil 202794000 8515767 30 Canada 35427524 9984670 76 Indonesia 252164800 1904569 140 Russia 146000000 17125242 9.對於南美顯示以百萬計人口，以十億計2位小數GDP。除以為1000000（6個零）是以百萬計。除以1000000000（9個零）是以十億計。使用 ROUND 函數來顯示的數值到小數點後兩位。 對於南美顯示以百萬計人口，以十億計2位小數GDP。 mysql12%sql SELECT name, ROUND(population/1000000, 2), ROUND(gdp/1000000000, 2) FROM world \\WHERE continent = 'South America' * mysql+pymysql://root:***@localhost/dbs 13 rows affected. name ROUND(population/1000000, 2) ROUND(gdp/1000000000, 2) Argentina 42.67 477.03 Bolivia 10.03 27.04 Brazil 202.79 2254.11 Chile 17.77 268.31 Colombia 47.66 369.81 Ecuador 15.77 87.50 Guyana 0.78 2.85 Paraguay 6.78 25.94 Peru 30.48 204.68 Saint Vincent and the Grenadines 0.11 0.69 Suriname 0.53 5.01 Uruguay 3.29 49.92 Venezuela 28.95 382.42 pandas123456789101112# 前面有个例子用了列数据运算的方式，这次用apply()函数，再来拆分# 1.先取得所有南美洲的国家df = world[world.continent == \"South America\"]# 2.再使用apply()函数取得国家，人口，gdp三个元素所组成的元组df2 = df.apply(lambda x: \\ (x[\"name\"], \\ round(x.population/1000000, 2), \\ round(x.gdp/1000000000, 2)), axis=1) #注意这里的x.name是序号，只能用x[\"name\"]来取国家名字pd.DataFrame({\"name\": [i[0] for i in df2], \\ \"pop(million)\": [i[1] for i in df2], \\ \"gdp(billion)\": [i[2] for i in df2]}) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name pop(million) gdp(billion) 0 Argentina 42.67 477.03 1 Bolivia 10.03 27.04 2 Brazil 202.79 2254.11 3 Chile 17.77 268.31 4 Colombia 47.66 369.81 5 Ecuador 15.77 87.50 6 Guyana 0.78 2.85 7 Paraguay 6.78 25.93 8 Peru 30.48 204.68 9 Saint Vincent and the Grenadines 0.11 0.69 10 Suriname 0.53 5.01 11 Uruguay 3.29 49.92 12 Venezuela 28.95 382.42 10.顯示萬億元國家的人均國內生產總值，四捨五入到最近的$ 1000。顯示國家有至少一個萬億元國內生產總值（萬億，也就是12個零）的人均國內生產總值。四捨五入這個值到最接近1000。 顯示萬億元國家的人均國內生產總值，四捨五入到最近的$ 1000。 mysql1%sql SELECT name, ROUND(gdp/population/1000)*1000 FROM world WHERE gdp &gt; 1000000000000; * mysql+pymysql://root:***@localhost/dbs 15 rows affected. name ROUND(gdp/population/1000)*1000 Australia 66000 Brazil 11000 Canada 45000 China 6000 France 40000 Germany 42000 India 2000 Italy 33000 Japan 47000 Mexico 10000 Russia 14000 South Korea 22000 Spain 28000 United Kingdom 39000 United States 51000 pandas12df = world[world.gdp &gt; 1000000000000][[\"name\", \"gdp\", \"population\"]]pd.DataFrame({\"name\": df.name, \"avg_gdp\": round(df.gdp/df.population/1000)*1000}) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name avg_gdp 8 Australia 66000.0 23 Brazil 11000.0 30 Canada 45000.0 35 China 6000.0 59 France 40000.0 63 Germany 42000.0 75 India 2000.0 81 Italy 33000.0 83 Japan 47000.0 109 Mexico 10000.0 140 Russia 14000.0 159 South Korea 22000.0 161 Spain 28000.0 184 United Kingdom 39000.0 185 United States 51000.0 困難的題目11. Show the name - but substitute Australasia for Oceania - for countries beginning with N.题目给出的例子The CASE statement shown is used to substitute North America for Caribbean in the third column. 12345SELECT name, continent, CASE WHEN continent=&apos;Caribbean&apos; THEN &apos;North America&apos; ELSE continent END FROM world WHERE name LIKE &apos;J%&apos; name continent CASE WHEN con.. Jamaica Caribbean North America Japan Asia Asia Jordan Asia Asia mysql12345%sql SELECT name, \\ CASE WHEN continent='Oceania' THEN 'Australasia' \\ ELSE continent END \\ FROM world \\ WHERE name LIKE 'N%' * mysql+pymysql://root:***@localhost/dbs 10 rows affected. name CASE WHEN continent='Oceania' THEN 'Australasia' ELSE continent END Namibia Africa Nauru Australasia Nepal Asia Netherlands Europe New Zealand Australasia Nicaragua North America Niger Africa Nigeria Africa North Korea Asia Norway Europe pandas123df = world[world[\"name\"].str.startswith(\"N\")]# 这里用到了numpy.where()方法来达到三元运算的效果。df.continent = np.where(df.continent==\"Oceania\", \"Australasia\", df.continent) 1df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name continent 118 Namibia Africa 119 Nauru Australasia 120 Nepal Asia 121 Netherlands Europe 122 New Zealand Australasia 123 Nicaragua North America 124 Niger Africa 125 Nigeria Africa 126 North Korea Asia 127 Norway Europe 12. Show the name and the continent - but substitute Eurasia for Europe and Asia; substitute America - for each country in North America or South America or Caribbean. Show countries beginning with A or Bmysql1234567%sql SELECT name, \\ CASE WHEN continent='Europe' or continent='Asia' THEN 'Eurasia' \\ WHEN continent in ('North America','South America','Caribbean') THEN 'America' \\ ELSE continent \\ END contient \\ FROM world \\ WHERE name LIKE 'A%' OR name LIKE 'B%' * mysql+pymysql://root:***@localhost/dbs 28 rows affected. name contient Afghanistan Eurasia Albania Eurasia Algeria Africa Andorra Eurasia Angola Africa Antigua and Barbuda America Argentina America Armenia Eurasia Australia Oceania Austria Eurasia Azerbaijan Eurasia Bahamas America Bahrain Eurasia Bangladesh Eurasia Barbados America Belarus Eurasia Belgium Eurasia Belize America Benin Africa Bhutan Eurasia Bolivia America Bosnia and Herzegovina Eurasia Botswana Africa Brazil America Brunei Eurasia Bulgaria Eurasia Burkina Faso Africa Burundi Africa pandas12df = world[world.name.str.match(r'[AB]')] # 使用match加正则非常方便地找到以A或B开头的国家df = df[[\"name\", \"continent\"]] 123# 方法一df.continent = np.where(df.continent.isin([\"Europe\", \"Asia\"]), 'Eurasia', df.continent)df.continent = np.where(df.continent.isin(['North America', 'South America', 'Caribbean']), \"America\", df.continent) 1df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name continent 0 Afghanistan Eurasia 1 Albania Eurasia 2 Algeria Africa 3 Andorra Eurasia 4 Angola Africa 5 Antigua and Barbuda America 6 Argentina America 7 Armenia Eurasia 8 Australia Oceania 9 Austria Eurasia 10 Azerbaijan Eurasia 11 Bahamas America 12 Bahrain Eurasia 13 Bangladesh Eurasia 14 Barbados America 15 Belarus Eurasia 16 Belgium Eurasia 17 Belize America 18 Benin Africa 19 Bhutan Eurasia 20 Bolivia America 21 Bosnia and Herzegovina Eurasia 22 Botswana Africa 23 Brazil America 24 Brunei Eurasia 25 Bulgaria Eurasia 26 Burkina Faso Africa 27 Burundi Africa 12345678## 方法二def func(x): if x in [\"Europe\", \"Asia\"]: return \"Eurasia\" elif x in ['North America', 'South America', 'Caribbean']: return \"America\" return xdf = world[world.name.str.match(r'[AB]')][[\"name\", \"continent\"]] 12df.continent = df.continent.apply(func)df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name continent 0 Afghanistan Eurasia 1 Albania Eurasia 2 Algeria Africa 3 Andorra Eurasia 4 Angola Africa 5 Antigua and Barbuda America 6 Argentina America 7 Armenia Eurasia 8 Australia Oceania 9 Austria Eurasia 10 Azerbaijan Eurasia 11 Bahamas America 12 Bahrain Eurasia 13 Bangladesh Eurasia 14 Barbados America 15 Belarus Eurasia 16 Belgium Eurasia 17 Belize America 18 Benin Africa 19 Bhutan Eurasia 20 Bolivia America 21 Bosnia and Herzegovina Eurasia 22 Botswana Africa 23 Brazil America 24 Brunei Eurasia 25 Bulgaria Eurasia 26 Burkina Faso Africa 27 Burundi Africa 13. Show the name, the original continent and the new continent of all countries.Put the continents right… Oceania becomes Australasia Countries in Eurasia and Turkey go to Europe/Asia Caribbean islands starting with ‘B’ go to North America, other Caribbean islands go to South America Show the name, the original continent and the new continent of all countries. mysql12345678910%sql SELECT name, continent, \\ CASE \\ WHEN continent = 'Oceania' THEN 'Australasia'\\ WHEN continent = 'Eurasia' THEN 'Europe/Asia'\\ WHEN name = 'Turkey' THEN 'Europe/Asia'\\ WHEN continent = 'Caribbean' AND name LIKE 'B%' THEN 'North America'\\ WHEN continent = 'Caribbean' THEN 'South America'\\ ELSE continent \\ END new_continent\\FROM world ORDER BY name * mysql+pymysql://root:***@localhost/dbs 195 rows affected. name continent new_continent Afghanistan Asia Asia Albania Europe Europe Algeria Africa Africa Andorra Europe Europe Angola Africa Africa Antigua and Barbuda Caribbean South America Argentina South America South America Armenia Eurasia Europe/Asia Australia Oceania Australasia Austria Europe Europe Azerbaijan Asia Asia Bahamas Caribbean North America Bahrain Asia Asia Bangladesh Asia Asia Barbados Caribbean North America Belarus Europe Europe Belgium Europe Europe Belize North America North America Benin Africa Africa Bhutan Asia Asia Bolivia South America South America Bosnia and Herzegovina Europe Europe Botswana Africa Africa Brazil South America South America Brunei Asia Asia Bulgaria Europe Europe Burkina Faso Africa Africa Burundi Africa Africa Cambodia Asia Asia Cameroon Africa Africa Canada North America North America Cape Verde Africa Africa Central African Republic Africa Africa Chad Africa Africa Chile South America South America China Asia Asia Colombia South America South America Comoros Africa Africa Congo, Democratic Republic of Africa Africa Congo, Republic of Africa Africa Costa Rica North America North America Côte d'Ivoire Africa Africa Croatia Europe Europe Cuba Caribbean South America Cyprus Asia Asia Czech Republic Europe Europe Denmark Europe Europe Djibouti Africa Africa Dominica Caribbean South America Dominican Republic Caribbean South America Ecuador South America South America Egypt Asia Asia El Salvador North America North America Equatorial Guinea Africa Africa Eritrea Africa Africa Estonia Europe Europe Ethiopia Africa Africa Fiji Oceania Australasia Finland Europe Europe France Europe Europe Gabon Africa Africa Gambia Africa Africa Georgia Asia Asia Germany Europe Europe Ghana Africa Africa Greece Europe Europe Grenada Caribbean South America Guatemala North America North America Guinea Africa Africa Guinea-Bissau Africa Africa Guyana South America South America Haiti Caribbean South America Honduras North America North America Hungary Europe Europe Iceland Europe Europe India Asia Asia Indonesia Asia Asia Iran Asia Asia Iraq Asia Asia Ireland Europe Europe Israel Asia Asia Italy Europe Europe Jamaica Caribbean South America Japan Asia Asia Jordan Asia Asia Kazakhstan Europe Europe Kenya Africa Africa Kiribati Oceania Australasia Kuwait Asia Asia Kyrgyzstan Asia Asia Laos Asia Asia Latvia Europe Europe Lebanon Asia Asia Lesotho Africa Africa Liberia Africa Africa Libya Africa Africa Liechtenstein Europe Europe Lithuania Europe Europe Luxembourg Europe Europe Macedonia Europe Europe Madagascar Africa Africa Malawi Africa Africa Malaysia Asia Asia Maldives Asia Asia Mali Africa Africa Malta Europe Europe Marshall Islands Oceania Australasia Mauritania Africa Africa Mauritius Africa Africa Mexico North America North America Micronesia, Federated States of Oceania Australasia Moldova Europe Europe Monaco Europe Europe Mongolia Asia Asia Montenegro Europe Europe Morocco Africa Africa Mozambique Africa Africa Myanmar Asia Asia Namibia Africa Africa Nauru Oceania Australasia Nepal Asia Asia Netherlands Europe Europe New Zealand Oceania Australasia Nicaragua North America North America Niger Africa Africa Nigeria Africa Africa North Korea Asia Asia Norway Europe Europe Oman Asia Asia Pakistan Asia Asia Palau Oceania Australasia Panama North America North America Papua New Guinea Oceania Australasia Paraguay South America South America Peru South America South America Philippines Asia Asia Poland Europe Europe Portugal Europe Europe Qatar Asia Asia Romania Europe Europe Russia Eurasia Europe/Asia Rwanda Africa Africa Saint Kitts and Nevis North America North America Saint Lucia Caribbean South America Saint Vincent and the Grenadines South America South America Samoa Oceania Australasia San Marino Europe Europe Sao Tomé and Príncipe Africa Africa Saudi Arabia Asia Asia Senegal Africa Africa Serbia Europe Europe Seychelles Africa Africa Sierra Leone Africa Africa Singapore Asia Asia Slovakia Europe Europe Slovenia Europe Europe Solomon Islands Oceania Australasia Somalia Africa Africa South Africa Africa Africa South Korea Asia Asia South Sudan Africa Africa Spain Europe Europe Sri Lanka Asia Asia Sudan Africa Africa Suriname South America South America Swaziland Africa Africa Sweden Europe Europe Switzerland Europe Europe Syria Asia Asia Taiwan Asia Asia Tajikistan Asia Asia Tanzania Africa Africa Thailand Asia Asia Timor-Leste Asia Asia Togo Africa Africa Tonga Oceania Australasia Trinidad and Tobago Caribbean South America Tunisia Africa Africa Turkey Asia Europe/Asia Turkmenistan Asia Asia Tuvalu Oceania Australasia Uganda Africa Africa Ukraine Europe Europe United Arab Emirates Asia Asia United Kingdom Europe Europe United States North America North America Uruguay South America South America Uzbekistan Asia Asia Vanuatu Oceania Australasia Vatican City Europe Europe Venezuela South America South America Vietnam Asia Asia Yemen Asia Asia Zambia Africa Africa Zimbabwe Africa Africa pandas12345678910111213# 由于不单是一列数据进行判断，np.where()不适用，可以使用apply()完成这道题def func(x): if x.continent == \"Oceania\": return \"Australasia\" elif x.continent == \"Eurasia\" or x[\"name\"] == \"Turkey\": return \"Europe/Asia\" elif x.continent == \"Caribbean\": # 下面会有详细的说明 if x[\"name\"].startswith(\"B\"): return \"North America\" else: return \"South America\" else: return x.continent 123df = world[[\"name\", \"continent\"]].copy()df[\"new_continent\"] = df.apply(func, axis=1)df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name continent new_continent 0 Afghanistan Asia Asia 1 Albania Europe Europe 2 Algeria Africa Africa 3 Andorra Europe Europe 4 Angola Africa Africa 5 Antigua and Barbuda Caribbean South America 6 Argentina South America South America 7 Armenia Eurasia Europe/Asia 8 Australia Oceania Australasia 9 Austria Europe Europe 10 Azerbaijan Asia Asia 11 Bahamas Caribbean North America 12 Bahrain Asia Asia 13 Bangladesh Asia Asia 14 Barbados Caribbean North America 15 Belarus Europe Europe 16 Belgium Europe Europe 17 Belize North America North America 18 Benin Africa Africa 19 Bhutan Asia Asia 20 Bolivia South America South America 21 Bosnia and Herzegovina Europe Europe 22 Botswana Africa Africa 23 Brazil South America South America 24 Brunei Asia Asia 25 Bulgaria Europe Europe 26 Burkina Faso Africa Africa 27 Burundi Africa Africa 28 Cambodia Asia Asia 29 Cameroon Africa Africa ... ... ... ... 165 Swaziland Africa Africa 166 Sweden Europe Europe 167 Switzerland Europe Europe 168 Syria Asia Asia 169 Taiwan Asia Asia 170 Tajikistan Asia Asia 171 Tanzania Africa Africa 172 Thailand Asia Asia 173 Timor-Leste Asia Asia 174 Togo Africa Africa 175 Tonga Oceania Australasia 176 Trinidad and Tobago Caribbean South America 177 Tunisia Africa Africa 178 Turkey Asia Europe/Asia 179 Turkmenistan Asia Asia 180 Tuvalu Oceania Australasia 181 Uganda Africa Africa 182 Ukraine Europe Europe 183 United Arab Emirates Asia Asia 184 United Kingdom Europe Europe 185 United States North America North America 186 Uruguay South America South America 187 Uzbekistan Asia Asia 188 Vanuatu Oceania Australasia 189 Vatican City Europe Europe 190 Venezuela South America South America 191 Vietnam Asia Asia 192 Yemen Asia Asia 193 Zambia Africa Africa 194 Zimbabwe Africa Africa 195 rows × 3 columns 对mysql和pandas的代码进行补充说明 mysql:它运行CASE WHEN代码时会先全部完成第一个判断，再进行第二个判断，所以可以这样写WHEN continent = 'Caribbean' THEN 'South America'，它前面已经把既是Caribbean又是国家名开头字母为B的信息给改动了。 pandas:df.apply(func, axis=1)它是逐行进行判断，所以需要一个嵌套if来进行判断，或者把里面的一层if时行拆分，用and和第一层进行组合判断。 由于它们两者的执行顺序不同，sqlzoo里的答案提示里要加上一个ORDER BY name，而pandas就不用排序就可以了。","link":"/2019/09/21/mysql%E4%B8%8Epandas%E5%AF%B9%E7%85%A7%E5%AD%A6%E4%B9%A0-2/"},{"title":"mysql与pandas对照学习(7)","text":"More JOIN operations/zhMore JOIN operations/zh 关于下面使用ipython-sql模块，查询报错的情况说明：sql语句是没有错误的，可以在终端里进入mysql里运行，只是当有三个表联表查询时，这个模块会运行不下去，卡住。 電影數據庫此教程練習表格合拼。數據庫有三個表格 movie電影(id編號, title電影名稱, yr首影年份, director導演, budget製作費, gross票房收入) actor演員(id編號, name姓名) casting角色(movieid電影編號, actorid演員編號, ord角色次序) 角色次序代表第1主角是1, 第2主角是2…如此類推. More details about the database. 123456789%load_ext sql%sql mysql+pymysql://root:lanhoo@localhost/dbsimport pandas as pdimport numpy as npimport sqlalchemyengine = sqlalchemy.create_engine(\"mysql+pymysql://root:lanhoo@localhost/dbs\")movie = pd.read_sql_table(\"movie\", engine)actor = pd.read_sql_table(\"actor\", engine)casting = pd.read_sql_table(\"casting\", engine) 1. 列出1962年首影的電影， [顯示 id, title]mysql123%sql SELECT id, title\\ FROM movie\\ WHERE yr=1962 * mysql+pymysql://root:***@localhost/dbs 86 rows affected. id title 10212 A Kind of Loving 10329 A Symposium on Popular Songs 10347 A Very Private Affair (Vie PrivÃ©e) 10648 An Autumn Afternoon 10868 Atraco a las tres 11006 Barabbas 11053 Battle Beyond the Sun (ÐÐµÐ±Ð¾ Ð·Ð¾Ð²ÐµÑ‚) 11199 Big and Little Wong Tin Bar 11230 Billy Budd 11234 Billy Rose's Jumbo 11242 Birdman of Alcatraz 11373 Boccaccio '70 11391 Bon Voyage! 11439 Boys' Night Out 11692 Cape Fear 11735 Carnival of Souls 11753 Carry On Cruising 12368 David and Lisa 12384 Days of Wine and Roses 12710 Dr. No 12817 L'Eclisse 12967 Tutti a casa 12992 Experiment in Terror 13010 Eyes Without a Face 13484 Gay Purr-ee 13534 Gigot 13641 Gorath 13727 Gypsy 13741 Half Ticket 13798 Harakiri 14317 In Search of the Castaways 14454 It's Only Money 14550 Jigsaw 14718 Kid Galahad 14860 La commare secca 14873 La notte 14972 Lawrence of Arabia 15088 Life for Ruth 15173 Lolita 15182 Long Day's Journey into Night 15247 Love at Twenty 15297 Lycanthropus 15397 Mamma Roma 15564 Merrill's Marauders 15752 Mother Joan of the Angels 15779 Mr. Hobbs Takes a Vacation 15840 Mutiny on the Bounty 16203 On the Beat 16295 Os Cafajestes 16367 Panic in Year Zero! 16462 Period of Adjustment 16485 Phaedra 16533 Pitfall 16622 Pressure Point 16661 Prison 16675 Professor 16945 Ride the High Country 17148 Salvatore Giuliano 17296 Sergeants 3 17804 State Fair 17944 Sundays and Cybele 18001 Sweet Bird of Youth (film) 18127 Term of Trial 18171 That Touch of Mink 18177 The 300 Spartans 18730 The Counterfeit Traitor 18941 The Exterminating Angel 19034 The Four Days of Naples 19430 The Intruder 19520 The L-Shaped Room 19679 The Loneliness of the Long Distance Runner 19694 The Longest Day 19795 The Man Who Shot Liberty Valance 19808 The Manchurian Candidate 19933 The Music Man 20114 The Phantom of the Opera 20161 The Premature Burial 20730 The Trial 21051 Through a Glass Darkly 21110 To Kill a Mockingbird 21189 Tower of London 21324 Two Half Times in Hell 21462 Varan the Unbelievable 21494 Village of Daughters 21673 What Ever Happened to Baby Jane? 21761 Who's Got the Action? pandas1movie[movie.yr==1962][[\"id\", \"title\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } id title 211 10212 A Kind of Loving 328 10329 A Symposium on Popular Songs 346 10347 A Very Private Affair (Vie PrivÃ©e) 647 10648 An Autumn Afternoon 867 10868 Atraco a las tres 1005 11006 Barabbas 1052 11053 Battle Beyond the Sun (ÐÐµÐ±Ð¾ Ð·Ð¾Ð²ÐµÑ‚) 1198 11199 Big and Little Wong Tin Bar 1229 11230 Billy Budd 1233 11234 Billy Rose's Jumbo 1241 11242 Birdman of Alcatraz 1372 11373 Boccaccio '70 1390 11391 Bon Voyage! 1438 11439 Boys' Night Out 1691 11692 Cape Fear 1734 11735 Carnival of Souls 1752 11753 Carry On Cruising 2367 12368 David and Lisa 2383 12384 Days of Wine and Roses 2709 12710 Dr. No 2816 12817 L'Eclisse 2966 12967 Tutti a casa 2991 12992 Experiment in Terror 3009 13010 Eyes Without a Face 3483 13484 Gay Purr-ee 3533 13534 Gigot 3640 13641 Gorath 3726 13727 Gypsy 3740 13741 Half Ticket 3797 13798 Harakiri ... ... ... 6944 16945 Ride the High Country 7147 17148 Salvatore Giuliano 7295 17296 Sergeants 3 7803 17804 State Fair 7943 17944 Sundays and Cybele 8000 18001 Sweet Bird of Youth (film) 8126 18127 Term of Trial 8170 18171 That Touch of Mink 8176 18177 The 300 Spartans 8729 18730 The Counterfeit Traitor 8940 18941 The Exterminating Angel 9033 19034 The Four Days of Naples 9429 19430 The Intruder 9519 19520 The L-Shaped Room 9678 19679 The Loneliness of the Long Distance Runner 9693 19694 The Longest Day 9794 19795 The Man Who Shot Liberty Valance 9807 19808 The Manchurian Candidate 9932 19933 The Music Man 10113 20114 The Phantom of the Opera 10160 20161 The Premature Burial 10729 20730 The Trial 11050 21051 Through a Glass Darkly 11109 21110 To Kill a Mockingbird 11188 21189 Tower of London 11323 21324 Two Half Times in Hell 11461 21462 Varan the Unbelievable 11493 21494 Village of Daughters 11672 21673 What Ever Happened to Baby Jane? 11760 21761 Who's Got the Action? 86 rows × 2 columns 2. 電影大國民 ‘Citizen Kane’ 的首影年份。mysql1%sql SELECT yr FROM movie WHERE title = 'Citizen Kane' * mysql+pymysql://root:***@localhost/dbs 1 rows affected. yr 1941 pandas1movie[movie.title == 'Citizen Kane'][[\"yr\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } yr 1954 1941 3. 列出全部Star Trek星空奇遇記系列的電影，包括id, title 和 yr(此系統電影都以Star Trek為電影名稱的開首)。按年份順序排列。mysql1%sql SELECT id, title, yr FROM movie WHERE title LIKE 'Star Trek%' * mysql+pymysql://root:***@localhost/dbs 11 rows affected. id title yr 17770 Star Trek: First Contact 1996 17771 Star Trek: Insurrection 1998 17772 Star Trek: The Motion Picture 1979 17773 Star Trek 2009 17774 Star Trek Generations 1994 17775 Star Trek II: The Wrath of Khan 1982 17776 Star Trek III: The Search for Spock 1984 17777 Star Trek IV: The Voyage Home 1986 17778 Star Trek Nemesis 2002 17779 Star Trek V: The Final Frontier 1989 17780 Star Trek VI: The Undiscovered Country 1991 pandas1movie[movie.title.notnull() &amp; movie.title.str.startswith(\"Star Trek\")][[\"id\", \"title\", \"yr\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } id title yr 7769 17770 Star Trek: First Contact 1996 7770 17771 Star Trek: Insurrection 1998 7771 17772 Star Trek: The Motion Picture 1979 7772 17773 Star Trek 2009 7773 17774 Star Trek Generations 1994 7774 17775 Star Trek II: The Wrath of Khan 1982 7775 17776 Star Trek III: The Search for Spock 1984 7776 17777 Star Trek IV: The Voyage Home 1986 7777 17778 Star Trek Nemesis 2002 7778 17779 Star Trek V: The Final Frontier 1989 7779 17780 Star Trek VI: The Undiscovered Country 1991 补充说明由于title列有空值，当直接用movie.title.str.startswith()判断时会报错，因此它前面加了非空的判断：movie.title.notnull()用&amp;来连接，可以当title非空时才进行第二步的判断，因此可以得出所要的结果 4. id是 11768, 11955, 21191 的電影是什麼名稱?mysql1%sql SELECT title FROM movie WHERE id IN (11768, 11955, 21191) * mysql+pymysql://root:***@localhost/dbs 3 rows affected. title Casablanca Citizen Kane Toy Story pandas1movie[movie[\"id\"].isin([11768, 11955, 21191])][[\"title\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } title 1767 Casablanca 1954 Citizen Kane 11190 Toy Story 5. 女演員’Glenn Close’的編號 id是什麼?mysql1%sql SELECT id FROM actor WHERE name = 'Glenn Close' * mysql+pymysql://root:***@localhost/dbs 1 rows affected. id 140 pandas1actor.query(\"name == 'Glenn Close'\")[[\"id\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } id 16181 140 6. 電影北非諜影’Casablanca’ 的編號 id是什麼?mysql1%sql SELECT id FROM movie WHERE title = 'Casablanca' * mysql+pymysql://root:***@localhost/dbs 1 rows affected. id 11768 pandas1movie[movie.title == \"Casablanca\"][[\"id\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } id 1767 11768 合拼語法7. 列出電影北非諜影 ‘Casablanca’的演員名單。什麼是演員名單? 演員名單,即是電影中各演員的真實姓名清單。 使用 movieid=11768, 這是你上一題得到的結果。 mysql123%sql SELECT name FROM actor WHERE id IN \\ (SELECT actorid FROM casting WHERE movieid = \\(SELECT id FROM movie WHERE title = 'Casablanca')) * mysql+pymysql://root:***@localhost/dbs 33 rows affected. name Claude Rains Conrad Veidt Curt Bois Dan Seymour Dooley Wilson Georges Renavent Gregory Gaye Hans Twardowski Helmut Dantine Humphrey Bogart Ilka GrÃ¼nig Ingrid Bergman Jack Benny Jean Del Val John Qualen Joy Page Leo White Leon Belasco Leonid Kinskey Louis V. Arco Ludwig StÃ¶ssel Madeleine LeBeau Marcel Dalio Norma Varden Paul Henreid Peter Lorre Richard Ryen S. Z. Sakall Sydney Greenstreet Torben Meyer Trude Berliner William Edmunds Wolfgang Zilzer pandas1temp = movie.query(\"title == 'Casablanca'\")[\"id\"].values[0] 1actor[actor.id.isin(casting[casting.movieid == temp][\"actorid\"].values)][[\"name\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name 8178 Claude Rains 8562 Conrad Veidt 8810 Curt Bois 9142 Dan Seymour 11293 Dooley Wilson 15702 Georges Renavent 16562 Gregory Gaye 17057 Hans Twardowski 17686 Helmut Dantine 18366 Humphrey Bogart 18577 Ilka GrÃ¼nig 18653 Ingrid Bergman 19143 Jack Benny 20684 Jean Del Val 23026 John Qualen 23937 Joy Page 27227 Leo White 27235 Leon Belasco 27322 Leonid Kinskey 28339 Louis V. Arco 28555 Ludwig StÃ¶ssel 28852 Madeleine LeBeau 29282 Marcel Dalio 34248 Norma Varden 35443 Paul Henreid 36163 Peter Lorre 38179 Richard Ryen 40095 S. Z. Sakall 43086 Sydney Greenstreet 44900 Torben Meyer 45104 Trude Berliner 46804 William Edmunds 47131 Wolfgang Zilzer 8.顯示電影異型’Alien’ 的演員清單。mysql12%sql SELECT name FROM actor WHERE id IN (\\ SELECT actorid FROM casting JOIN movie ON movie.id = casting.movieid WHERE title = 'Alien') * mysql+pymysql://root:***@localhost/dbs --------------------------------------------------------------------------- KeyboardInterrupt Traceback (most recent call last) &lt;ipython-input-2-580ce70945d3&gt; in &lt;module&gt; ----&gt; 1 get_ipython().run_line_magic(&apos;sql&apos;, &quot;SELECT name FROM actor WHERE id IN ( SELECT actorid FROM casting JOIN movie ON movie.id = casting.movieid WHERE title = &apos;Alien&apos;)&quot;) ~/anaconda3/lib/python3.7/site-packages/IPython/core/interactiveshell.py in run_line_magic(self, magic_name, line, _stack_depth) 2285 kwargs[&apos;local_ns&apos;] = sys._getframe(stack_depth).f_locals 2286 with self.builtin_trap: -&gt; 2287 result = fn(*args,**kwargs) 2288 return result 2289 &lt;decorator-gen-126&gt; in execute(self, line, cell, local_ns) ~/anaconda3/lib/python3.7/site-packages/IPython/core/magic.py in &lt;lambda&gt;(f, *a, **k) 185 # but it&apos;s overkill for just that one bit of state. 186 def magic_deco(arg): --&gt; 187 call = lambda f, *a, **k: f(*a, **k) 188 189 if callable(arg): &lt;decorator-gen-125&gt; in execute(self, line, cell, local_ns) ~/anaconda3/lib/python3.7/site-packages/IPython/core/magic.py in &lt;lambda&gt;(f, *a, **k) 185 # but it&apos;s overkill for just that one bit of state. 186 def magic_deco(arg): --&gt; 187 call = lambda f, *a, **k: f(*a, **k) 188 189 if callable(arg): ~/anaconda3/lib/python3.7/site-packages/sql/magic.py in execute(self, line, cell, local_ns) 93 94 try: ---&gt; 95 result = sql.run.run(conn, parsed[&apos;sql&apos;], self, user_ns) 96 97 if result is not None and not isinstance(result, str) and self.column_local_vars: ~/anaconda3/lib/python3.7/site-packages/sql/run.py in run(conn, sql, config, user_namespace) 338 else: 339 txt = sqlalchemy.sql.text(statement) --&gt; 340 result = conn.session.execute(txt, user_namespace) 341 _commit(conn=conn, config=config) 342 if result and config.feedback: ~/anaconda3/lib/python3.7/site-packages/sqlalchemy/engine/base.py in execute(self, object, *multiparams, **params) 946 raise exc.ObjectNotExecutableError(object) 947 else: --&gt; 948 return meth(self, multiparams, params) 949 950 def _execute_function(self, func, multiparams, params): ~/anaconda3/lib/python3.7/site-packages/sqlalchemy/sql/elements.py in _execute_on_connection(self, connection, multiparams, params) 267 def _execute_on_connection(self, connection, multiparams, params): 268 if self.supports_execution: --&gt; 269 return connection._execute_clauseelement(self, multiparams, params) 270 else: 271 raise exc.ObjectNotExecutableError(self) ~/anaconda3/lib/python3.7/site-packages/sqlalchemy/engine/base.py in _execute_clauseelement(self, elem, multiparams, params) 1058 compiled_sql, 1059 distilled_params, -&gt; 1060 compiled_sql, distilled_params 1061 ) 1062 if self._has_events or self.engine._has_events: ~/anaconda3/lib/python3.7/site-packages/sqlalchemy/engine/base.py in _execute_context(self, dialect, constructor, statement, parameters, *args) 1198 parameters, 1199 cursor, -&gt; 1200 context) 1201 1202 if self._has_events or self.engine._has_events: ~/anaconda3/lib/python3.7/site-packages/sqlalchemy/engine/base.py in _handle_dbapi_exception(self, e, statement, parameters, cursor, context) 1414 ) 1415 else: -&gt; 1416 util.reraise(*exc_info) 1417 1418 finally: ~/anaconda3/lib/python3.7/site-packages/sqlalchemy/util/compat.py in reraise(tp, value, tb, cause) 247 if value.__traceback__ is not tb: 248 raise value.with_traceback(tb) --&gt; 249 raise value 250 251 else: ~/anaconda3/lib/python3.7/site-packages/sqlalchemy/engine/base.py in _execute_context(self, dialect, constructor, statement, parameters, *args) 1191 statement, 1192 parameters, -&gt; 1193 context) 1194 except BaseException as e: 1195 self._handle_dbapi_exception( ~/anaconda3/lib/python3.7/site-packages/sqlalchemy/engine/default.py in do_execute(self, cursor, statement, parameters, context) 507 508 def do_execute(self, cursor, statement, parameters, context=None): --&gt; 509 cursor.execute(statement, parameters) 510 511 def do_execute_no_params(self, cursor, statement, context=None): ~/anaconda3/lib/python3.7/site-packages/pymysql/cursors.py in execute(self, query, args) 168 query = self.mogrify(query, args) 169 --&gt; 170 result = self._query(query) 171 self._executed = query 172 return result ~/anaconda3/lib/python3.7/site-packages/pymysql/cursors.py in _query(self, q) 326 self._last_executed = q 327 self._clear_result() --&gt; 328 conn.query(q) 329 self._do_get_result() 330 return self.rowcount ~/anaconda3/lib/python3.7/site-packages/pymysql/connections.py in query(self, sql, unbuffered) 515 sql = sql.encode(self.encoding, &apos;surrogateescape&apos;) 516 self._execute_command(COMMAND.COM_QUERY, sql) --&gt; 517 self._affected_rows = self._read_query_result(unbuffered=unbuffered) 518 return self._affected_rows 519 ~/anaconda3/lib/python3.7/site-packages/pymysql/connections.py in _read_query_result(self, unbuffered) 730 else: 731 result = MySQLResult(self) --&gt; 732 result.read() 733 self._result = result 734 if result.server_status is not None: ~/anaconda3/lib/python3.7/site-packages/pymysql/connections.py in read(self) 1073 def read(self): 1074 try: -&gt; 1075 first_packet = self.connection._read_packet() 1076 1077 if first_packet.is_ok_packet(): ~/anaconda3/lib/python3.7/site-packages/pymysql/connections.py in _read_packet(self, packet_type) 655 buff = b&apos;&apos; 656 while True: --&gt; 657 packet_header = self._read_bytes(4) 658 #if DEBUG: dump_packet(packet_header) 659 ~/anaconda3/lib/python3.7/site-packages/pymysql/connections.py in _read_bytes(self, num_bytes) 689 while True: 690 try: --&gt; 691 data = self._rfile.read(num_bytes) 692 break 693 except (IOError, OSError) as e: ~/anaconda3/lib/python3.7/socket.py in readinto(self, b) 587 while True: 588 try: --&gt; 589 return self._sock.recv_into(b) 590 except timeout: 591 self._timeout_occurred = True KeyboardInterrupt: pandas1actorids = movie.merge(casting, left_on=\"id\", right_on=\"movieid\").query(\"title == 'Alien'\")[\"actorid\"] 1actor[actor.id.isin(actorids)][[\"name\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name 17234 Harry Dean Stanton 18439 Ian Holm 22800 John Hurt 41695 Sigourney Weaver 44591 Tom Skerritt 45615 Veronica Cartwright 47246 Yaphet Kotto 9. 列出演員夏里遜福 ‘Harrison Ford’ 曾演出的電影。mysql123%sql SELECT title FROM movie \\JOIN casting ON movieid = id WHERE actorid = \\(SELECT id FROM actor WHERE name = 'Harrison Ford') * mysql+pymysql://root:***@localhost/dbs 42 rows affected. title A Hundred and One Nights Air Force One American Graffiti Apocalypse Now Clear and Present Danger Cowboys &amp; Aliens Crossing Over Dead Heat on a Merry-Go-Round Extraordinary Measures Firewall Force 10 From Navarone Hanover Street Hawthorne of the U.S.A. Hollywood Homicide Indiana Jones and the Kingdom of the Crystal Skull Indiana Jones and the Last Crusade Indiana Jones and the Temple of Doom Jimmy Hollywood K-19: The Widowmaker More American Graffiti Morning Glory Patriot Games Presumed Innocent Raiders of the Lost Ark Random Hearts Regarding Henry Sabrina Sally of the Sawdust Shadows Six Days Seven Nights Smilin' Through Star Wars Episode IV: A New Hope Star Wars Episode V: The Empire Strikes Back Star Wars Episode VI: Return of the Jedi The Conversation The Devil's Own The Fugitive The Mosquito Coast The Star Wars Holiday Special What Lies Beneath Witness Working Girl pandas1aid = actor.query(\"name == 'Harrison Ford'\").id.values[0] 1m = movie.merge(casting, left_on='id', right_on=\"movieid\") 1m[m[\"actorid\"] == aid][[\"title\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } title 2127 A Hundred and One Nights 4875 Air Force One 6343 American Graffiti 7996 Apocalypse Now 20249 Clear and Present Danger 22196 Cowboys &amp; Aliens 22778 Crossing Over 24360 Dead Heat on a Merry-Go-Round 30111 Extraordinary Measures 31793 Firewall 33030 Force 10 From Navarone 38020 Hanover Street 38750 Hawthorne of the U.S.A. 40538 Hollywood Homicide 43810 Indiana Jones and the Kingdom of the Crystal S... 43815 Indiana Jones and the Last Crusade 43827 Indiana Jones and the Temple of Doom 45930 Jimmy Hollywood 47124 K-19: The Widowmaker 57125 More American Graffiti 57189 Morning Glory 63919 Patriot Games 66046 Presumed Innocent 67543 Raiders of the Lost Ark 67733 Random Hearts 68354 Regarding Henry 71019 Sabrina 71139 Sally of the Sawdust 73163 Shadows 74963 Six Days Seven Nights 75647 Smilin' Through 77779 Star Wars Episode IV: A New Hope 77787 Star Wars Episode V: The Empire Strikes Back 77800 Star Wars Episode VI: Return of the Jedi 86833 The Conversation 88239 The Devil's Own 90242 The Fugitive 98698 The Mosquito Coast 105131 The Star Wars Holiday Special 116607 What Lies Beneath 118407 Witness 118684 Working Girl 10. 列出演員夏里遜福 ‘Harrison Ford’ 曾演出的電影，但他不是第1主角。mysql12%sql SELECT title FROM movie JOIN casting ON movieid = id WHERE actorid = \\(SELECT id FROM actor WHERE name = 'Harrison Ford') AND ord != 1; * mysql+pymysql://root:***@localhost/dbs 19 rows affected. title A Hundred and One Nights American Graffiti Apocalypse Now Cowboys &amp; Aliens Dead Heat on a Merry-Go-Round Extraordinary Measures Force 10 From Navarone Hawthorne of the U.S.A. Jimmy Hollywood More American Graffiti Morning Glory Sally of the Sawdust Shadows Smilin' Through Star Wars Episode IV: A New Hope Star Wars Episode V: The Empire Strikes Back Star Wars Episode VI: Return of the Jedi The Conversation Working Girl pandas方法一12aid = actor.query(\"name == 'Harrison Ford'\")[\"id\"].values[0]aid 22161m = movie.merge(casting, left_on=\"id\", right_on=\"movieid\") 1m[(m[\"actorid\"] == aid) &amp; (m[\"ord\"] != 1)][[\"title\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } title 2127 A Hundred and One Nights 6343 American Graffiti 7996 Apocalypse Now 22196 Cowboys &amp; Aliens 24360 Dead Heat on a Merry-Go-Round 30111 Extraordinary Measures 33030 Force 10 From Navarone 38750 Hawthorne of the U.S.A. 45930 Jimmy Hollywood 57125 More American Graffiti 57189 Morning Glory 71139 Sally of the Sawdust 73163 Shadows 75647 Smilin' Through 77779 Star Wars Episode IV: A New Hope 77787 Star Wars Episode V: The Empire Strikes Back 77800 Star Wars Episode VI: Return of the Jedi 86833 The Conversation 118684 Working Girl 方法二1m2 = movie.merge(casting, left_on=\"id\", right_on=\"movieid\") 1234567actor_name = \"Harrison Ford\"aid = actor[actor.name == actor_name][\"id\"].values[0]def get_movie(x, actor_id): return x[\"actorid\"] == actor_id and x[\"ord\"] != 1m2[m2.apply(get_movie, args=(aid,) ,axis=\"columns\")][[\"title\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } title 2127 A Hundred and One Nights 6343 American Graffiti 7996 Apocalypse Now 22196 Cowboys &amp; Aliens 24360 Dead Heat on a Merry-Go-Round 30111 Extraordinary Measures 33030 Force 10 From Navarone 38750 Hawthorne of the U.S.A. 45930 Jimmy Hollywood 57125 More American Graffiti 57189 Morning Glory 71139 Sally of the Sawdust 73163 Shadows 75647 Smilin' Through 77779 Star Wars Episode IV: A New Hope 77787 Star Wars Episode V: The Empire Strikes Back 77800 Star Wars Episode VI: Return of the Jedi 86833 The Conversation 118684 Working Girl 11. 列出1962年首影的電影及它的第1主角。mysql123%sql SELECT title, name FROM movie JOIN casting ON id = movieid \\ JOIN actor ON actor.id = actorid \\ WHERE yr = 1962 AND ord = 1; * mysql+pymysql://root:***@localhost/dbs --------------------------------------------------------------------------- KeyboardInterrupt Traceback (most recent call last) &lt;ipython-input-2-8cb2419986ef&gt; in &lt;module&gt; ----&gt; 1 get_ipython().run_line_magic(&apos;sql&apos;, &apos;SELECT title, name FROM movie JOIN casting ON id = movieid JOIN actor ON actor.id = actorid WHERE yr = 1962 AND ord = 1;&apos;) ~/anaconda3/lib/python3.7/site-packages/IPython/core/interactiveshell.py in run_line_magic(self, magic_name, line, _stack_depth) 2285 kwargs[&apos;local_ns&apos;] = sys._getframe(stack_depth).f_locals 2286 with self.builtin_trap: -&gt; 2287 result = fn(*args,**kwargs) 2288 return result 2289 &lt;decorator-gen-126&gt; in execute(self, line, cell, local_ns) ~/anaconda3/lib/python3.7/site-packages/IPython/core/magic.py in &lt;lambda&gt;(f, *a, **k) 185 # but it&apos;s overkill for just that one bit of state. 186 def magic_deco(arg): --&gt; 187 call = lambda f, *a, **k: f(*a, **k) 188 189 if callable(arg): &lt;decorator-gen-125&gt; in execute(self, line, cell, local_ns) ~/anaconda3/lib/python3.7/site-packages/IPython/core/magic.py in &lt;lambda&gt;(f, *a, **k) 185 # but it&apos;s overkill for just that one bit of state. 186 def magic_deco(arg): --&gt; 187 call = lambda f, *a, **k: f(*a, **k) 188 189 if callable(arg): ~/anaconda3/lib/python3.7/site-packages/sql/magic.py in execute(self, line, cell, local_ns) 93 94 try: ---&gt; 95 result = sql.run.run(conn, parsed[&apos;sql&apos;], self, user_ns) 96 97 if result is not None and not isinstance(result, str) and self.column_local_vars: ~/anaconda3/lib/python3.7/site-packages/sql/run.py in run(conn, sql, config, user_namespace) 338 else: 339 txt = sqlalchemy.sql.text(statement) --&gt; 340 result = conn.session.execute(txt, user_namespace) 341 _commit(conn=conn, config=config) 342 if result and config.feedback: ~/anaconda3/lib/python3.7/site-packages/sqlalchemy/engine/base.py in execute(self, object, *multiparams, **params) 946 raise exc.ObjectNotExecutableError(object) 947 else: --&gt; 948 return meth(self, multiparams, params) 949 950 def _execute_function(self, func, multiparams, params): ~/anaconda3/lib/python3.7/site-packages/sqlalchemy/sql/elements.py in _execute_on_connection(self, connection, multiparams, params) 267 def _execute_on_connection(self, connection, multiparams, params): 268 if self.supports_execution: --&gt; 269 return connection._execute_clauseelement(self, multiparams, params) 270 else: 271 raise exc.ObjectNotExecutableError(self) ~/anaconda3/lib/python3.7/site-packages/sqlalchemy/engine/base.py in _execute_clauseelement(self, elem, multiparams, params) 1058 compiled_sql, 1059 distilled_params, -&gt; 1060 compiled_sql, distilled_params 1061 ) 1062 if self._has_events or self.engine._has_events: ~/anaconda3/lib/python3.7/site-packages/sqlalchemy/engine/base.py in _execute_context(self, dialect, constructor, statement, parameters, *args) 1198 parameters, 1199 cursor, -&gt; 1200 context) 1201 1202 if self._has_events or self.engine._has_events: ~/anaconda3/lib/python3.7/site-packages/sqlalchemy/engine/base.py in _handle_dbapi_exception(self, e, statement, parameters, cursor, context) 1414 ) 1415 else: -&gt; 1416 util.reraise(*exc_info) 1417 1418 finally: ~/anaconda3/lib/python3.7/site-packages/sqlalchemy/util/compat.py in reraise(tp, value, tb, cause) 247 if value.__traceback__ is not tb: 248 raise value.with_traceback(tb) --&gt; 249 raise value 250 251 else: ~/anaconda3/lib/python3.7/site-packages/sqlalchemy/engine/base.py in _execute_context(self, dialect, constructor, statement, parameters, *args) 1191 statement, 1192 parameters, -&gt; 1193 context) 1194 except BaseException as e: 1195 self._handle_dbapi_exception( ~/anaconda3/lib/python3.7/site-packages/sqlalchemy/engine/default.py in do_execute(self, cursor, statement, parameters, context) 507 508 def do_execute(self, cursor, statement, parameters, context=None): --&gt; 509 cursor.execute(statement, parameters) 510 511 def do_execute_no_params(self, cursor, statement, context=None): ~/anaconda3/lib/python3.7/site-packages/pymysql/cursors.py in execute(self, query, args) 168 query = self.mogrify(query, args) 169 --&gt; 170 result = self._query(query) 171 self._executed = query 172 return result ~/anaconda3/lib/python3.7/site-packages/pymysql/cursors.py in _query(self, q) 326 self._last_executed = q 327 self._clear_result() --&gt; 328 conn.query(q) 329 self._do_get_result() 330 return self.rowcount ~/anaconda3/lib/python3.7/site-packages/pymysql/connections.py in query(self, sql, unbuffered) 515 sql = sql.encode(self.encoding, &apos;surrogateescape&apos;) 516 self._execute_command(COMMAND.COM_QUERY, sql) --&gt; 517 self._affected_rows = self._read_query_result(unbuffered=unbuffered) 518 return self._affected_rows 519 ~/anaconda3/lib/python3.7/site-packages/pymysql/connections.py in _read_query_result(self, unbuffered) 730 else: 731 result = MySQLResult(self) --&gt; 732 result.read() 733 self._result = result 734 if result.server_status is not None: ~/anaconda3/lib/python3.7/site-packages/pymysql/connections.py in read(self) 1073 def read(self): 1074 try: -&gt; 1075 first_packet = self.connection._read_packet() 1076 1077 if first_packet.is_ok_packet(): ~/anaconda3/lib/python3.7/site-packages/pymysql/connections.py in _read_packet(self, packet_type) 655 buff = b&apos;&apos; 656 while True: --&gt; 657 packet_header = self._read_bytes(4) 658 #if DEBUG: dump_packet(packet_header) 659 ~/anaconda3/lib/python3.7/site-packages/pymysql/connections.py in _read_bytes(self, num_bytes) 689 while True: 690 try: --&gt; 691 data = self._rfile.read(num_bytes) 692 break 693 except (IOError, OSError) as e: ~/anaconda3/lib/python3.7/socket.py in readinto(self, b) 587 while True: 588 try: --&gt; 589 return self._sock.recv_into(b) 590 except timeout: 591 self._timeout_occurred = True KeyboardInterrupt: pandas1234movie.merge(casting, left_on=\"id\", right_on=\"movieid\")\\ .merge(actor, left_on=\"actorid\", right_on=\"id\")\\ .query(\"yr == 1962 and ord == 1\")\\ [[\"title\", \"name\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } title name 3654 Birdman of Alcatraz Burt Lancaster 4052 Lolita James Mason 4273 What Ever Happened to Baby Jane? Bette Davis 4332 David and Lisa Keir Dullea 6367 Experiment in Terror Glenn Ford 7084 Who's Got the Action? Dean Martin 7096 It's Only Money Jerry Lewis 8097 Term of Trial Laurence Olivier 8943 Boys' Night Out Kim Novak 9578 La notte Marcello Mastroianni 11622 Long Day's Journey into Night Katharine Hepburn 12225 Gay Purr-ee Judy Garland 13768 Mutiny on the Bounty Marlon Brando 14196 A Kind of Loving Alan Bates 14264 Tutti a casa Alberto Sordi 14778 Period of Adjustment Anthony Franciosa 16468 An Autumn Afternoon Chishu Ryu 16496 Sergeants 3 Frank Sinatra 16506 The Manchurian Candidate Frank Sinatra 16709 L'Eclisse Alain Delon 16966 Love at Twenty Jean-Pierre LÃ©aud 17919 Panic in Year Zero! Ray Milland 17930 The Premature Burial Ray Milland 20163 Sweet Bird of Youth (film) Paul Newman 20619 Dr. No Sean Connery 21004 Pressure Point Sidney Poitier 22183 Tower of London Vincent Price 22529 The Phantom of the Opera Herbert Lom 23739 A Symposium on Popular Songs Paul Frees 24838 In Search of the Castaways Hayley Mills ... ... ... 57936 That Touch of Mink Doris Day 59064 The 300 Spartans Richard Egan 60632 Kid Galahad Elvis Presley 61054 La commare secca Marisa Solinas 64327 Merrill's Marauders Jeff Chandler 68288 Carnival of Souls Candace Hilligoss 68502 Carry On Cruising Sid James 70166 Half Ticket Kishore Kumar 71385 Eyes Without a Face Pierre Brasseur 75605 Through a Glass Darkly Harriet Andersson 75713 The Trial Anthony Perkins 79853 Professor Shammi Kapoor 84409 Salvatore Giuliano Salvo Randone 86275 On the Beat Norman Wisdom 87929 Harakiri Tatsuya Nakadai 88858 Gigot Jackie Gleason 91127 Phaedra Melina Mercouri 91338 Village of Daughters Eric Sykes 93041 Jigsaw Jack Warner 96345 Pitfall Hisashi Igawa 96653 The Loneliness of the Long Distance Runner Tom Courtenay 96889 Mother Joan of the Angels Lucyna Winnicka 98314 Life for Ruth Michael Craig 103757 Os Cafajestes Daniel Filho 105150 Prison Doris Svedlund 112764 The Exterminating Angel Silvia Pinal 113028 The Four Days of Naples Regina Bianchi 114722 The Longest Day John Wayne&lt;br /&gt; 118480 Two Half Times in Hell Imre Sinkovits 118902 Varan the Unbelievable KÃ´zÃ´ Nomura 85 rows × 2 columns 困難的題目12.尊·特拉華達’John Travolta’最忙是哪一年? 顯示年份和該年的電影數目。 mysql1234567891011%sql SELECT yr,COUNT(title) FROM \\ movie JOIN casting ON movie.id=movieid \\ JOIN actor ON actorid=actor.id \\WHERE name='John Travolta' \\GROUP BY yr \\HAVING COUNT(title)=(SELECT MAX(c) FROM \\(SELECT yr,COUNT(title) AS c FROM \\ movie JOIN casting ON movie.id=movieid \\ JOIN actor ON actorid=actor.id \\ WHERE name='John Travolta' \\ GROUP BY yr) AS t) * mysql+pymysql://root:***@localhost/dbs --------------------------------------------------------------------------- KeyboardInterrupt Traceback (most recent call last) &lt;ipython-input-5-4243d433212e&gt; in &lt;module&gt; ----&gt; 1 get_ipython().run_line_magic(&apos;sql&apos;, &quot;SELECT yr,COUNT(title) FROM movie JOIN casting ON movie.id=movieid JOIN actor ON actorid=actor.id WHERE name=&apos;John Travolta&apos; GROUP BY yr HAVING COUNT(title)=(SELECT MAX(c) FROM (SELECT yr,COUNT(title) AS c FROM movie JOIN casting ON movie.id=movieid JOIN actor ON actorid=actor.id WHERE name=&apos;John Travolta&apos; GROUP BY yr) AS t)&quot;) ~/anaconda3/lib/python3.7/site-packages/IPython/core/interactiveshell.py in run_line_magic(self, magic_name, line, _stack_depth) 2285 kwargs[&apos;local_ns&apos;] = sys._getframe(stack_depth).f_locals 2286 with self.builtin_trap: -&gt; 2287 result = fn(*args,**kwargs) 2288 return result 2289 &lt;decorator-gen-126&gt; in execute(self, line, cell, local_ns) ~/anaconda3/lib/python3.7/site-packages/IPython/core/magic.py in &lt;lambda&gt;(f, *a, **k) 185 # but it&apos;s overkill for just that one bit of state. 186 def magic_deco(arg): --&gt; 187 call = lambda f, *a, **k: f(*a, **k) 188 189 if callable(arg): &lt;decorator-gen-125&gt; in execute(self, line, cell, local_ns) ~/anaconda3/lib/python3.7/site-packages/IPython/core/magic.py in &lt;lambda&gt;(f, *a, **k) 185 # but it&apos;s overkill for just that one bit of state. 186 def magic_deco(arg): --&gt; 187 call = lambda f, *a, **k: f(*a, **k) 188 189 if callable(arg): ~/anaconda3/lib/python3.7/site-packages/sql/magic.py in execute(self, line, cell, local_ns) 93 94 try: ---&gt; 95 result = sql.run.run(conn, parsed[&apos;sql&apos;], self, user_ns) 96 97 if result is not None and not isinstance(result, str) and self.column_local_vars: ~/anaconda3/lib/python3.7/site-packages/sql/run.py in run(conn, sql, config, user_namespace) 338 else: 339 txt = sqlalchemy.sql.text(statement) --&gt; 340 result = conn.session.execute(txt, user_namespace) 341 _commit(conn=conn, config=config) 342 if result and config.feedback: ~/anaconda3/lib/python3.7/site-packages/sqlalchemy/engine/base.py in execute(self, object, *multiparams, **params) 946 raise exc.ObjectNotExecutableError(object) 947 else: --&gt; 948 return meth(self, multiparams, params) 949 950 def _execute_function(self, func, multiparams, params): ~/anaconda3/lib/python3.7/site-packages/sqlalchemy/sql/elements.py in _execute_on_connection(self, connection, multiparams, params) 267 def _execute_on_connection(self, connection, multiparams, params): 268 if self.supports_execution: --&gt; 269 return connection._execute_clauseelement(self, multiparams, params) 270 else: 271 raise exc.ObjectNotExecutableError(self) ~/anaconda3/lib/python3.7/site-packages/sqlalchemy/engine/base.py in _execute_clauseelement(self, elem, multiparams, params) 1058 compiled_sql, 1059 distilled_params, -&gt; 1060 compiled_sql, distilled_params 1061 ) 1062 if self._has_events or self.engine._has_events: ~/anaconda3/lib/python3.7/site-packages/sqlalchemy/engine/base.py in _execute_context(self, dialect, constructor, statement, parameters, *args) 1198 parameters, 1199 cursor, -&gt; 1200 context) 1201 1202 if self._has_events or self.engine._has_events: ~/anaconda3/lib/python3.7/site-packages/sqlalchemy/engine/base.py in _handle_dbapi_exception(self, e, statement, parameters, cursor, context) 1414 ) 1415 else: -&gt; 1416 util.reraise(*exc_info) 1417 1418 finally: ~/anaconda3/lib/python3.7/site-packages/sqlalchemy/util/compat.py in reraise(tp, value, tb, cause) 247 if value.__traceback__ is not tb: 248 raise value.with_traceback(tb) --&gt; 249 raise value 250 251 else: ~/anaconda3/lib/python3.7/site-packages/sqlalchemy/engine/base.py in _execute_context(self, dialect, constructor, statement, parameters, *args) 1191 statement, 1192 parameters, -&gt; 1193 context) 1194 except BaseException as e: 1195 self._handle_dbapi_exception( ~/anaconda3/lib/python3.7/site-packages/sqlalchemy/engine/default.py in do_execute(self, cursor, statement, parameters, context) 507 508 def do_execute(self, cursor, statement, parameters, context=None): --&gt; 509 cursor.execute(statement, parameters) 510 511 def do_execute_no_params(self, cursor, statement, context=None): ~/anaconda3/lib/python3.7/site-packages/pymysql/cursors.py in execute(self, query, args) 168 query = self.mogrify(query, args) 169 --&gt; 170 result = self._query(query) 171 self._executed = query 172 return result ~/anaconda3/lib/python3.7/site-packages/pymysql/cursors.py in _query(self, q) 326 self._last_executed = q 327 self._clear_result() --&gt; 328 conn.query(q) 329 self._do_get_result() 330 return self.rowcount ~/anaconda3/lib/python3.7/site-packages/pymysql/connections.py in query(self, sql, unbuffered) 515 sql = sql.encode(self.encoding, &apos;surrogateescape&apos;) 516 self._execute_command(COMMAND.COM_QUERY, sql) --&gt; 517 self._affected_rows = self._read_query_result(unbuffered=unbuffered) 518 return self._affected_rows 519 ~/anaconda3/lib/python3.7/site-packages/pymysql/connections.py in _read_query_result(self, unbuffered) 730 else: 731 result = MySQLResult(self) --&gt; 732 result.read() 733 self._result = result 734 if result.server_status is not None: ~/anaconda3/lib/python3.7/site-packages/pymysql/connections.py in read(self) 1073 def read(self): 1074 try: -&gt; 1075 first_packet = self.connection._read_packet() 1076 1077 if first_packet.is_ok_packet(): ~/anaconda3/lib/python3.7/site-packages/pymysql/connections.py in _read_packet(self, packet_type) 655 buff = b&apos;&apos; 656 while True: --&gt; 657 packet_header = self._read_bytes(4) 658 #if DEBUG: dump_packet(packet_header) 659 ~/anaconda3/lib/python3.7/site-packages/pymysql/connections.py in _read_bytes(self, num_bytes) 689 while True: 690 try: --&gt; 691 data = self._rfile.read(num_bytes) 692 break 693 except (IOError, OSError) as e: ~/anaconda3/lib/python3.7/socket.py in readinto(self, b) 587 while True: 588 try: --&gt; 589 return self._sock.recv_into(b) 590 except timeout: 591 self._timeout_occurred = True KeyboardInterrupt: pandas1234m = movie.merge(casting, left_on=\"id\", right_on=\"movieid\")\\ .merge(actor, left_on=\"actorid\", right_on=\"id\")\\ .query(\"name == 'John Travolta'\")\\ .groupby([\"yr\", \"name\"])[[\"name\"]].agg(\"count\") 1m[m[\"name\"] == m.name.max()] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name yr name 1998 John Travolta 3 13.列出演員茱莉·安德絲’Julie Andrews’曾參與的電影名稱及其第1主角。 是否列了電影 “Little Miss Marker”兩次? 她於1980再參與此電影Little Miss Marker. 原作於1934年,她也有參與。 電影名稱不是獨一的。在子查詢中使用電影編號。 mysql12345678%sql select title, name from movie \\join casting on movie.id = movieid \\join actor on actorid = actor.id \\where ord = 1 and movieid in \\(SELECT movieid FROM casting \\WHERE actorid IN ( \\ SELECT id FROM actor \\ WHERE name='Julie Andrews')) * mysql+pymysql://root:***@localhost/dbs --------------------------------------------------------------------------- KeyboardInterrupt Traceback (most recent call last) &lt;ipython-input-10-fb64f659c6d5&gt; in &lt;module&gt; ----&gt; 1 get_ipython().run_line_magic(&apos;sql&apos;, &quot;select title, name from movie join casting on movie.id = movieid join actor on actorid = actor.id where ord = 1 and movieid in (SELECT movieid FROM casting WHERE actorid IN ( SELECT id FROM actor WHERE name=&apos;Julie Andrews&apos;))&quot;) ~/anaconda3/lib/python3.7/site-packages/IPython/core/interactiveshell.py in run_line_magic(self, magic_name, line, _stack_depth) 2285 kwargs[&apos;local_ns&apos;] = sys._getframe(stack_depth).f_locals 2286 with self.builtin_trap: -&gt; 2287 result = fn(*args,**kwargs) 2288 return result 2289 &lt;decorator-gen-126&gt; in execute(self, line, cell, local_ns) ~/anaconda3/lib/python3.7/site-packages/IPython/core/magic.py in &lt;lambda&gt;(f, *a, **k) 185 # but it&apos;s overkill for just that one bit of state. 186 def magic_deco(arg): --&gt; 187 call = lambda f, *a, **k: f(*a, **k) 188 189 if callable(arg): &lt;decorator-gen-125&gt; in execute(self, line, cell, local_ns) ~/anaconda3/lib/python3.7/site-packages/IPython/core/magic.py in &lt;lambda&gt;(f, *a, **k) 185 # but it&apos;s overkill for just that one bit of state. 186 def magic_deco(arg): --&gt; 187 call = lambda f, *a, **k: f(*a, **k) 188 189 if callable(arg): ~/anaconda3/lib/python3.7/site-packages/sql/magic.py in execute(self, line, cell, local_ns) 93 94 try: ---&gt; 95 result = sql.run.run(conn, parsed[&apos;sql&apos;], self, user_ns) 96 97 if result is not None and not isinstance(result, str) and self.column_local_vars: ~/anaconda3/lib/python3.7/site-packages/sql/run.py in run(conn, sql, config, user_namespace) 338 else: 339 txt = sqlalchemy.sql.text(statement) --&gt; 340 result = conn.session.execute(txt, user_namespace) 341 _commit(conn=conn, config=config) 342 if result and config.feedback: ~/anaconda3/lib/python3.7/site-packages/sqlalchemy/engine/base.py in execute(self, object, *multiparams, **params) 946 raise exc.ObjectNotExecutableError(object) 947 else: --&gt; 948 return meth(self, multiparams, params) 949 950 def _execute_function(self, func, multiparams, params): ~/anaconda3/lib/python3.7/site-packages/sqlalchemy/sql/elements.py in _execute_on_connection(self, connection, multiparams, params) 267 def _execute_on_connection(self, connection, multiparams, params): 268 if self.supports_execution: --&gt; 269 return connection._execute_clauseelement(self, multiparams, params) 270 else: 271 raise exc.ObjectNotExecutableError(self) ~/anaconda3/lib/python3.7/site-packages/sqlalchemy/engine/base.py in _execute_clauseelement(self, elem, multiparams, params) 1058 compiled_sql, 1059 distilled_params, -&gt; 1060 compiled_sql, distilled_params 1061 ) 1062 if self._has_events or self.engine._has_events: ~/anaconda3/lib/python3.7/site-packages/sqlalchemy/engine/base.py in _execute_context(self, dialect, constructor, statement, parameters, *args) 1198 parameters, 1199 cursor, -&gt; 1200 context) 1201 1202 if self._has_events or self.engine._has_events: ~/anaconda3/lib/python3.7/site-packages/sqlalchemy/engine/base.py in _handle_dbapi_exception(self, e, statement, parameters, cursor, context) 1414 ) 1415 else: -&gt; 1416 util.reraise(*exc_info) 1417 1418 finally: ~/anaconda3/lib/python3.7/site-packages/sqlalchemy/util/compat.py in reraise(tp, value, tb, cause) 247 if value.__traceback__ is not tb: 248 raise value.with_traceback(tb) --&gt; 249 raise value 250 251 else: ~/anaconda3/lib/python3.7/site-packages/sqlalchemy/engine/base.py in _execute_context(self, dialect, constructor, statement, parameters, *args) 1191 statement, 1192 parameters, -&gt; 1193 context) 1194 except BaseException as e: 1195 self._handle_dbapi_exception( ~/anaconda3/lib/python3.7/site-packages/sqlalchemy/engine/default.py in do_execute(self, cursor, statement, parameters, context) 507 508 def do_execute(self, cursor, statement, parameters, context=None): --&gt; 509 cursor.execute(statement, parameters) 510 511 def do_execute_no_params(self, cursor, statement, context=None): ~/anaconda3/lib/python3.7/site-packages/pymysql/cursors.py in execute(self, query, args) 168 query = self.mogrify(query, args) 169 --&gt; 170 result = self._query(query) 171 self._executed = query 172 return result ~/anaconda3/lib/python3.7/site-packages/pymysql/cursors.py in _query(self, q) 326 self._last_executed = q 327 self._clear_result() --&gt; 328 conn.query(q) 329 self._do_get_result() 330 return self.rowcount ~/anaconda3/lib/python3.7/site-packages/pymysql/connections.py in query(self, sql, unbuffered) 515 sql = sql.encode(self.encoding, &apos;surrogateescape&apos;) 516 self._execute_command(COMMAND.COM_QUERY, sql) --&gt; 517 self._affected_rows = self._read_query_result(unbuffered=unbuffered) 518 return self._affected_rows 519 ~/anaconda3/lib/python3.7/site-packages/pymysql/connections.py in _read_query_result(self, unbuffered) 730 else: 731 result = MySQLResult(self) --&gt; 732 result.read() 733 self._result = result 734 if result.server_status is not None: ~/anaconda3/lib/python3.7/site-packages/pymysql/connections.py in read(self) 1073 def read(self): 1074 try: -&gt; 1075 first_packet = self.connection._read_packet() 1076 1077 if first_packet.is_ok_packet(): ~/anaconda3/lib/python3.7/site-packages/pymysql/connections.py in _read_packet(self, packet_type) 655 buff = b&apos;&apos; 656 while True: --&gt; 657 packet_header = self._read_bytes(4) 658 #if DEBUG: dump_packet(packet_header) 659 ~/anaconda3/lib/python3.7/site-packages/pymysql/connections.py in _read_bytes(self, num_bytes) 689 while True: 690 try: --&gt; 691 data = self._rfile.read(num_bytes) 692 break 693 except (IOError, OSError) as e: ~/anaconda3/lib/python3.7/socket.py in readinto(self, b) 587 while True: 588 try: --&gt; 589 return self._sock.recv_into(b) 590 except timeout: 591 self._timeout_occurred = True KeyboardInterrupt: pandas12aid = actor[actor.name == \"Julie Andrews\"][\"id\"].values[0]aid 17912movieids = casting[casting.actorid == aid][\"movieid\"].valuesmovieids array([10016, 12354, 12497, 12766, 13846, 15145, 15476, 16870, 17117, 17445, 17765, 18270, 20136, 20136, 20180, 20181, 20509, 20627, 21023, 21154, 21171, 21483])12m = movie.merge(casting, left_on=\"id\", right_on=\"movieid\")\\ .merge(actor, left_on=\"actorid\", right_on=\"id\") 1m[m[\"ord\"] == 1 &amp; m[\"movieid\"].isin(movieids)][[\"title\", \"name\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } title name 1256 10 Dudley Moore 1267 Darling Lili Julie Andrews 1269 Duet for One Julie Andrews 1270 Hawaii Julie Andrews 1272 Mary Poppins Julie Andrews 1273 Relative Values Julie Andrews 1274 S.O.B. Julie Andrews 1276 Star! Julie Andrews 1282 The Sound of Music Julie Andrews 1283 The Tamarind Seed Julie Andrews 1284 Thoroughly Modern Millie Julie Andrews 1287 Victor Victoria Julie Andrews 8518 Shrek the Third Mike Myers 14805 Little Miss Marker Walter Matthau 20178 Torn Curtain Paul Newman 22451 The Pink Panther Strikes Again Peter Sellers 35148 The Princess Diaries Anne Hathaway 35149 The Princess Diaries 2: Royal Engagement Anne Hathaway 41739 Despicable Me Steve Carell 48122 The Americanization of Emily James Garner 54026 Tooth Fairy Dwayne Johnson 14. 列出按字母順序，列出哪一演員曾作30次第1主角。mysql12345%sql select name from movie \\join casting on movie.id = movieid and ord = 1 \\join actor on actor.id = actorid \\group by actorid, name \\having count(actorid) &gt;= 30 order by name * mysql+pymysql://root:***@localhost/dbspandas12m = movie.merge(casting, left_on=\"id\", right_on=\"movieid\").query(\"ord == 1\")\\ .merge(actor, left_on=\"actorid\", right_on=\"id\") 1m.groupby([\"actorid\", \"name\"]).agg({\"actorid\": 'count'}).query(\"actorid &gt;= 30\").sort_values(\"name\") .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } actorid actorid name 561 Bette Davis 31 274 Bruce Willis 31 468 Burt Lancaster 33 1962 Gary Cooper 35 4830 James Stewart 31 871 John Wayne 58 2697 Paul Newman 31 560 Spencer Tracy 30 2685 William Garwood 38 15.列出1978年首影的電影名稱及角色數目，按此數目由多至少排列。 mysql1234%sql select title, count(actorid) as c from movie \\join casting on movie.id = movieid and yr = 1978 \\group by title \\order by c desc, title * mysql+pymysql://root:***@localhost/dbs 108 rows affected. title c The Bad News Bears Go to Japan 50 The Swarm 37 Grease 28 American Hot Wax 27 The Boys from Brazil 26 Heaven Can Wait 25 Big Wednesday 21 A Night Full of Rain 19 A Wedding 19 Orchestra Rehearsal 19 The Cheap Detective 19 Go Tell the Spartans 18 Death on the Nile 17 Movie Movie 17 Superman 17 The Cat from Outer Space 17 The Driver 17 The Star Wars Holiday Special 17 Blue Collar 16 Ice Castles 16 International Velvet 16 J.R.R. Tolkien's The Lord of the Rings 16 Alexandria... Why? 15 Bye Bye Monkey 15 Coming Home 15 David 15 Gray Lady Down 15 Occupation in 26 Pictures 15 Revenge of the Pink Panther 15 The Brink's Job 15 The Chant of Jimmie Blacksmith 15 The Water Babies 15 Violette NoziÃ¨re 15 Who'll Stop The Rain 15 Without Anesthesia 15 Bread and Chocolate 14 Closed Circuit 14 Damien: Omen II 14 I Wanna Hold Your Hand 14 The Empire of Passion 14 Almost Summer 13 An Unmarried Woman 13 Foul Play 13 Goin' South 13 The Left-Handed Woman 13 California Suite 12 Force 10 From Navarone 12 In Praise of Older Women 12 Jaws 2 12 Midnight Express 12 Piranha 12 The End 12 Autumn Sonata 11 Comes a Horseman 11 Days of Heaven 11 Don 11 Sgt. Pepper's Lonely Hearts Club Band 11 Up in Smoke 11 Eyes of Laura Mars 10 Invasion of the Body Snatchers 10 Muqaddar Ka Sikandar 10 National Lampoon's Animal House 10 Zero to Sixty 10 Fingers 9 FM 9 Shogun's Samurai 9 The Boys in Company C 9 The Shout 9 The Wiz 9 Fedora 8 The Ascent 8 Attack of the Killer Tomatoes 7 Hooper 7 Kondura (Anugraham in Telugu) 7 The Big Fix 7 The Fury 7 Girlfriends 6 The Small One 6 Watership Down 6 House Calls 5 La Cage aux Folles 5 Rabbit Test 5 Rockers 5 Snake in the Eagle's Shadow 5 The Buddy Holly Story 5 The Deer Hunter 5 The Herd 5 The Last Waltz 5 You Are Not Alone 5 Drunken Master 4 Get Out Your Handkerchiefs 4 Halloween 4 Hot Lead and Cold Feet 4 Passion Flower Hotel 4 American Boy: A Profile of Steven Prince 3 Coup de GrÃ¢ce 3 Lady on the Bus 3 Pretty Baby 3 Renaldo and Clara 3 The King of the Street Cleaners 3 The One and Only 3 Enter the Fat Dragon 2 Lies My Father Told Me 2 Same Time, Next Year 2 Somebody Killed Her Husband 2 Thank God It's Friday 2 That's Carry On! 2 The 36th Chamber of Shaolin 2 pandas12m = movie.merge(casting, left_on=\"id\", right_on=\"movieid\").query(\"yr == 1978\")\\ .merge(actor, left_on=\"actorid\", right_on=\"id\") 1m.groupby(\"title\").agg({\"actorid\": \"count\"}).sort_values(\"title\").sort_values(\"actorid\", ascending=False) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } actorid title The Bad News Bears Go to Japan 50 The Swarm 37 Grease 28 American Hot Wax 27 The Boys from Brazil 26 Heaven Can Wait 25 Big Wednesday 21 A Wedding 19 Orchestra Rehearsal 19 A Night Full of Rain 19 The Cheap Detective 19 Go Tell the Spartans 18 Death on the Nile 17 Superman 17 The Cat from Outer Space 17 The Driver 17 The Star Wars Holiday Special 17 Movie Movie 17 Ice Castles 16 International Velvet 16 J.R.R. Tolkien's The Lord of the Rings 16 Blue Collar 16 Occupation in 26 Pictures 15 Bye Bye Monkey 15 Gray Lady Down 15 The Brink's Job 15 Coming Home 15 Alexandria... Why? 15 The Water Babies 15 Violette NoziÃ¨re 15 ... ... The Small One 6 You Are Not Alone 5 The Deer Hunter 5 Rabbit Test 5 La Cage aux Folles 5 The Buddy Holly Story 5 Snake in the Eagle's Shadow 5 The Herd 5 Rockers 5 The Last Waltz 5 House Calls 5 Passion Flower Hotel 4 Drunken Master 4 Get Out Your Handkerchiefs 4 Hot Lead and Cold Feet 4 Halloween 4 The King of the Street Cleaners 3 The One and Only 3 American Boy: A Profile of Steven Prince 3 Lady on the Bus 3 Coup de GrÃ¢ce 3 Pretty Baby 3 Renaldo and Clara 3 The 36th Chamber of Shaolin 2 That's Carry On! 2 Thank God It's Friday 2 Somebody Killed Her Husband 2 Enter the Fat Dragon 2 Same Time, Next Year 2 Lies My Father Told Me 2 108 rows × 1 columns 16. 列出曾與演員亞特·葛芬柯’Art Garfunkel’合作過的演員姓名。mysql1234567%sql select name destinct from movie \\join casting on movieid = movie.id \\join actor on actorid = actor.id \\where name != 'Art Garfunkel' and movieid in \\ (select movieid from movie \\ join casting on movieid = movie.id \\ join actor on actorid = actor.id and name = 'Art Garfunkel') * mysql+pymysql://root:***@localhost/dbs --------------------------------------------------------------------------- KeyboardInterrupt Traceback (most recent call last) &lt;ipython-input-43-d50fa87e7b41&gt; in &lt;module&gt; ----&gt; 1 get_ipython().run_line_magic(&apos;sql&apos;, &quot;select name destinct from movie join casting on movieid = movie.id join actor on actorid = actor.id where name != &apos;Art Garfunkel&apos; and movieid in (select movieid from movie join casting on movieid = movie.id join actor on actorid = actor.id and name = &apos;Art Garfunkel&apos;) &quot;) ~/anaconda3/lib/python3.7/site-packages/IPython/core/interactiveshell.py in run_line_magic(self, magic_name, line, _stack_depth) 2285 kwargs[&apos;local_ns&apos;] = sys._getframe(stack_depth).f_locals 2286 with self.builtin_trap: -&gt; 2287 result = fn(*args,**kwargs) 2288 return result 2289 &lt;decorator-gen-126&gt; in execute(self, line, cell, local_ns) ~/anaconda3/lib/python3.7/site-packages/IPython/core/magic.py in &lt;lambda&gt;(f, *a, **k) 185 # but it&apos;s overkill for just that one bit of state. 186 def magic_deco(arg): --&gt; 187 call = lambda f, *a, **k: f(*a, **k) 188 189 if callable(arg): &lt;decorator-gen-125&gt; in execute(self, line, cell, local_ns) ~/anaconda3/lib/python3.7/site-packages/IPython/core/magic.py in &lt;lambda&gt;(f, *a, **k) 185 # but it&apos;s overkill for just that one bit of state. 186 def magic_deco(arg): --&gt; 187 call = lambda f, *a, **k: f(*a, **k) 188 189 if callable(arg): ~/anaconda3/lib/python3.7/site-packages/sql/magic.py in execute(self, line, cell, local_ns) 93 94 try: ---&gt; 95 result = sql.run.run(conn, parsed[&apos;sql&apos;], self, user_ns) 96 97 if result is not None and not isinstance(result, str) and self.column_local_vars: ~/anaconda3/lib/python3.7/site-packages/sql/run.py in run(conn, sql, config, user_namespace) 338 else: 339 txt = sqlalchemy.sql.text(statement) --&gt; 340 result = conn.session.execute(txt, user_namespace) 341 _commit(conn=conn, config=config) 342 if result and config.feedback: ~/anaconda3/lib/python3.7/site-packages/sqlalchemy/engine/base.py in execute(self, object, *multiparams, **params) 946 raise exc.ObjectNotExecutableError(object) 947 else: --&gt; 948 return meth(self, multiparams, params) 949 950 def _execute_function(self, func, multiparams, params): ~/anaconda3/lib/python3.7/site-packages/sqlalchemy/sql/elements.py in _execute_on_connection(self, connection, multiparams, params) 267 def _execute_on_connection(self, connection, multiparams, params): 268 if self.supports_execution: --&gt; 269 return connection._execute_clauseelement(self, multiparams, params) 270 else: 271 raise exc.ObjectNotExecutableError(self) ~/anaconda3/lib/python3.7/site-packages/sqlalchemy/engine/base.py in _execute_clauseelement(self, elem, multiparams, params) 1058 compiled_sql, 1059 distilled_params, -&gt; 1060 compiled_sql, distilled_params 1061 ) 1062 if self._has_events or self.engine._has_events: ~/anaconda3/lib/python3.7/site-packages/sqlalchemy/engine/base.py in _execute_context(self, dialect, constructor, statement, parameters, *args) 1198 parameters, 1199 cursor, -&gt; 1200 context) 1201 1202 if self._has_events or self.engine._has_events: ~/anaconda3/lib/python3.7/site-packages/sqlalchemy/engine/base.py in _handle_dbapi_exception(self, e, statement, parameters, cursor, context) 1414 ) 1415 else: -&gt; 1416 util.reraise(*exc_info) 1417 1418 finally: ~/anaconda3/lib/python3.7/site-packages/sqlalchemy/util/compat.py in reraise(tp, value, tb, cause) 247 if value.__traceback__ is not tb: 248 raise value.with_traceback(tb) --&gt; 249 raise value 250 251 else: ~/anaconda3/lib/python3.7/site-packages/sqlalchemy/engine/base.py in _execute_context(self, dialect, constructor, statement, parameters, *args) 1191 statement, 1192 parameters, -&gt; 1193 context) 1194 except BaseException as e: 1195 self._handle_dbapi_exception( ~/anaconda3/lib/python3.7/site-packages/sqlalchemy/engine/default.py in do_execute(self, cursor, statement, parameters, context) 507 508 def do_execute(self, cursor, statement, parameters, context=None): --&gt; 509 cursor.execute(statement, parameters) 510 511 def do_execute_no_params(self, cursor, statement, context=None): ~/anaconda3/lib/python3.7/site-packages/pymysql/cursors.py in execute(self, query, args) 168 query = self.mogrify(query, args) 169 --&gt; 170 result = self._query(query) 171 self._executed = query 172 return result ~/anaconda3/lib/python3.7/site-packages/pymysql/cursors.py in _query(self, q) 326 self._last_executed = q 327 self._clear_result() --&gt; 328 conn.query(q) 329 self._do_get_result() 330 return self.rowcount ~/anaconda3/lib/python3.7/site-packages/pymysql/connections.py in query(self, sql, unbuffered) 515 sql = sql.encode(self.encoding, &apos;surrogateescape&apos;) 516 self._execute_command(COMMAND.COM_QUERY, sql) --&gt; 517 self._affected_rows = self._read_query_result(unbuffered=unbuffered) 518 return self._affected_rows 519 ~/anaconda3/lib/python3.7/site-packages/pymysql/connections.py in _read_query_result(self, unbuffered) 730 else: 731 result = MySQLResult(self) --&gt; 732 result.read() 733 self._result = result 734 if result.server_status is not None: ~/anaconda3/lib/python3.7/site-packages/pymysql/connections.py in read(self) 1073 def read(self): 1074 try: -&gt; 1075 first_packet = self.connection._read_packet() 1076 1077 if first_packet.is_ok_packet(): ~/anaconda3/lib/python3.7/site-packages/pymysql/connections.py in _read_packet(self, packet_type) 655 buff = b&apos;&apos; 656 while True: --&gt; 657 packet_header = self._read_bytes(4) 658 #if DEBUG: dump_packet(packet_header) 659 ~/anaconda3/lib/python3.7/site-packages/pymysql/connections.py in _read_bytes(self, num_bytes) 689 while True: 690 try: --&gt; 691 data = self._rfile.read(num_bytes) 692 break 693 except (IOError, OSError) as e: ~/anaconda3/lib/python3.7/socket.py in readinto(self, b) 587 while True: 588 try: --&gt; 589 return self._sock.recv_into(b) 590 except timeout: 591 self._timeout_occurred = True KeyboardInterrupt: destinct Mark Ruffalo Ryan Phillippe Mike Myers Neve Campbell Salma Hayek Sela Ward Breckin Meyer Sherry Stringfield Cameron Mathison Heather Matarazzo Skipp Sudduth Lauren Hutton Michael York Ellen Albertini Dow Thelma Houston Ron Jeremy Elio Fiorucci Sheryl Crow Georgina Grenville Cindy Crawford Heidi Klum Donald Trump Cecilie Thomsen Frederique van der Wal Veronica Webb Peter Bogdanovich Beverly Johnson Bruce Jay Friedman Lorna Luft Valerie Perrine Stars on 54 Julian Sands Bill Paxton Sherilyn Fenn Kurtwood Smith Harris Yulin Robert DoQui pandas12m = movie.merge(casting, left_on=\"id\", right_on=\"movieid\")\\ .merge(actor, left_on=\"actorid\", right_on=\"id\") 1movieids = m[m.name == \"Art Garfunkel\"][\"movieid\"] 1actor_names = m[(m.name != \"Art Garfunkel\") &amp; (m.movieid.isin(movieids))][\"name\"].drop_duplicates() 1actor_names 2460 Mark Ruffalo 8496 Ryan Phillippe 8511 Mike Myers 8524 Neve Campbell 8536 Salma Hayek 8554 Sela Ward 8563 Breckin Meyer 8579 Sherry Stringfield 8582 Cameron Mathison 8583 Heather Matarazzo 8592 Skipp Sudduth 8596 Lauren Hutton 8604 Michael York 8623 Ellen Albertini Dow 8628 Thelma Houston 8629 Ron Jeremy 8637 Elio Fiorucci 8638 Sheryl Crow 8640 Georgina Grenville 8641 Cindy Crawford 8643 Heidi Klum 8646 Donald Trump 8652 Cecilie Thomsen 8654 Frederique van der Wal 8655 Veronica Webb 8660 Peter Bogdanovich 8663 Beverly Johnson 8667 Bruce Jay Friedman 8668 Lorna Luft 8672 Valerie Perrine 8684 Stars on 54 22012 Julian Sands 22669 Bill Paxton 39417 Harris Yulin 62213 Sherilyn Fenn 62223 Kurtwood Smith 65301 Robert DoQui Name: name, dtype: object","link":"/2019/09/26/mysql%E4%B8%8Epandas%E5%AF%B9%E7%85%A7%E5%AD%A6%E4%B9%A0-7/"},{"title":"linux系统问题杂锦","text":"ubuntu硬盘分区ntfs加载 有时在ubuntu系统里，碰到有些硬盘分区没有成功加载，以下代码可以解决这个问题 sudo parted /dev/sda print sudo ntfsfix /dev/sda5 或 sudo ntfsfix /dev/sda7 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950lanhoo@lanhoo-rexbook:~$ sudo parted /dev/sda print[sudo] password for lanhoo: Model: ATA M.2 2242V 256GB (scsi)Disk /dev/sda: 256GBSector size (logical/physical): 512B/512BPartition Table: gptDisk Flags: Number Start End Size File system Name Flags 1 1049kB 106MB 105MB fat32 EFI system partition boot, esp 2 106MB 123MB 16.8MB Microsoft reserved partition msftres 3 123MB 42.2GB 42.1GB ntfs Basic data partition msftdata 4 42.2GB 43.1GB 844MB ntfs hidden, diag 5 43.1GB 85.7GB 42.6GB ntfs Basic data partition msftdata 6 85.7GB 120GB 34.2GB ext4 9 120GB 128GB 8505MB linux-swap(v1) 7 128GB 256GB 127GB ntfs Basic data partition msftdata 8 256GB 256GB 503MB ntfs Basic data partition hidden, diaglanhoo@lanhoo-rexbook:~$ sudo ntfsfix /dev/sda5Mounting volume... The disk contains an unclean file system (0, 0).Metadata kept in Windows cache, refused to mount.FAILEDAttempting to correct errors... Processing $MFT and $MFTMirr...Reading $MFT... OKReading $MFTMirr... OKComparing $MFTMirr to $MFT... OKProcessing of $MFT and $MFTMirr completed successfully.Setting required flags on partition... OKGoing to empty the journal ($LogFile)... OKChecking the alternate boot sector... OKNTFS volume version is 3.1.NTFS partition /dev/sda5 was processed successfully.lanhoo@lanhoo-rexbook:~$ sudo ntfsfix /dev/sda7Mounting volume... The disk contains an unclean file system (0, 0).Metadata kept in Windows cache, refused to mount.FAILEDAttempting to correct errors... Processing $MFT and $MFTMirr...Reading $MFT... OKReading $MFTMirr... OKComparing $MFTMirr to $MFT... OKProcessing of $MFT and $MFTMirr completed successfully.Setting required flags on partition... OKGoing to empty the journal ($LogFile)... OKChecking the alternate boot sector... OKNTFS volume version is 3.1.NTFS partition /dev/sda7 was processed successfully. linux解压文件名乱码处理使用终端命令：unar file.zip 参与文章：https://www.zhihu.com/question/20523036","link":"/2019/07/18/linux%E7%B3%BB%E7%BB%9F%E9%97%AE%E9%A2%98%E6%9D%82%E9%94%A6/"},{"title":"manjaro系统配置","text":"更换国内源使用国内的源有更快的下载速度，pacman能够测试不同源的速度并给它们排名，从中选择一个快的即可。选择的是上海交大sjtu的源。 123sudo pacman -Syysudo pacman-mirrors -i -c China -m ranksudo pacman -Syyu 添加arch源编辑/etc/pacman.conf文件，加入下面的内容： 123[archlinuxcn]SigLevel = Optional TrustedOnlyServer = https://mirrors.sjtug.sjtu.edu.cn/archlinux-cn/$arch 然后 sudo pacman -Syy &amp;&amp; sudo pacman -S archlinuxcn-keyring 现在可以升级一下系统： sudo pacman -Su 添加两个命令pbcopy和pbpaste 先安装xsel： sudo pacman -S xsel 1234567891011[lanhoo@lanhoo-pc ~]$ sudo pacman -S xsel[sudo] lanhoo 的密码：正在解析依赖关系...正在查找软件包冲突...软件包 (1) xsel-1.2.0.20160929-2下载大小: 0.02 MiB全部安装大小： 0.04 MiB:: 进行安装吗？ [Y/n] y 添加以下语句到~/.bashrc 12alias pbcopy='xsel --clipboard --input'alias pbpaste='xsel --clipboard --output' source .bashrc使刚才的修改生效 1[lanhoo@lanhoo-pc ~]$ source .bashrc 修改history显示效果以及保存条数123export HISTTIMEFORMAT=\"%Y/%m/%d %T \"export HISTSIZE=10000export HISTFILESIZE=10000","link":"/2019/10/01/manjaro%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"},{"title":"摘录一个关于jupyter-notebook技巧的网页","text":"原文在：https://www.dataquest.io/blog/jupyter-notebook-tips-tricks-shortcuts/ 若看不到，得翻墙 28 Jupyter Notebook Tips, Tricks, and Shortcuts Jupyter NotebookJupyter notebook, formerly known as the IPython notebook, is a flexible tool that helps you create readable analyses, as you can keep code, images, comments, formulae and plots together. In this post, we’ve collected some of the top Jupyter notebook tips to quickly turn you into a Jupyter power user! (This post is based on a post that originally appeared on Alex Rogozhnikov’s blog, ‘Brilliantly Wrong’. We have expanded the post and will continue to do so over time — if you have a suggestion please let us know. Thanks to Alex for graciously letting us republish his work here.) Jupyter is quite extensible, supports many programming languages and is easily hosted on your computer or on almost any server — you only need to have ssh or http access. Best of all, it’s completely free. Now let’s dive in to our list of 28 (and counting!) Jupyter notebook tips! The Jupyter interface. Project Jupyter was born out of the IPython project as the project evolved to become a notebook that could support multiple languages – hence its historical name as the IPython notebook. The name Jupyter is an indirect acronyum of the three core languages it was designed for: JUlia, PYThon, and R and is inspired by the planet Jupiter. When working with Python in Jupyter, the IPython kernel is used, which gives us some handy access to IPython features from within our Jupyter notebooks (more on that later!) We’re going to show you 28 tips and tricks to make your life working with Jupyter easier. 1. Keyboard ShortcutsAs any power user knows, keyboard shortcuts will save you lots of time. Jupyter stores a list of keybord shortcuts under the menu at the top: Help &gt; Keyboard Shortcuts, or by pressing H in command mode (more on that later). It’s worth checking this each time you update Jupyter, as more shortcuts are added all the time. Another way to access keyboard shortcuts, and a handy way to learn them is to use the command palette: Cmd + Shift + P (or Ctrl + Shift + P on Linux and Windows). This dialog box helps you run any command by name – useful if you don’t know the keyboard shortcut for an action or if what you want to do does not have a keyboard shortcut. The functionality is similar to Spotlight search on a Mac, and once you start using it you’ll wonder how you lived without it! The command palette. Some of my favorites: Esc will take you into command mode where you can navigate around your notebook with arrow keys. While in command mode: A to insert a new cell above the current cell, B to insert a new cell below. M to change the current cell to Markdown, Y to change it back to code D + D (press the key twice) to delete the current cell Enter will take you from command mode back into edit mode for the given cell. Shift + Tab will show you the Docstring (documentation) for the the object you have just typed in a code cell – you can keep pressing this short cut to cycle through a few modes of documentation. Ctrl + Shift + - will split the current cell into two from where your cursor is. Esc + F Find and replace on your code but not the outputs. Esc + O Toggle cell output. Select Multiple Cells: Shift + J or Shift + Down selects the next sell in a downwards direction. You can also select sells in an upwards direction by using Shift + K or Shift + Up. Once cells are selected, you can then delete / copy / cut / paste / run them as a batch. This is helpful when you need to move parts of a notebook. You can also use Shift + M to merge multiple cells. Merging multiple cells. 2. Pretty Display of VariablesThe first part of this is pretty widely known. By finishing a Jupyter cell with the name of a variable or unassigned output of a statement, Jupyter will display that variable without the need for a print statement. This is especially useful when dealing with Pandas DataFrames, as the output is neatly formatted into a table. What is known less, is that you can alter a modify the ast_note_interactivity kernel option to make jupyter do this for any variable or statement on it’s own line, so you can see the value of multiple statements at once. 123456from IPython.core.interactiveshell import InteractiveShellInteractiveShell.ast_node_interactivity = \"all\"from pydataset import dataquakes = data('quakes')quakes.head()quakes.tail() lat long depth mag stations 1 -20.42 181.62 562 4.8 41 2 -20.62 181.03 650 4.2 15 3 -26.00 184.10 42 5.4 43 4 -17.97 181.66 626 4.1 19 5 -20.42 181.96 649 4.0 11 lat long depth mag stations 996 -25.93 179.54 470 4.4 22 997 -12.28 167.06 248 4.7 35 998 -20.13 184.20 244 4.5 34 999 -17.40 187.80 40 4.5 14 1000 -21.59 170.56 165 6.0 119 If you want to set this behaviour for all instances of Jupyter (Notebook and Console), simply create a file ~/.ipython/profile_default/ipython_config.py with the lines below. 1234c = get_config()# Run all nodes interactivelyc.InteractiveShell.ast_node_interactivity = \"all\" 3. Easy links to documentationInside the Help menu you’ll find handy links to the online documentation for common libraries including NumPy, Pandas, SciPy and Matplotlib. Don’t forget also that by prepending a library, method or variable with ?, you can access the Docstring for quick reference on syntax. 123456?str.replace()Docstring:S.replace(old, new[, count]) -&gt; strReturn a copy of S with all occurrences of substringold replaced by new. If the optional argument count isgiven, only the first count occurrences are replaced.Type: method_descriptor 4. Plotting in notebooksThere are many options for generating plots in your notebooks. matplotlib (the de-facto standard), activated with %matplotlib inline – Here’s a Dataquest Matplotlib Tutorial. %matplotlib notebook provides interactivity but can be a little slow, since rendering is done server-side. Seaborn is built over Matplotlib and makes building more attractive plots easier. Just by importing Seaborn, your matplotlib plots are made ‘prettier’ without any code modification. mpld3 provides alternative renderer (using d3) for matplotlib code. Quite nice, though incomplete. bokeh is a better option for building interactive plots. plot.ly can generate nice plots – this used to be a paid service only but was recently open sourced. Altair is a relatively new declarative visualization library for Python. It’s easy to use and makes great looking plots, however the ability to customize those plots is not nearly as powerful as in Matplotlib. The Jupyter interface. 5. IPython Magic CommandsThe %matplotlib inline you saw above was an example of a IPython Magic command. Being based on the IPython kernel, Jupyter has access to all the Magics from the IPython kernel, and they can make your life a lot easier! 1234567# This will list all magic commands%lsmagicAvailable line magics:%alias %alias_magic %autocall %automagic %autosave %bookmark %cat %cd %clear %colors %config %connect_info %cp %debug %dhist %dirs %doctest_mode %ed %edit %env %gui %hist %history %killbgscripts %ldir %less %lf %lk %ll %load %load_ext %loadpy %logoff %logon %logstart %logstate %logstop %ls %lsmagic %lx %macro %magic %man %matplotlib %mkdir %more %mv %notebook %page %pastebin %pdb %pdef %pdoc %pfile %pinfo %pinfo2 %popd %pprint %precision %profile %prun %psearch %psource %pushd %pwd %pycat %pylab %qtconsole %quickref %recall %rehashx %reload_ext %rep %rerun %reset %reset_selective %rm %rmdir %run %save %sc %set_env %store %sx %system %tb %time %timeit %unalias %unload_ext %who %who_ls %whos %xdel %xmodeAvailable cell magics:%%! %%HTML %%SVG %%bash %%capture %%debug %%file %%html %%javascript %%js %%latex %%perl %%prun %%pypy %%python %%python2 %%python3 %%ruby %%script %%sh %%svg %%sx %%system %%time %%timeit %%writefileAutomagic is ON, % prefix IS NOT needed for line magics. I recommend browsing the documentation for all IPython Magic commands as you’ll no doubt find some that work for you. A few of my favorites are below: 6. IPython Magic – %env: Set Environment VariablesYou can manage environment variables of your notebook without restarting the jupyter server process. Some libraries (like theano) use environment variables to control behavior, %env is the most convenient way. 1234567# Running %env without any arguments# lists all environment variables# The line below sets the environment# variable%env OMP_NUM_THREADS%env OMP_NUM_THREADS=4env: OMP_NUM_THREADS=4 7. IPython Magic – %run: Execute python code%run can execute python code from .py files – this is well-documented behavior. Lesser known is the fact that it can also execute other jupyter notebooks, which can quite useful. Note that using %run is not the same as importing a python module. 123# this will execute and show the output from# all code cells of the specified notebook%run ./two-histograms.ipynb 8. IPython Magic – %load: Insert the code from an external scriptThis will replace the contents of the cell with an external script. You can either use a file on your computer as a source, or alternatively a URL. 1234567# Before Running%load ./hello_world.py# After Running# %load ./hello_world.pyif __name__ == \"__main__\": print(\"Hello World!\")Hello World! 9. IPython Magic – %store: Pass variables between notebooks.The %store command lets you pass variables between two different notebooks. 1234data = 'this is the string I want to pass to different notebook'%store datadel data # This has deleted the variableStored 'data' (str) Now, in a new notebook… 123%store -r dataprint(data)this is the string I want to pass to different notebook 10. IPython Magic – %who: List all variables of global scope.The %who command without any arguments will list all variables that existing in the global scope. Passing a parameter like str will list only variables of that type. 12345one = \"for the money\"two = \"for the show\"three = \"to get ready now go cat go\"%who strone three two 11. IPython Magic – TimingThere are two IPython Magic commands that are useful for timing – %%time and %timeit. These are especially handy when you have some slow code and you’re trying to indentify where the issue is. %%time will give you information about a single run of the code in your cell. 123456%%timeimport timefor _ in range(1000): time.sleep(0.01) # sleep for 0.01 secondsCPU times: user 21.5 ms, sys: 14.8 ms, total: 36.3 msWall time: 11.6 s %%timeit uses the Python timeit module which runs a statement 100,000 times (by default) and then provides the mean of the fastest three times. 1234import numpy%timeit numpy.random.normal(size=100)The slowest run took 7.29 times longer than the fastest. This could mean that an intermediate result is being cached.100000 loops, best of 3: 5.5 µs per loop 12. IPython Magic – %%writefile and %pycat: Export the contents of a cell/Show the contents of an external scriptUsing the %%writefile magic saves the contents of that cell to an external file. %pycat does the opposite, and shows you (in a popup) the syntax highlighted contents of an external file. 123456789101112131415161718192021222324%%writefile pythoncode.pyimport numpydef append_if_not_exists(arr, x): if x not in arr: arr.append(x)def some_useless_slow_function(): arr = list() for i in range(10000): x = numpy.random.randint(0, 10000) append_if_not_exists(arr, x)Writing pythoncode.py%pycat pythoncode.pyimport numpydef append_if_not_exists(arr, x): if x not in arr: arr.append(x)def some_useless_slow_function(): arr = list() for i in range(10000): x = numpy.random.randint(0, 10000) append_if_not_exists(arr, x) ### 13. IPython Magic – %prun: Show how much time your program spent in each function.Using %prun statement_name will give you an ordered table showing you the number of times each internal function was called within the statement, the time each call took as well as the cumulative time of all runs of the function. 12345678910111213%prun some_useless_slow_function()26324 function calls in 0.556 secondsOrdered by: internal timencalls tottime percall cumtime percall filename:lineno(function) 10000 0.527 0.000 0.528 0.000 :2(append_if_not_exists) 10000 0.022 0.000 0.022 0.000 {method 'randint' of 'mtrand.RandomState' objects} 1 0.006 0.006 0.556 0.556 :6(some_useless_slow_function) 6320 0.001 0.000 0.001 0.000 {method 'append' of 'list' objects} 1 0.000 0.000 0.556 0.556 :1() 1 0.000 0.000 0.556 0.556 {built-in method exec} 1 0.000 0.000 0.000 0.000 {method 'disable' of '_lsprof.Profiler' objects} 14. IPython Magic – Debugging with %pdbJupyter has own interface for The Python Debugger (pdb). This makes it possible to go inside the function and investigate what happens there. You can view a list of accepted commands for pdb here. 123456789101112131415161718192021222324252627282930%pdbdef pick_and_take(): picked = numpy.random.randint(0, 1000) raise NotImplementedError()pick_and_take()Automatic pdb calling has been turned ON--------------------------------------------------------------------NotImplementedError Traceback (most recent call last) in () 5 raise NotImplementedError() 6----&gt; 7 pick_and_take() in pick_and_take() 3 def pick_and_take(): 4 picked = numpy.random.randint(0, 1000)----&gt; 5 raise NotImplementedError() 6 7 pick_and_take()NotImplementedError:&gt; (5)pick_and_take() 3 def pick_and_take(): 4 picked = numpy.random.randint(0, 1000)----&gt; 5 raise NotImplementedError() 6 7 pick_and_take()ipdb&gt; 15. IPython Magic – High-resolution plot outputs for Retina notebooksOne line of IPython magic will give you double resolution plot output for Retina screens, such as the more recent Macbooks. Note: the example below won’t render on non-retina screens 1234567x = range(1000)y = [i ** 2 for i in x]plt.plot(x,y)plt.show();%config InlineBackend.figure_format ='retina'plt.plot(x,y)plt.show(); 16. Suppress the output of a final function.Sometimes it’s handy to suppress the output of the function on a final line, for instance when plotting. To do this, you just add a semicolon at the end. 12345678%matplotlib inlinefrom matplotlib import pyplot as pltimport numpyx = numpy.linspace(0, 1, 1000)**1.5# Here you get the output of the functionplt.hist(x)(array([ 216., 126., 106., 95., 87., 81., 77., 73., 71., 68.]), array([ 0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. ]),&lt;a list of 10 Patch objects&gt;)# By adding a semicolon at the end, the output is suppressed.plt.hist(x); 17. Executing Shell CommandsIt’s easy to execute a shell command from inside your notebook. You can use this to check what datasets are in available in your working folder: 123!ls *.csvnba_2016.csv titanic.csvpixar_movies.csv whitehouse_employees.csv Or to check and manage packages. 1234!pip install numpy!pip list | grep pandasRequirement already satisfied (use --upgrade to upgrade): numpy in /Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packagespandas (0.18.1) 18. Using LaTeX for forumlasWhen you write LaTeX in a Markdown cell, it will be rendered as a formula using MathJax. This: 1$P(A \\mid B) = \\frac{P(B \\mid A)P(A)}{P(B)}$ Becomes this: P(A∣B)=P(B∣A)P(A)P(B) Markdown is an important part of notebooks, so don’t forget to use its expressiveness! 19. Run code from a different kernel in a notebookIf you want to, you can combine code from multiple kernels into one notebook. Just use IPython Magics with the name of your kernel at the start of each cell that you want to use that Kernel for: %%bash %%HTML %%python2 %%python3 %%ruby %%perl 12345678910%%bashfor i in {1..5}do echo \"i is $i\"donei is 1i is 2i is 3i is 4i is 5 20. Install other kernels for JupyterOne of the nice features about Jupyter is ability to run kernels for different languages. As an example, here is how to get and R kernel running. Easy Option: Installing the R Kernel Using AnacondaIf you used Anaconda to set up your environment, getting R working is extremely easy. Just run the below in your terminal: 1conda install -c r r-essentials Less Easy Option: Installing the R Kernel ManuallyIf you are not using Anaconda, the process is a little more complex. Firstly, you’ll need to install R from CRAN if you haven’t already. Once that’s done, fire up an R console and run the following: 123install.packages(c('repr', 'IRdisplay', 'crayon', 'pbdZMQ', 'devtools'))devtools::install_github('IRkernel/IRkernel')IRkernel::installspec() # to register the kernel in the current R installation 21. Running R and Python in the same notebook.The best solution to this is to install rpy2 (requires a working version of R as well), which can be easily done with pip: 1pip install rpy2 You can then use the two languages together, and even pass variables inbetween: 123456789101112%load_ext rpy2.ipython%R require(ggplot2)array([1], dtype=int32)import pandas as pddf = pd.DataFrame({ 'Letter': ['a', 'a', 'a', 'b', 'b', 'b', 'c', 'c', 'c'], 'X': [4, 3, 5, 2, 1, 7, 7, 5, 9], 'Y': [0, 4, 3, 6, 7, 10, 11, 9, 13], 'Z': [1, 2, 3, 1, 2, 3, 1, 2, 3] })%%R -i dfggplot(data = df) + geom_point(aes(x = X, y= Y, color = Letter, size = Z)) Example courtesy Revolutions Blog 22. Writing functions in other languagesSometimes the speed of numpy is not enough and I need to write some fast code. In principle, you can compile function in the dynamic library and write python wrappers… But it is much better when this boring part is done for you, right? You can write functions in cython or fortran and use those directly from python code. First you’ll need to install: 123456!pip install cython fortran-magic%load_ext Cython%%cythondef myltiply_by_2(float x): return 2.0 * xmyltiply_by_2(23.) Personally I prefer to use fortran, which I found very convenient for writing number-crunching functions. More details of usage can be found here. 12345678910%load_ext fortranmagic%%fortransubroutine compute_fortran(x, y, z) real, intent(in) :: x(:), y(:) real, intent(out) :: z(size(x, 1)) z = sin(x + y)end subroutine compute_fortrancompute_fortran([1, 2, 3], [4, 5, 6]) There are also different jitter systems which can speed up your python code. More examples can be found here. 23. Multicursor supportJupyter supports mutiple cursors, similar to Sublime Text. Simply click and drag your mouse while holding down Alt. Multicursor support. 24. Jupyter-contrib extensionsJupyter-contrib extensions is a family of extensions which give Jupyter a lot more functionality, including e.g. jupyter spell-checker and code-formatter. The following commands will install the extensions, as well as a menu based configurator that will help you browse and enable the extensions from the main Jupyter notebook screen. 1234!pip install https://github.com/ipython-contrib/jupyter_contrib_nbextensions/tarball/master!pip install jupyter_nbextensions_configurator!jupyter contrib nbextension install --user!jupyter nbextensions_configurator enable --user The nbextension configurator. 25. Create a presentation from a Jupyter notebook.Damian Avila’s RISE allows you to create a powerpoint style presentation from an existing notebook. You can install RISE using conda: 1conda install -c damianavila82 rise Or alternatively pip: 1pip install RISE And then run the following code to install and enable the extension: 12jupyter-nbextension install rise --py --sys-prefixjupyter-nbextension enable rise --py --sys-prefix 26. The Jupyter output systemNotebooks are displayed as HTML and the cell output can be HTML, so you can return virtually anything: video/audio/images. In this example I scan the folder with images in my repository and show thumbnails of the first 5: 12345import osfrom IPython.display import display, Imagenames = [f for f in os.listdir('/images/ml_demonstrations/') if f.endswith('.png')]for name in names[:5]: display(Image('/images/ml_demonstrations/' + name, width=100)) We can create the same list with a bash command, because magics and bash calls return python variables: 1234567names = !ls /images/ml_demonstrations/*.pngnames[:5]['/images/ml_demonstrations/colah_embeddings.png','/images/ml_demonstrations/convnetjs.png','/images/ml_demonstrations/decision_tree.png','/images/ml_demonstrations/decision_tree_in_course.png','/images/ml_demonstrations/dream_mnist.png'] 27. ‘Big data’ analysisA number of solutions are available for querying/processing large data samples: ipyparallel (formerly ipython cluster) is a good option for simple map-reduce operations in python. We use it in rep to train many machine learning models in parallel pyspark spark-sql magic %%sql 28. Sharing notebooksThe easiest way to share your notebook is simply using the notebook file (.ipynb), but for those who don’t use Jupyter, you have a few options: Convert notebooks to html file using the File &gt; Download as &gt; HTML Menu option. Share your notebook file with gists or on github, both of which render the notebooks. See this example . If you upload your notebook to a github repository, you can use the handy mybinder service to allow someone half an hour of interactive Jupyter access to your repository. Setup your own system with jupyterhub, this is very handy when you organize mini-course or workshop and don’t have time to care about students machines. Store your notebook e.g. in dropbox and put the link to nbviewer. nbviewer will render the notebook from whichever source you host it. Use the File &gt; Download as &gt; PDF menu to save your notebook as a PDF. If you’re going this route, I highly recommend reading Julius Schulz’s excellent article Making publication ready Python notebooks. Create a blog using Pelican from your Jupyter notebooks.","link":"/2019/10/05/%E6%91%98%E5%BD%95%E4%B8%80%E4%B8%AA%E5%85%B3%E4%BA%8Ejupyter-notebook%E6%8A%80%E5%B7%A7%E7%9A%84%E7%BD%91%E9%A1%B5/"},{"title":"matplotlib中文显示问题","text":"查看matplotlib默认的设置文件所在位置 12import matplotlibprint(matplotlib.matplotlib_fname()) 结果显示： 1'/home/lanhoo/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-data/matplotlibrc' 查看该文件内容 摘录如下： 1234567891011121314#### MATPLOTLIBRC FORMAT## This is a sample matplotlib configuration file - you can find a copy## of it on your system in## site-packages/matplotlib/mpl-data/matplotlibrc. If you edit it## there, please note that it will be overwritten in your next install.## If you want to keep a permanent local copy that will not be## overwritten, place it in the following location:## unix/linux:## $HOME/.config/matplotlib/matplotlibrc or## $XDG_CONFIG_HOME/matplotlib/matplotlibrc (if $XDG_CONFIG_HOME is set)## other platforms:## $HOME/.matplotlib/matplotlibrc## 上面提示说以后安装会重写这个文件，导致你所修改的失效。最好根据上面的提示自定义一个文件 matplotlibrc 根据系统找到有这个文件夹：$HOME/.config/matplotlib/ 在上面的文件夹里新建一个文件matplotlibrc matplotlibrc 的配置内容如下： 123font.family : sans-seriffont.sans-serif : SimHei, DejaVu Sans, Bitstream Vera Sans, Computer Modern Sans Serif, Lucida Grande, Verdana, Geneva, Lucid, Arial, Helvetica, Avant Garde, sans-serifaxes.unicode_minus : False SimHei 字体没有安装的请下载安装，网上多得是。 重启电脑问题解决，或者执行下面的代码，重新执行之前的ipython或py文件 123from matplotlib.font_manager import _rebuild_rebuild() #reload一下 检验设置成功与否，执行第一步的代码， 结果如下： 1'/home/lanhoo/.config/matplotlib/matplotlibrc'","link":"/2019/10/03/matplotlib%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/"},{"title":"Mysql开启慢日志","text":"查看mysql物理文件存放地方1234567show global variables like \"%datadir%\";+---------------+-----------------+| Variable_name | Value |+---------------+-----------------+| datadir | /var/lib/mysql/ |+---------------+-----------------+ 以root进入该目录，建立data/slow.log,并更改所有者，所有组1234567sudo sucd /var/lib/mysql/mkdir datacd datatouch slow.logcd ..chown -R mysql:mysql data/ 在mysql里设置 set global slow_query_log='ON'; set global slow_query_log_file=&quot;/var/lib/mysql/data/slow.log&quot;; set global long_query_time=1; 12345678MariaDB [mygame]&gt; set global slow_query_log='ON';Query OK, 0 rows affected (0.011 sec)MariaDB [mygame]&gt; set global slow_query_log_file=\"/var/lib/mysql/data/slow.log\";Query OK, 0 rows affected (0.000 sec)MariaDB [mygame]&gt; set global long_query_time=1;Query OK, 0 rows affected (0.000 sec) 重启mysql服务1sudo systemctl restart mysqld 测试 执行一条慢查询SQL语句 1select sleep(2); 查看是否生成慢查询日志 1tail /var/lib/mysql/data/slow.log","link":"/2019/10/16/Mysql%E5%BC%80%E5%90%AF%E6%85%A2%E6%97%A5%E5%BF%97/"},{"title":"mariadb的安装","text":"安装 mariadb 软件包之后，你必须在启动 mariadb.service 之前运行下面这条命令： 1# mysql_install_db --user=mysql --basedir=/usr --datadir=/var/lib/mysql 更改密码1kate /etc/mysql/my.cnf.d/server.cnf 添加这两行 12[mysqld]skip-grant-tables 重启服务 1systemctl restart mariadb 运行命令 1mysql -u root mysql 进入mysql 12UPDATE mysql.user SET Password=PASSWORD('lanhoo') WHERE User='root';flush privileges;","link":"/2019/10/05/mariadb%E7%9A%84%E5%AE%89%E8%A3%85/"},{"title":"excel技巧","text":"快速定位 ctrl+方向键 单元格的 边缘处 当出现 小手 （mac)时 双击 ，快速到达非空单元格的首或尾 快速插入多行或多列 选择整行多行或整列多列，右键 插入 ，数量与选择的行数和列数有关 选择单行或单列后，在行索引或列索引处，按住 shift 不放，在索引右下角处待鼠标变为下图所示时，向上插入就向上拖动，其他方向类似，期间 shift 键不放。若是不按住就是把行或列覆盖了。 自动填充 选中单元格后拖拽填充柄， 小黑色实心十字处双击鼠标左键也是一样的 自定义序列ctrl+, 或 偏好设置 里有自定义序列 文本数值转数值类 不规则日期文本转换为日期 拖拽技巧1、快速移动/复制表格选中表格，直接拖动，即可快速移动到另一个位置； 如果按ctlr不松拖动表格，可以快速复制出一个表格。 移动复制表格 2、快速移动、缩放、复制、对齐图形我们在插入图形，移动图形……时，也有很多鼠标拖动的技巧。 常见的六种提高效率的拖拽操作为： 3、快速移动行或列注意是快速移动，不是替换，也不是复制。相当于移动并插入行或列。看下图即可明白。 操作手法：默念移动，左手按shift键不松，右手按鼠标左键不松拖动列或者行边线，可以快速让列或者行换位。 快速移动行或列 PS：拖拽时，鼠标一定要选在单元格边框上 4、快速插入、删除行左手按shift键不松，当光标显示下面分开形状时拖动（请注意看鼠标，会看到分成两行的时候）。 往下拖动，可以快速插入行； 往上拖动，可以可以快速删除行。 当然，这个操作对列也是适用的。 快速插入、删除行或者列 5、把表格转移到另一个工作表中按alt键不松，选中表格进行移动，可以将表格移动到另一个Sheet中。 个人感觉，没有复制简便。 但。。。朕要的就是“拖拽”的这种操作感。 快速移动表格区域 6、巧妙公式转数值①选取公式所在的列，按右键不松拖动到一边，别松键再拖回来； ②点击仅复制数值。 这个操作的本质是利用了右键呼出菜单，将动作连贯在了一起。 熟练运用，有一种浑然天成的感觉。 公式转数值 注：本案例也可以通过复制→选择性粘贴完成 7、拖拽生成数据透视表这个不能算作技巧，是数据透视表的常规操作，但是，数据透视表的这个特性，有一种行云流水的感觉。 所以专门写出来。 数据透视表拖拽 正如前文所言，鼠标拖拽和使用键盘快捷键是两种完全不同的感受，他们在效率提升方面，都有巨大优势。 跟着动图练习一下，掌握这些技巧吧。","link":"/2019/08/17/excel%E6%8A%80%E5%B7%A7/"},{"title":"excel数据分列","text":"由于分裂功能过后会把旁边的列占据掉 第一步是先要点击 目标列 的 右边列 ,右击 插入 生成新列 第二步是点击 目标列 ，选择菜单 数据 下的 分列 再按照提示把 目标列 分成两列 分列完成后再根据需求进行处理","link":"/2019/08/14/excel%E6%95%B0%E6%8D%AE%E5%88%86%E5%88%97/"},{"title":"用python写了一个解数字华容道游戏的程序","text":"华容道游戏，可以有数字型，也可以有图像型。这里介绍的是数字华容道，也叫数字推盘。市面上一般有3X3、4X4、5X5、6X6等，其中4X4数字华容道常作为《最强大脑》第一轮节目来选拔选手。 网络上有很多与之相关的编程话题，但很多都只是把数字打乱，并调整为有解的玩法。而我想要做的是怎样从一个有解的数字推盘一步一步地还原并且是最少的步数。 下面这张图就是程序完成后的结果 1. 创建了一个Position类 以3X3为例，那右下角的位置就是p = Positon(2, 2)，它们之前可以相加，判断是否相等，以及作为字典的key。 123456789101112131415161718192021222324252627class Position(): def __init__(self, a, b): self.a = a self.b = b def __add__(self, other): return Position(self.a + other.a, self.b + other.b) def __repr__(self): return \"(%d, %d)\" % (self.a, self.b) def __eq__(self, other): if self.a == other.a and self.b == other.b: return True return False # 若写了__eq__而不写__hash__方法，用作字典的key时会报错：unhashable type: 'Position' def __hash__(self): return hash((self.a, self.b)) @property def row(self): return self.a @property def column(self): return self.b 2. 创建了一个枚举类，模拟Position类上下左右的情况 以3X3为例，右下角p = Positon(2, 2)向左移就得到p + LEFT –&gt; Position(2, 1) 12345678910111213from enum import Enumclass Move(Enum): LEFT = Position(0, -1) RIGHT = Position(0, 1) UP = Position(-1, 0) DOWN = Position(1, 0)LEFT = Move.LEFT.valueRIGHT = Move.RIGHT.valueUP = Move.UP.valueDOWN = Move.DOWN.valueCHOICES = [LEFT, UP, RIGHT, DOWN] 3. 最基本的两个类写完，下面代码就不列举了，说下主要的思路 我的求解是逆推方式 下面的以3X3的数字推盘为例 0代表数字推盘里的空位 最初始的状态，也就是还原后的答案为123456780 它走一步可以有向左123456708和向上123450786两种情况： 向左，记录一下123456708：l 向上，记录一下123450786: u 走两步的情况： 123456708可以向左，向上，记录下4种情况 ...: ll ...: lu 123450786可以向左，向上 ...: ul ...: uu 以此类推，把所有的可能性走完，就把3x3的解法全部记录完成 4. 遇到的问题 3×3所有的可能情况有9X8X7X6X5X4X3即181440种情况，包括了最初状态，没有乘以2是因为有一半是无解的，无法还原。我用mysql来记录，18万条数据用了36M。 4x4所有的可能情况有16!/2有大约10万亿条数据，存储所有的4x4大约需要2000TB，个人电脑明显存储不了，所有4x4只存了174万条。 像4x4这么多的情况，计算到后面步数越多，计算量巨大，同时写入数据库也巨慢。 5. 展示其他的数字华容道","link":"/2019/11/10/%E7%94%A8python%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA%E8%A7%A3%E6%95%B0%E5%AD%97%E5%8D%8E%E5%AE%B9%E9%81%93%E6%B8%B8%E6%88%8F%E7%9A%84%E7%A8%8B%E5%BA%8F/"}],"tags":[{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"icarus","slug":"icarus","link":"/tags/icarus/"},{"name":"软件","slug":"软件","link":"/tags/%E8%BD%AF%E4%BB%B6/"},{"name":"arch","slug":"arch","link":"/tags/arch/"},{"name":"linux","slug":"linux","link":"/tags/linux/"},{"name":"数据分析","slug":"数据分析","link":"/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"},{"name":"mysql","slug":"mysql","link":"/tags/mysql/"},{"name":"pandas","slug":"pandas","link":"/tags/pandas/"},{"name":"ubuntu","slug":"ubuntu","link":"/tags/ubuntu/"},{"name":"配置","slug":"配置","link":"/tags/%E9%85%8D%E7%BD%AE/"},{"name":"jupyter","slug":"jupyter","link":"/tags/jupyter/"},{"name":"matplotlib","slug":"matplotlib","link":"/tags/matplotlib/"},{"name":"mariadb","slug":"mariadb","link":"/tags/mariadb/"},{"name":"SQL","slug":"SQL","link":"/tags/SQL/"},{"name":"excel","slug":"excel","link":"/tags/excel/"},{"name":"python","slug":"python","link":"/tags/python/"},{"name":"华容道","slug":"华容道","link":"/tags/%E5%8D%8E%E5%AE%B9%E9%81%93/"}],"categories":[{"name":"系统配置","slug":"系统配置","link":"/categories/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"},{"name":"数据分析","slug":"数据分析","link":"/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"}]}